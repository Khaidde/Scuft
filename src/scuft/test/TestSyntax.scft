type Vector3 {
    x: num;
    y: num;
    z: num;
}

module Astrology {
    stars = 30000;
    lightUp = () {}
}

module Astrology2 {
    stars = 4000;
    lightUp = () {}
}

doFuncThing = (func: (num) -> void, b: Particle) {
    func(b);
}

fun2 = (b:(num) -> void) {

}

fun3 = (a + c);

b: num;
b = 3;
var_test = 3;

main = () { // You can capture variables, functions, and modules

    ///Astrology is also defined here

    with Astrology;

    b = 4;
    a = Particle;

    p: Particle;
    if #typeof p === a;
    
    #typeof (#typeof p)
    #typeof Particle => type
    
    type Particle {
        id: num;
        // pos: <num, num, num>;
        // vel: Vec3;
    }

    testF = [*] (val: Particle) -> void {
        p.x = 20;
    }

    doFuncThing(testF, p);

    lightUp();
    stars;

    add = [] (particle: Particle, particle2: Particle) -> void {
        //Something
        s = 3;
    }

    functionABC = [] (a: num, b: num) -> num {
        return a + b;
    }

    a : num = 3; //declare variable "a" with value 3 

    a' = 4; //apostrophes allowed in identifier

    /*
    Block comments!
    */
    b = 3; //Implicit num variable declaration

    c : string = "c string";

    functionABC(2, a); //Function call

    particle = Particle { //Type Constructor
        pos = <1, 2, 3>;
    };
    particle2 = Particle{};

    print = (prefix: string, particle: Particle) -> void {
        sysout(prefix + particle.pos<0>);
        sysout(prefix + particle.vel.x);
    }
}

forEachLoops = () {
    arrayOfParticles: <Particle>**100; // Tentative 
    array2OfParticles: <Particle>**60;

    matrixOfParticles: <<Particle>**10>**10; // Tentative

    loop = () {
        for i = 0, i < 10, i++ {
            for arrayOfParticles loop();
        }
    }

    for arrayOfParticles {
        loop();
    }
    for arrayOfParticles print(...);

    for i = 0, i < arrayOfParticles.length, i++ loop(); //Figure out if this can be broken

    for i = 0, i < arrayOfParticles.length, i++ {
        print(arrayOfParticles[i]);
    }
}

derivatives = () {
    
    //Where fun is converted by the language into fun'
    fun = [] (x: num) -> num {    
        return 4 * x + 6 * sin(x) + asdf;
    }
    fun' = [] (x: num) -> num {    
        return 4 + 6 * cos(x);
    }

    expr = #expr (x) 4 * x ^ 2 + 6 * sin(x);
    expr' = #derive expr x; // equivalent to (x: num) 4 + 6 * cos(x)

    fun2 = (x: num, y: num) -> num = {    
        return 4 + 6 * cos(x) + y;
    }

    r: (num) -> <num, num, num> = #expr t <3, 2, 3>;
    r1 = [] (t: num) -> <num, num, num> {    
        return <3, 2, 3>;
    }
    r' = #derive r t;
}

singleVarExpressions = () {

    expandedExpression = (x: num, y: num) {
        return x + x * y - x * sin(y * x ^ 2);
    } 
    
    //Directive keyboard "#brief" allows for "brief expressions"
    singleExpression = (x: num, y: num) {
        return #brief x + xy - xsin( yx^2 );
    } 

    //Note: identifiers can only use single character variables
    evenShorterExpression = #expr (x, y) #brief x + xy - xsin(yx^2);

    /*
    During the lexing stage, #brief turns on an internal flag which prompts lexer to 
    create only single character identifiers for the rest of the line. Keywords like 
    "sin", "cos", etc are checked before forming identifiers so there is no conflict.
    */
}

lambdaSyntax = () {
        
    // Both shiftedSquare1 and shiftedSquare2 are equivalent declarations   
    shiftedSquare1 = (x: num, y: num) -> num {
        return (x - y) ^ 2;
    }

    //This is no longer valid
    // (x: num, y: num) -> num {return (x - y) ^ 2;} ();

    // Note that the function must be pure.
    // Mayur disapproves: pure shiftedSquare2(x, y) = (x - y) ^ 2; 
    shiftedSquare2 = \(x, y) -> (x - y) ^ 2;

    (\(x, y) -> (x - y) ^ 2) ();

    assert (shiftedSquare1(10.1, 4.2) == shiftedSquare2(10.1, 4.2));

    shiftedSquare2' = #derive shiftedSquare2 x;
}

assertSyntax = () {

    assert(3 + 4 > 5, "Error message printed if !(3 + 4 > 5)");

}

operatorOverloads = () {
    a: Point = (1, 2);
    b: Point = (1, 3);

    operator + = (p1: Point, p2: Point) {
        ...
    }

    c: Point = a + b;
}

vector = () {

    // "Vectorizable types" - Mayur

    x: typeof (VectorizableType)
    a = <3, <x, 3>, 4>; // <num, <typeof(VectorizableType), num>, num> 
    
    type Complex {
        real: num;
        imag: num;
    }
    vectorize Complex {
        operator * = (a: Complex, b: Complex) -> Complex {
            return Complex { 
                real = a.real * b.real, 
                imag = a.imag + b.imag
            };
        }
        operator + = (a: Complex, b: Complex) -> Complex {
            return Complex { 
                real = a.real * b.real - a.imag * b.imag;
                imag = -1 // Math definition
            };
        }
        id = Complex {0 , 0}
    }
    crazyMF: <Complex, <Complex, Complex>>;
    c = (real: num, imag: num) -> Complex {
        return Complex{ real = real, imag = imag };
    }
    crazyMF = < c(1, 2), < c(-2, 0), c(2, 6) > >;

    res = crazyMf * Complex {real = 1, imag = 2};
}

//Operator definitions must be in global scope
operator addPlusOne = (a: num, b: num) -> num {
    return a + b + 1;
}
customBinaryOperators = () {

    //Note that custom binary operators have the highest precedence
    result = 5 * 3 addPlusOne (2 - 1);
    sysout(result); //25 
}

generics = () {

    forAllHll = (a: num, b: $T) {

    }
    //TODO

}

for array {
    doStuff(...);
}

for item in array {
    doStuff(item);
}

for item, index in array {
    if index < 3 {
        doStuff(item);
    }
}

for i in range(3, 5] {

}

for i in #range (3 + x - 2, testVar.y - 3 ^ 6] {

}