/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scuft/test/7-InterpTest.scft":
/*!******************************************!*\
  !*** ./src/scuft/test/7-InterpTest.scft ***!
  \******************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"main = () {\\r\\n    x = 3;\\r\\n}\\r\\nthing = y;\\r\\ny = 5;\\r\\ndec = y;\\r\\n\\r\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC90ZXN0LzctSW50ZXJwVGVzdC5zY2Z0P2UxZDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLFlBQVksY0FBYyxLQUFLLGNBQWMsVUFBVSxZQUFZLFNBQVMiLCJmaWxlIjoiLi9zcmMvc2N1ZnQvdGVzdC83LUludGVycFRlc3Quc2NmdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwibWFpbiA9ICgpIHtcXHJcXG4gICAgeCA9IDM7XFxyXFxufVxcclxcbnRoaW5nID0geTtcXHJcXG55ID0gNTtcXHJcXG5kZWMgPSB5O1xcclxcblxcclxcblwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scuft/test/7-InterpTest.scft\n");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scuft_lang_ScuftTest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scuft/lang/ScuftTest */ \"./src/scuft/lang/ScuftTest.ts\");\n\r\n_scuft_lang_ScuftTest__WEBPACK_IMPORTED_MODULE_0__.default();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9tYWluLnRzP2NkNDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFbUQ7QUFFbkQsMERBQWlCLEVBQUUsQ0FBQyIsImZpbGUiOiIuL3NyYy9tYWluLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgKiBhcyBFQ1NEZW1vIGZyb20gXCIuL3NjdWZ0L2Vjcy9FQ1NEZW1vXCJcclxuXHJcbmltcG9ydCAqIGFzIFNjdWZ0VGVzdCBmcm9tIFwiLi9zY3VmdC9sYW5nL1NjdWZ0VGVzdFwiXHJcblxyXG5TY3VmdFRlc3QuZGVmYXVsdCgpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Ast.ts":
/*!*******************************!*\
  !*** ./src/scuft/lang/Ast.ts ***!
  \*******************************/
/*! namespace exports */
/*! export ASTAccessCast [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTBinaryOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTBlock [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTBreak [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTCall [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTContinue [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTDeclaration [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTDotOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFmt [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFor [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFunction [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFunctionType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTIf [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTLiteral [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTModule [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTName [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTNode [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTOperatorDefinition [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTOverloadedFunctionType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTProgram [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTReturn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeConstruction [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeDefinition [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeLiteral [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTUnaryOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTWhile [provided] [no usage info] [missing usage info prevents renaming] */
/*! export NodeType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export exprToStr [provided] [no usage info] [missing usage info prevents renaming] */
/*! export printAST [provided] [no usage info] [missing usage info prevents renaming] */
/*! export recurse [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ASTFmt\": () => /* binding */ ASTFmt,\n/* harmony export */   \"exprToStr\": () => /* binding */ exprToStr,\n/* harmony export */   \"recurse\": () => /* binding */ recurse,\n/* harmony export */   \"printAST\": () => /* binding */ printAST,\n/* harmony export */   \"NodeType\": () => /* binding */ NodeType,\n/* harmony export */   \"ASTNode\": () => /* binding */ ASTNode,\n/* harmony export */   \"ASTProgram\": () => /* binding */ ASTProgram,\n/* harmony export */   \"ASTBlock\": () => /* binding */ ASTBlock,\n/* harmony export */   \"ASTIf\": () => /* binding */ ASTIf,\n/* harmony export */   \"ASTWhile\": () => /* binding */ ASTWhile,\n/* harmony export */   \"ASTFor\": () => /* binding */ ASTFor,\n/* harmony export */   \"ASTBreak\": () => /* binding */ ASTBreak,\n/* harmony export */   \"ASTContinue\": () => /* binding */ ASTContinue,\n/* harmony export */   \"ASTReturn\": () => /* binding */ ASTReturn,\n/* harmony export */   \"ASTOperatorDefinition\": () => /* binding */ ASTOperatorDefinition,\n/* harmony export */   \"ASTDeclaration\": () => /* binding */ ASTDeclaration,\n/* harmony export */   \"ASTAccessCast\": () => /* binding */ ASTAccessCast,\n/* harmony export */   \"ASTTypeLiteral\": () => /* binding */ ASTTypeLiteral,\n/* harmony export */   \"ASTFunctionType\": () => /* binding */ ASTFunctionType,\n/* harmony export */   \"ASTOverloadedFunctionType\": () => /* binding */ ASTOverloadedFunctionType,\n/* harmony export */   \"ASTModule\": () => /* binding */ ASTModule,\n/* harmony export */   \"ASTTypeDefinition\": () => /* binding */ ASTTypeDefinition,\n/* harmony export */   \"ASTFunction\": () => /* binding */ ASTFunction,\n/* harmony export */   \"ASTName\": () => /* binding */ ASTName,\n/* harmony export */   \"ASTDotOperator\": () => /* binding */ ASTDotOperator,\n/* harmony export */   \"ASTCall\": () => /* binding */ ASTCall,\n/* harmony export */   \"ASTTypeConstruction\": () => /* binding */ ASTTypeConstruction,\n/* harmony export */   \"ASTLiteral\": () => /* binding */ ASTLiteral,\n/* harmony export */   \"ASTUnaryOperator\": () => /* binding */ ASTUnaryOperator,\n/* harmony export */   \"ASTBinaryOperator\": () => /* binding */ ASTBinaryOperator\n/* harmony export */ });\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n/* harmony import */ var _Log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Log */ \"./src/scuft/lang/Log.ts\");\n/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Scope */ \"./src/scuft/lang/Scope.ts\");\n\r\n\r\n\r\nvar ASTFmt;\r\n(function (ASTFmt) {\r\n    ASTFmt[\"TYPE_FMT\"] = \"color: #DE8F6E\";\r\n    ASTFmt[\"IDENTIFIER_FMT\"] = \"color: #2D93AD\";\r\n    ASTFmt[\"EXPRESSION_FMT\"] = \"color: #88AB75\";\r\n    ASTFmt[\"WITH_MODULE_FMT\"] = \"color: #DBD56E\";\r\n})(ASTFmt || (ASTFmt = {}));\r\nfunction nodeNameToStr(astNode, fmt) {\r\n    return (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(astNode.constructor.name + \" (\" + astNode.locToken.line + \":\" + astNode.locToken.c + \")\", fmt);\r\n}\r\nfunction list(astNodes, fmt) {\r\n    let lines = [];\r\n    for (let i = 0; i < astNodes.length; i++) {\r\n        lines.push(\" \" + i + \": \" + nodeNameToStr(astNodes[i], fmt));\r\n        (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.bar)(recurse(astNodes[i], fmt)));\r\n    }\r\n    return lines;\r\n}\r\nfunction exprToStr(astExpr) {\r\n    switch (astExpr.nodeName) {\r\n        case NodeType.ACCESS_CAST:\r\n            let accessCast = astExpr;\r\n            return (0,_Token__WEBPACK_IMPORTED_MODULE_0__.tokenToStr)(accessCast.accessType) + \" \" + exprToStr(accessCast.castedType);\r\n        case NodeType.TYPE_LITERAL:\r\n            return (0,_Token__WEBPACK_IMPORTED_MODULE_0__.tokenToStr)(astExpr.type);\r\n        case NodeType.FUNCTION_TYPE:\r\n            let astType = astExpr;\r\n            let outFuncType = \"(\";\r\n            for (let i = 0; i < astType.inputType.length; i++) {\r\n                outFuncType += exprToStr(astType.inputType[i]);\r\n                if (i + 1 < astType.inputType.length) {\r\n                    outFuncType += \", \";\r\n                }\r\n            }\r\n            outFuncType += \") -> \" + exprToStr(astType.outType);\r\n            return outFuncType;\r\n        case NodeType.MODULE:\r\n            return \"module {...}\";\r\n        case NodeType.TYPE_DEF:\r\n            return exprToStr(astExpr.typeDecRef.lvalue);\r\n        case NodeType.FUNCTION:\r\n            let astFunc = astExpr;\r\n            let outFunc = \"((\";\r\n            for (let i = 0; i < astFunc.paramDeclaration.length; i++) {\r\n                if (astFunc.paramDeclaration[i].rvalue) {\r\n                    outFunc +=\r\n                        exprToStr(astFunc.paramDeclaration[i].lvalue) +\r\n                            \" ~= \" +\r\n                            exprToStr(astFunc.paramDeclaration[i].rvalue);\r\n                }\r\n                else {\r\n                    outFunc +=\r\n                        exprToStr(astFunc.paramDeclaration[i].lvalue) +\r\n                            \" : \" +\r\n                            exprToStr(astFunc.paramDeclaration[i].type);\r\n                }\r\n                if (i + 1 < astFunc.paramDeclaration.length) {\r\n                    outFunc += \", \";\r\n                }\r\n            }\r\n            outFunc += \")\";\r\n            if (astFunc.returnType)\r\n                outFunc += \" -> \" + exprToStr(astFunc.returnType);\r\n            return outFunc + \"{...})\";\r\n        case NodeType.NAME:\r\n            return astExpr.refName + \"\";\r\n        case NodeType.DOT_OP:\r\n            let astDotOp = astExpr;\r\n            return \"(\" + exprToStr(astDotOp.rootValue) + \".\" + exprToStr(astDotOp.memberValue) + \")\";\r\n        case NodeType.CALL:\r\n            let astCall = astExpr;\r\n            let callVal = exprToStr(astCall.functionNameRef) + \"(\";\r\n            for (let i = 0; i < astCall.givenParams.length; i++) {\r\n                callVal += exprToStr(astCall.givenParams[i]);\r\n                if (i + 1 < astCall.givenParams.length) {\r\n                    callVal += \", \";\r\n                }\r\n            }\r\n            return callVal + \")\";\r\n        case NodeType.TYPE_CONSTRUCT:\r\n            let astConstruction = astExpr;\r\n            let constructVal = \"\";\r\n            for (let i = 0; i < astConstruction.assignments.length; i++) {\r\n                constructVal +=\r\n                    exprToStr(astConstruction.assignments[i].lvalue) +\r\n                        \" <- \" +\r\n                        exprToStr(astConstruction.assignments[i].rvalue);\r\n                if (i + 1 < astConstruction.assignments.length) {\r\n                    constructVal += \", \";\r\n                }\r\n            }\r\n            return exprToStr(astConstruction.typeRef) + \".{\" + constructVal + \"}\";\r\n        case NodeType.LITERAL:\r\n            return astExpr.value.stringValue + \"\";\r\n        case NodeType.UNARY_OP:\r\n            return (astExpr.operation.stringValue +\r\n                \"(\" +\r\n                exprToStr(astExpr.value) +\r\n                \")\");\r\n        case NodeType.BINARY_OP:\r\n            let astBinOp = astExpr;\r\n            return (\"(\" +\r\n                exprToStr(astBinOp.lvalue) +\r\n                \" \" +\r\n                astBinOp.operation.stringValue +\r\n                \" \" +\r\n                exprToStr(astBinOp.rvalue) +\r\n                \")\");\r\n        default:\r\n            throw (\"Can't recursively print expression because given node is not an AST expression: \" +\r\n                astExpr.constructor.name);\r\n    }\r\n}\r\nfunction recurse(astNode, fmt) {\r\n    switch (astNode.nodeName) {\r\n        case NodeType.PROGRAM:\r\n            let linesPrgm = [];\r\n            let astPrgm = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesPrgm, [\"operatorDefinitions:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesPrgm, [\"withModules: \"]);\r\n            let withModInPrgm = [];\r\n            for (let i = 0; i < astPrgm.withModules.length; i++) {\r\n                withModInPrgm.push((0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astPrgm.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesPrgm, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(4, withModInPrgm));\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesPrgm, [\"declarations:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesPrgm, list(astPrgm.declarations, fmt));\r\n            return linesPrgm;\r\n        case NodeType.BLOCK:\r\n            let linesBlock = [];\r\n            let astBlock = astNode;\r\n            if (astBlock.withModules) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesBlock, [\"withModules: \"]);\r\n                let withModules = [];\r\n                for (let i = 0; i < astBlock.withModules.length; i++) {\r\n                    withModules.push((0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astBlock.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n                }\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesBlock, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(4, withModules));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesBlock, [\"statements:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesBlock, list(astBlock.statements, fmt));\r\n            return linesBlock;\r\n        case NodeType.IF:\r\n            let linesIf = [];\r\n            let astIf = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, [\"condition: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astIf.condition), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, [\"consequence: \" + nodeNameToStr(astIf.consequence, fmt)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(9, recurse(astIf.consequence, fmt))));\r\n            if (astIf.alternative) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, [\"alternative: \" + nodeNameToStr(astIf.alternative, fmt)]);\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(9, recurse(astIf.alternative, fmt))));\r\n            }\r\n            return linesIf;\r\n        case NodeType.WHILE:\r\n            let linesWhile = [];\r\n            let astWhile = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesWhile, [\"condition: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astWhile.condition), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesWhile, [\"block: \" + nodeNameToStr(astWhile.block, fmt)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesWhile, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, recurse(astWhile.block, fmt))));\r\n            return linesWhile;\r\n        case NodeType.FOR:\r\n            let linesFor = [];\r\n            let astFor = astNode;\r\n            if (astFor.itemParamDec) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\r\n                    \"itemParamDec:  \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFor.itemParamDec.lvalue), fmt, ASTFmt.IDENTIFIER_FMT),\r\n                ]);\r\n            }\r\n            if (astFor.indexParamDec) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\r\n                    \"indexParamDec: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFor.indexParamDec.lvalue), fmt, ASTFmt.IDENTIFIER_FMT),\r\n                ]);\r\n            }\r\n            if (astFor.iterableName) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\r\n                    \"iterableName:  \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFor.iterableName), fmt, ASTFmt.EXPRESSION_FMT),\r\n                ]);\r\n            }\r\n            if (astFor.lowerBound !== undefined) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\r\n                    \"bounds: \" +\r\n                        (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFor.lowerBound) + \"...\" + exprToStr(astFor.upperBound), fmt, ASTFmt.EXPRESSION_FMT),\r\n                ]);\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\"block: \" + nodeNameToStr(astFor.block, fmt)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, recurse(astFor.block, fmt))));\r\n            return linesFor;\r\n        case NodeType.BREAK:\r\n            return [\"break\"];\r\n        case NodeType.CONTINUE:\r\n            return [\"continue\"];\r\n        case NodeType.RETURN:\r\n            let astRet = astNode;\r\n            if (astRet.returnValue) {\r\n                return [\"returnValue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astRet.returnValue), fmt, ASTFmt.EXPRESSION_FMT)];\r\n            }\r\n            return [];\r\n        case NodeType.OPERATOR_DEF:\r\n            let linesOpDef = [];\r\n            let astOpDef = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesOpDef, [\"operatorName: \" + astOpDef.operatorName.stringValue]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesOpDef, [\"functionOverload: \" + nodeNameToStr(astOpDef.functionOverload, fmt)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesOpDef, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(14, recurse(astOpDef.functionOverload, fmt))));\r\n            return linesOpDef;\r\n        case NodeType.DECLARATION:\r\n            let linesDec = [];\r\n            let astDec = astNode;\r\n            if (astDec.isAssignment) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"lvalue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astDec.lvalue), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n            }\r\n            else {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"lvalue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astDec.lvalue), fmt, ASTFmt.IDENTIFIER_FMT)]);\r\n            }\r\n            if (astDec.type && (astDec.type.nodeName !== NodeType.TYPE_LITERAL || astDec.type.type)) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"type:   \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astDec.type), fmt, ASTFmt.TYPE_FMT)]);\r\n            }\r\n            if (astDec.rvalue) {\r\n                if ((astDec.rvalue.nodeName === NodeType.TYPE_DEF ||\r\n                    astDec.rvalue.nodeName === NodeType.MODULE ||\r\n                    astDec.rvalue.nodeName === NodeType.FUNCTION) &&\r\n                    !(astDec.rvalue.nodeName === NodeType.TYPE_DEF &&\r\n                        astDec.inScope.getEnclosingScope(_Scope__WEBPACK_IMPORTED_MODULE_2__.ScopeType.TYPE_SCOPE))) {\r\n                    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"rvalue: \" + nodeNameToStr(astDec.rvalue, fmt)]);\r\n                    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(4, recurse(astDec.rvalue, fmt))));\r\n                }\r\n                else {\r\n                    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"rvalue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astDec.rvalue), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n                }\r\n            }\r\n            return linesDec;\r\n        case NodeType.MODULE:\r\n            let linesMod = [];\r\n            let astMod = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesMod, [\"withModules: \"]);\r\n            let withModInMod = [];\r\n            for (let i = 0; i < astMod.withModules.length; i++) {\r\n                withModInMod.push((0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astMod.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesMod, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(4, withModInMod));\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesMod, [\"declarations:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesMod, list(astMod.declarations, fmt));\r\n            return linesMod;\r\n        case NodeType.TYPE_DEF:\r\n            let linesTypeDef = [];\r\n            let astTypeDef = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesTypeDef, [\"withModules: \"]);\r\n            let withModInType = [];\r\n            for (let i = 0; i < astTypeDef.withModules.length; i++) {\r\n                withModInType.push((0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astTypeDef.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesTypeDef, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(4, withModInType));\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesTypeDef, [\"declarations:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesTypeDef, list(astTypeDef.declarations, fmt));\r\n            return linesTypeDef;\r\n        case NodeType.FUNCTION:\r\n            let linesFunc = [];\r\n            let astFunc = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, [\"paramDeclaration:\"]);\r\n            if (astFunc.paramDeclaration) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, list(astFunc.paramDeclaration, fmt));\r\n            }\r\n            if (astFunc.returnType) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, [\"returnType: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFunc.returnType), fmt, ASTFmt.TYPE_FMT)]);\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, [\"block: \" + nodeNameToStr(astFunc.block, fmt)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, recurse(astFunc.block, fmt))));\r\n            return linesFunc;\r\n        case NodeType.ACCESS_CAST:\r\n        case NodeType.TYPE_LITERAL:\r\n        case NodeType.FUNCTION_TYPE:\r\n        case NodeType.NAME:\r\n        case NodeType.DOT_OP:\r\n        case NodeType.CALL:\r\n        case NodeType.TYPE_CONSTRUCT:\r\n        case NodeType.LITERAL:\r\n        case NodeType.UNARY_OP:\r\n        case NodeType.BINARY_OP:\r\n            return [(0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astNode), fmt, ASTFmt.EXPRESSION_FMT)];\r\n        default:\r\n            throw \"Can't recursively print tree because given node is not an AST node: \" + astNode.constructor.name;\r\n    }\r\n}\r\nfunction printAST(astNode) {\r\n    let fmt = [];\r\n    let outA = [];\r\n    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(outA, [nodeNameToStr(astNode, fmt)]);\r\n    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(outA, recurse(astNode, fmt));\r\n    let str = [outA.join(\"\\n\")];\r\n    for (let i = 0; i < fmt.length; i++) {\r\n        str.push(fmt[i]);\r\n    }\r\n    console.log.apply(printAST, str);\r\n}\r\nvar NodeType;\r\n(function (NodeType) {\r\n    NodeType[NodeType[\"PROGRAM\"] = 0] = \"PROGRAM\";\r\n    NodeType[NodeType[\"BLOCK\"] = 1] = \"BLOCK\";\r\n    NodeType[NodeType[\"IF\"] = 2] = \"IF\";\r\n    NodeType[NodeType[\"WHILE\"] = 3] = \"WHILE\";\r\n    NodeType[NodeType[\"FOR\"] = 4] = \"FOR\";\r\n    NodeType[NodeType[\"BREAK\"] = 5] = \"BREAK\";\r\n    NodeType[NodeType[\"CONTINUE\"] = 6] = \"CONTINUE\";\r\n    NodeType[NodeType[\"RETURN\"] = 7] = \"RETURN\";\r\n    NodeType[NodeType[\"OPERATOR_DEF\"] = 8] = \"OPERATOR_DEF\";\r\n    NodeType[NodeType[\"DECLARATION\"] = 9] = \"DECLARATION\";\r\n    NodeType[NodeType[\"ACCESS_CAST\"] = 10] = \"ACCESS_CAST\";\r\n    NodeType[NodeType[\"TYPE_LITERAL\"] = 11] = \"TYPE_LITERAL\";\r\n    NodeType[NodeType[\"FUNCTION_TYPE\"] = 12] = \"FUNCTION_TYPE\";\r\n    NodeType[NodeType[\"OVERLOAD_FUNC_TYPE\"] = 13] = \"OVERLOAD_FUNC_TYPE\";\r\n    NodeType[NodeType[\"MODULE\"] = 14] = \"MODULE\";\r\n    NodeType[NodeType[\"TYPE_DEF\"] = 15] = \"TYPE_DEF\";\r\n    NodeType[NodeType[\"FUNCTION\"] = 16] = \"FUNCTION\";\r\n    NodeType[NodeType[\"NAME\"] = 17] = \"NAME\";\r\n    NodeType[NodeType[\"DOT_OP\"] = 18] = \"DOT_OP\";\r\n    NodeType[NodeType[\"CALL\"] = 19] = \"CALL\";\r\n    NodeType[NodeType[\"TYPE_CONSTRUCT\"] = 20] = \"TYPE_CONSTRUCT\";\r\n    NodeType[NodeType[\"LITERAL\"] = 21] = \"LITERAL\";\r\n    NodeType[NodeType[\"UNARY_OP\"] = 22] = \"UNARY_OP\";\r\n    NodeType[NodeType[\"BINARY_OP\"] = 23] = \"BINARY_OP\";\r\n})(NodeType || (NodeType = {}));\r\nclass ASTNode {\r\n    constructor(locToken) {\r\n        this.locToken = locToken;\r\n    }\r\n}\r\nclass ASTProgram extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.PROGRAM;\r\n    }\r\n}\r\nclass ASTBlock extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.BLOCK;\r\n        this.hasJump = false;\r\n        this.hasReturn = false;\r\n    }\r\n}\r\nclass ASTIf extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.IF;\r\n        this.hasJump = false;\r\n        this.hasReturn = false;\r\n    }\r\n}\r\nclass ASTWhile extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.WHILE;\r\n    }\r\n}\r\nclass ASTFor extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.FOR;\r\n    }\r\n}\r\nclass ASTBreak extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.BREAK;\r\n    }\r\n}\r\nclass ASTContinue extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.CONTINUE;\r\n    }\r\n}\r\nclass ASTReturn extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.RETURN;\r\n    }\r\n}\r\nclass ASTOperatorDefinition extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.OPERATOR_DEF;\r\n    }\r\n}\r\nclass ASTDeclaration extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.DECLARATION;\r\n        this.hasTypeChecked = false;\r\n        this.isAssignment = false;\r\n    }\r\n}\r\nclass ASTAccessCast extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.ACCESS_CAST;\r\n    }\r\n}\r\nclass ASTTypeLiteral extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.TYPE_LITERAL;\r\n    }\r\n}\r\nclass ASTFunctionType extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.FUNCTION_TYPE;\r\n    }\r\n}\r\nclass ASTOverloadedFunctionType extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.OVERLOAD_FUNC_TYPE;\r\n    }\r\n}\r\nclass ASTModule extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.MODULE;\r\n    }\r\n}\r\nclass ASTTypeDefinition extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.TYPE_DEF;\r\n    }\r\n}\r\nclass ASTFunction extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.FUNCTION;\r\n    }\r\n}\r\nclass ASTName extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.NAME;\r\n    }\r\n}\r\nclass ASTDotOperator extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.DOT_OP;\r\n    }\r\n}\r\nclass ASTCall extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.CALL;\r\n    }\r\n}\r\nclass ASTTypeConstruction extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.TYPE_CONSTRUCT;\r\n    }\r\n}\r\nclass ASTLiteral extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.LITERAL;\r\n    }\r\n}\r\nclass ASTUnaryOperator extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.UNARY_OP;\r\n    }\r\n}\r\nclass ASTBinaryOperator extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.BINARY_OP;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL0FzdC50cz84ZjMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1RDtBQUNFO0FBQ2Q7QUFXM0MsSUFBWSxNQU1YO0FBTkQsV0FBWSxNQUFNO0lBQ2QscUNBQTJCO0lBQzNCLDJDQUFpQztJQUNqQywyQ0FBaUM7SUFFakMsNENBQWtDO0FBQ3RDLENBQUMsRUFOVyxNQUFNLEtBQU4sTUFBTSxRQU1qQjtBQUVELFNBQVMsYUFBYSxDQUFDLE9BQWdCLEVBQUUsR0FBYTtJQUNsRCxPQUFPLDhDQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbkgsQ0FBQztBQUVELFNBQVMsSUFBSSxDQUFDLFFBQW1CLEVBQUUsR0FBYTtJQUM1QyxJQUFJLEtBQUssR0FBYSxFQUFFLENBQUM7SUFDekIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdEMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFN0QsMkNBQUssQ0FBQyxLQUFLLEVBQUUseUNBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNoRDtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFTSxTQUFTLFNBQVMsQ0FBQyxPQUFzQjtJQUM1QyxRQUFR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QWlCLFNBQVEsT0FBTztJQUE3Qzs7UUFDSSxhQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQU1qQyxDQUFDO0NBQUE7QUFFTSxNQUFNLGlCQUFrQixTQUFRLE9BQU87SUFBOUM7O1FBQ0ksYUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFPbEMsQ0FBQztDQUFBIiwiZmlsZSI6Ii4vc3JjL3NjdWZ0L2xhbmcvQXN0LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9rZW4sIHRva2VuVG9TdHIsIFRva2VuVHlwZSB9IGZyb20gXCIuL1Rva2VuXCI7XHJcbmltcG9ydCB7IGFwcGx5Rm10LCBtZXJnZSwgc3BhY2UsIHRhYiwgYmFyIH0gZnJvbSBcIi4vTG9nXCI7XHJcbmltcG9ydCB7IFNjb3BlLCBTY29wZVR5cGUgfSBmcm9tIFwiLi9TY29wZVwiO1xyXG5cclxuLy8gZXhwb3J0IGVudW0gQVNURm10IHtcclxuLy8gICAgIE5PREVfRk1UID0gXCJjb2xvcjogI0M3OTJERVwiLFxyXG4vLyAgICAgVFlQRV9GTVQgPSBcImNvbG9yOiAjRkZFQjk1XCIsXHJcbi8vICAgICBJREVOVElGSUVSX0ZNVCA9IFwiY29sb3I6ICMzNDhERkZcIixcclxuLy8gICAgIEVYUFJFU1NJT05fRk1UID0gXCJjb2xvcjogI0U5OEM2Q1wiLFxyXG4vLyAgICAgRlVOQ1RJT05fQ0FMTF9GTVQgPSBcImNvbG9yOiAjQUQyODM2XCIsXHJcbi8vICAgICBXSVRIX01PRFVMRV9GTVQgPSBcImNvbG9yOiAjMjU5RjgwXCIsXHJcbi8vIH1cclxuXHJcbmV4cG9ydCBlbnVtIEFTVEZtdCB7XHJcbiAgICBUWVBFX0ZNVCA9IFwiY29sb3I6ICNERThGNkVcIixcclxuICAgIElERU5USUZJRVJfRk1UID0gXCJjb2xvcjogIzJEOTNBRFwiLFxyXG4gICAgRVhQUkVTU0lPTl9GTVQgPSBcImNvbG9yOiAjODhBQjc1XCIsXHJcblxyXG4gICAgV0lUSF9NT0RVTEVfRk1UID0gXCJjb2xvcjogI0RCRDU2RVwiLFxyXG59XHJcblxyXG5mdW5jdGlvbiBub2RlTmFtZVRvU3RyKGFzdE5vZGU6IEFTVE5vZGUsIGZtdDogc3RyaW5nW10pOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGFwcGx5Rm10KGFzdE5vZGUuY29uc3RydWN0b3IubmFtZSArIFwiIChcIiArIGFzdE5vZGUubG9jVG9rZW4ubGluZSArIFwiOlwiICsgYXN0Tm9kZS5sb2NUb2tlbi5jICsgXCIpXCIsIGZtdCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxpc3QoYXN0Tm9kZXM6IEFTVE5vZGVbXSwgZm10OiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGxldCBsaW5lczogc3RyaW5nW10gPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXN0Tm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsaW5lcy5wdXNoKFwiIFwiICsgaSArIFwiOiBcIiArIG5vZGVOYW1lVG9TdHIoYXN0Tm9kZXNbaV0sIGZtdCkpO1xyXG5cclxuICAgICAgICBtZXJnZShsaW5lcywgYmFyKHJlY3Vyc2UoYXN0Tm9kZXNbaV0sIGZtdCkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsaW5lcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4cHJUb1N0cihhc3RFeHByOiBBU1RFeHByZXNzaW9uKTogc3RyaW5nIHtcclxuICAgIHN3aXRjaCAoYXN0RXhwci5ub2RlTmFtZSkge1xyXG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQUNDRVNTX0NBU1Q6XHJcbiAgICAgICAgICAgIGxldCBhY2Nlc3NDYXN0ID0gPEFTVEFjY2Vzc0Nhc3Q+YXN0RXhwcjtcclxuICAgICAgICAgICAgcmV0dXJuIHRva2VuVG9TdHIoYWNjZXNzQ2FzdC5hY2Nlc3NUeXBlKSArIFwiIFwiICsgZXhwclRvU3RyKGFjY2Vzc0Nhc3QuY2FzdGVkVHlwZSk7XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5UWVBFX0xJVEVSQUw6XHJcbiAgICAgICAgICAgIHJldHVybiB0b2tlblRvU3RyKCg8QVNUVHlwZUxpdGVyYWw+YXN0RXhwcikudHlwZSk7XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5GVU5DVElPTl9UWVBFOlxyXG4gICAgICAgICAgICBsZXQgYXN0VHlwZSA9IDxBU1RGdW5jdGlvblR5cGU+YXN0RXhwcjtcclxuICAgICAgICAgICAgbGV0IG91dEZ1bmNUeXBlID0gXCIoXCI7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXN0VHlwZS5pbnB1dFR5cGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG91dEZ1bmNUeXBlICs9IGV4cHJUb1N0cihhc3RUeXBlLmlucHV0VHlwZVtpXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPCBhc3RUeXBlLmlucHV0VHlwZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRGdW5jVHlwZSArPSBcIiwgXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3V0RnVuY1R5cGUgKz0gXCIpIC0+IFwiICsgZXhwclRvU3RyKGFzdFR5cGUub3V0VHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRGdW5jVHlwZTtcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLk1PRFVMRTpcclxuICAgICAgICAgICAgcmV0dXJuIFwibW9kdWxlIHsuLi59XCI7XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5UWVBFX0RFRjpcclxuICAgICAgICAgICAgcmV0dXJuIGV4cHJUb1N0cigoPEFTVFR5cGVEZWZpbml0aW9uPmFzdEV4cHIpLnR5cGVEZWNSZWYubHZhbHVlKTtcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLkZVTkNUSU9OOlxyXG4gICAgICAgICAgICBsZXQgYXN0RnVuYyA9IDxBU1RGdW5jdGlvbj5hc3RFeHByO1xyXG4gICAgICAgICAgICBsZXQgb3V0RnVuYyA9IFwiKChcIjtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc3RGdW5jLnBhcmFtRGVjbGFyYXRpb24ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChhc3RGdW5jLnBhcmFtRGVjbGFyYXRpb25baV0ucnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0RnVuYyArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHByVG9TdHIoYXN0RnVuYy5wYXJhbURlY2xhcmF0aW9uW2ldLmx2YWx1ZSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiB+PSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJUb1N0cihhc3RGdW5jLnBhcmFtRGVjbGFyYXRpb25baV0ucnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0RnVuYyArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHByVG9TdHIoYXN0RnVuYy5wYXJhbURlY2xhcmF0aW9uW2ldLmx2YWx1ZSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiA6IFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwclRvU3RyKGFzdEZ1bmMucGFyYW1EZWNsYXJhdGlvbltpXS50eXBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpICsgMSA8IGFzdEZ1bmMucGFyYW1EZWNsYXJhdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRGdW5jICs9IFwiLCBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRGdW5jICs9IFwiKVwiO1xyXG4gICAgICAgICAgICBpZiAoYXN0RnVuYy5yZXR1cm5UeXBlKSBvdXRGdW5jICs9IFwiIC0+IFwiICsgZXhwclRvU3RyKGFzdEZ1bmMucmV0dXJuVHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRGdW5jICsgXCJ7Li4ufSlcIjtcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLk5BTUU6XHJcbiAgICAgICAgICAgIHJldHVybiAoPEFTVE5hbWU+YXN0RXhwcikucmVmTmFtZSArIFwiXCI7XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5ET1RfT1A6XHJcbiAgICAgICAgICAgIGxldCBhc3REb3RPcCA9IDxBU1REb3RPcGVyYXRvcj5hc3RFeHByO1xyXG4gICAgICAgICAgICByZXR1cm4gXCIoXCIgKyBleHByVG9TdHIoYXN0RG90T3Aucm9vdFZhbHVlKSArIFwiLlwiICsgZXhwclRvU3RyKGFzdERvdE9wLm1lbWJlclZhbHVlKSArIFwiKVwiO1xyXG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQ0FMTDpcclxuICAgICAgICAgICAgbGV0IGFzdENhbGwgPSA8QVNUQ2FsbD5hc3RFeHByO1xyXG4gICAgICAgICAgICBsZXQgY2FsbFZhbCA9IGV4cHJUb1N0cihhc3RDYWxsLmZ1bmN0aW9uTmFtZVJlZikgKyBcIihcIjtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc3RDYWxsLmdpdmVuUGFyYW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsVmFsICs9IGV4cHJUb1N0cihhc3RDYWxsLmdpdmVuUGFyYW1zW2ldKTtcclxuICAgICAgICAgICAgICAgIGlmIChpICsgMSA8IGFzdENhbGwuZ2l2ZW5QYXJhbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbFZhbCArPSBcIiwgXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxWYWwgKyBcIilcIjtcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLlRZUEVfQ09OU1RSVUNUOlxyXG4gICAgICAgICAgICBsZXQgYXN0Q29uc3RydWN0aW9uID0gPEFTVFR5cGVDb25zdHJ1Y3Rpb24+YXN0RXhwcjtcclxuICAgICAgICAgICAgbGV0IGNvbnN0cnVjdFZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXN0Q29uc3RydWN0aW9uLmFzc2lnbm1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RWYWwgKz1cclxuICAgICAgICAgICAgICAgICAgICBleHByVG9TdHIoYXN0Q29uc3RydWN0aW9uLmFzc2lnbm1lbnRzW2ldLmx2YWx1ZSkgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiIDwtIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBleHByVG9TdHIoPEFTVEV4cHJlc3Npb24+YXN0Q29uc3RydWN0aW9uLmFzc2lnbm1lbnRzW2ldLnJ2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPCBhc3RDb25zdHJ1Y3Rpb24uYXNzaWdubWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0VmFsICs9IFwiLCBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZXhwclRvU3RyKGFzdENvbnN0cnVjdGlvbi50eXBlUmVmKSArIFwiLntcIiArIGNvbnN0cnVjdFZhbCArIFwifVwiO1xyXG4gICAgICAgIGNhc2UgTm9kZVR5cGUuTElURVJBTDpcclxuICAgICAgICAgICAgcmV0dXJuICg8QVNUTGl0ZXJhbD5hc3RFeHByKS52YWx1ZS5zdHJpbmdWYWx1ZSArIFwiXCI7XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5VTkFSWV9PUDpcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICg8QVNUVW5hcnlPcGVyYXRvcj5hc3RFeHByKS5vcGVyYXRpb24uc3RyaW5nVmFsdWUgK1xyXG4gICAgICAgICAgICAgICAgXCIoXCIgK1xyXG4gICAgICAgICAgICAgICAgZXhwclRvU3RyKCg8QVNUVW5hcnlPcGVyYXRvcj5hc3RFeHByKS52YWx1ZSkgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLkJJTkFSWV9PUDpcclxuICAgICAgICAgICAgbGV0IGFzdEJpbk9wID0gPEFTVEJpbmFyeU9wZXJhdG9yPmFzdEV4cHI7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBcIihcIiArXHJcbiAgICAgICAgICAgICAgICBleHByVG9TdHIoYXN0QmluT3AubHZhbHVlKSArXHJcbiAgICAgICAgICAgICAgICBcIiBcIiArXHJcbiAgICAgICAgICAgICAgICBhc3RCaW5PcC5vcGVyYXRpb24uc3RyaW5nVmFsdWUgK1xyXG4gICAgICAgICAgICAgICAgXCIgXCIgK1xyXG4gICAgICAgICAgICAgICAgZXhwclRvU3RyKGFzdEJpbk9wLnJ2YWx1ZSkgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyAoXHJcbiAgICAgICAgICAgICAgICBcIkNhbid0IHJlY3Vyc2l2ZWx5IHByaW50IGV4cHJlc3Npb24gYmVjYXVzZSBnaXZlbiBub2RlIGlzIG5vdCBhbiBBU1QgZXhwcmVzc2lvbjogXCIgK1xyXG4gICAgICAgICAgICAgICAgYXN0RXhwci5jb25zdHJ1Y3Rvci5uYW1lXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNlKGFzdE5vZGU6IEFTVE5vZGUsIGZtdDogc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcbiAgICBzd2l0Y2ggKGFzdE5vZGUubm9kZU5hbWUpIHtcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLlBST0dSQU06XHJcbiAgICAgICAgICAgIGxldCBsaW5lc1ByZ206IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGxldCBhc3RQcmdtID0gPEFTVFByb2dyYW0+YXN0Tm9kZTtcclxuICAgICAgICAgICAgbWVyZ2UobGluZXNQcmdtLCBbXCJvcGVyYXRvckRlZmluaXRpb25zOlwiXSk7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzUHJnbSwgW1wid2l0aE1vZHVsZXM6IFwiXSk7XHJcbiAgICAgICAgICAgIGxldCB3aXRoTW9kSW5QcmdtID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXN0UHJnbS53aXRoTW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgd2l0aE1vZEluUHJnbS5wdXNoKGFwcGx5Rm10KGV4cHJUb1N0cihhc3RQcmdtLndpdGhNb2R1bGVzW2ldKSwgZm10LCBBU1RGbXQuV0lUSF9NT0RVTEVfRk1UKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWVyZ2UobGluZXNQcmdtLCBzcGFjZSg0LCB3aXRoTW9kSW5QcmdtKSk7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzUHJnbSwgW1wiZGVjbGFyYXRpb25zOlwiXSk7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzUHJnbSwgbGlzdChhc3RQcmdtLmRlY2xhcmF0aW9ucywgZm10KSk7XHJcbiAgICAgICAgICAgIHJldHVybiBsaW5lc1ByZ207XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5CTE9DSzpcclxuICAgICAgICAgICAgbGV0IGxpbmVzQmxvY2s6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGxldCBhc3RCbG9jayA9IDxBU1RCbG9jaz5hc3ROb2RlO1xyXG4gICAgICAgICAgICBpZiAoYXN0QmxvY2sud2l0aE1vZHVsZXMpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlKGxpbmVzQmxvY2ssIFtcIndpdGhNb2R1bGVzOiBcIl0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IHdpdGhNb2R1bGVzID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFzdEJsb2NrLndpdGhNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2l0aE1vZHVsZXMucHVzaChhcHBseUZtdChleHByVG9TdHIoYXN0QmxvY2sud2l0aE1vZHVsZXNbaV0pLCBmbXQsIEFTVEZtdC5XSVRIX01PRFVMRV9GTVQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1lcmdlKGxpbmVzQmxvY2ssIHNwYWNlKDQsIHdpdGhNb2R1bGVzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWVyZ2UobGluZXNCbG9jaywgW1wic3RhdGVtZW50czpcIl0pO1xyXG4gICAgICAgICAgICBtZXJnZShsaW5lc0Jsb2NrLCBsaXN0KGFzdEJsb2NrLnN0YXRlbWVudHMsIGZtdCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbGluZXNCbG9jaztcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLklGOlxyXG4gICAgICAgICAgICBsZXQgbGluZXNJZjogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICAgICAgbGV0IGFzdElmID0gPEFTVElmPmFzdE5vZGU7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzSWYsIFtcImNvbmRpdGlvbjogXCIgKyBhcHBseUZtdChleHByVG9TdHIoYXN0SWYuY29uZGl0aW9uKSwgZm10LCBBU1RGbXQuRVhQUkVTU0lPTl9GTVQpXSk7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzSWYsIFtcImNvbnNlcXVlbmNlOiBcIiArIG5vZGVOYW1lVG9TdHIoYXN0SWYuY29uc2VxdWVuY2UsIGZtdCldKTtcclxuICAgICAgICAgICAgbWVyZ2UobGluZXNJZiwgdGFiKHNwYWNlKDksIHJlY3Vyc2UoYXN0SWYuY29uc2VxdWVuY2UsIGZtdCkpKSk7XHJcbiAgICAgICAgICAgIGlmIChhc3RJZi5hbHRlcm5hdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2UobGluZXNJZiwgW1wiYWx0ZXJuYXRpdmU6IFwiICsgbm9kZU5hbWVUb1N0cihhc3RJZi5hbHRlcm5hdGl2ZSwgZm10KV0pO1xyXG4gICAgICAgICAgICAgICAgbWVyZ2UobGluZXNJZiwgdGFiKHNwYWNlKDksIHJlY3Vyc2UoYXN0SWYuYWx0ZXJuYXRpdmUsIGZtdCkpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGxpbmVzSWY7XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5XSElMRTpcclxuICAgICAgICAgICAgbGV0IGxpbmVzV2hpbGU6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGxldCBhc3RXaGlsZSA9IDxBU1RXaGlsZT5hc3ROb2RlO1xyXG4gICAgICAgICAgICBtZXJnZShsaW5lc1doaWxlLCBbXCJjb25kaXRpb246IFwiICsgYXBwbHlGbXQoZXhwclRvU3RyKGFzdFdoaWxlLmNvbmRpdGlvbiksIGZtdCwgQVNURm10LkVYUFJFU1NJT05fRk1UKV0pO1xyXG4gICAgICAgICAgICBtZXJnZShsaW5lc1doaWxlLCBbXCJibG9jazogXCIgKyBub2RlTmFtZVRvU3RyKGFzdFdoaWxlLmJsb2NrLCBmbXQpXSk7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzV2hpbGUsIHRhYihzcGFjZSgzLCByZWN1cnNlKGFzdFdoaWxlLmJsb2NrLCBmbXQpKSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbGluZXNXaGlsZTtcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLkZPUjpcclxuICAgICAgICAgICAgbGV0IGxpbmVzRm9yOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgYXN0Rm9yID0gPEFTVEZvcj5hc3ROb2RlO1xyXG4gICAgICAgICAgICBpZiAoYXN0Rm9yLml0ZW1QYXJhbURlYykge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2UobGluZXNGb3IsIFtcclxuICAgICAgICAgICAgICAgICAgICBcIml0ZW1QYXJhbURlYzogIFwiICsgYXBwbHlGbXQoZXhwclRvU3RyKGFzdEZvci5pdGVtUGFyYW1EZWMubHZhbHVlKSwgZm10LCBBU1RGbXQuSURFTlRJRklFUl9GTVQpLFxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFzdEZvci5pbmRleFBhcmFtRGVjKSB7XHJcbiAgICAgICAgICAgICAgICBtZXJnZShsaW5lc0ZvciwgW1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhQYXJhbURlYzogXCIgKyBhcHBseUZtdChleHByVG9TdHIoYXN0Rm9yLmluZGV4UGFyYW1EZWMubHZhbHVlKSwgZm10LCBBU1RGbXQuSURFTlRJRklFUl9GTVQpLFxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFzdEZvci5pdGVyYWJsZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlKGxpbmVzRm9yLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpdGVyYWJsZU5hbWU6ICBcIiArIGFwcGx5Rm10KGV4cHJUb1N0cihhc3RGb3IuaXRlcmFibGVOYW1lKSwgZm10LCBBU1RGbXQuRVhQUkVTU0lPTl9GTVQpLFxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFzdEZvci5sb3dlckJvdW5kICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlKGxpbmVzRm9yLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJib3VuZHM6IFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlGbXQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByVG9TdHIoYXN0Rm9yLmxvd2VyQm91bmQpICsgXCIuLi5cIiArIGV4cHJUb1N0cihhc3RGb3IudXBwZXJCb3VuZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBU1RGbXQuRVhQUkVTU0lPTl9GTVRcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzRm9yLCBbXCJibG9jazogXCIgKyBub2RlTmFtZVRvU3RyKGFzdEZvci5ibG9jaywgZm10KV0pO1xyXG4gICAgICAgICAgICBtZXJnZShsaW5lc0ZvciwgdGFiKHNwYWNlKDMsIHJlY3Vyc2UoYXN0Rm9yLmJsb2NrLCBmbXQpKSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbGluZXNGb3I7XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5CUkVBSzpcclxuICAgICAgICAgICAgcmV0dXJuIFtcImJyZWFrXCJdO1xyXG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQ09OVElOVUU6XHJcbiAgICAgICAgICAgIHJldHVybiBbXCJjb250aW51ZVwiXTtcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLlJFVFVSTjpcclxuICAgICAgICAgICAgbGV0IGFzdFJldCA9IDxBU1RSZXR1cm4+YXN0Tm9kZTtcclxuICAgICAgICAgICAgaWYgKGFzdFJldC5yZXR1cm5WYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcInJldHVyblZhbHVlOiBcIiArIGFwcGx5Rm10KGV4cHJUb1N0cihhc3RSZXQucmV0dXJuVmFsdWUpLCBmbXQsIEFTVEZtdC5FWFBSRVNTSU9OX0ZNVCldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLk9QRVJBVE9SX0RFRjpcclxuICAgICAgICAgICAgbGV0IGxpbmVzT3BEZWY6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGxldCBhc3RPcERlZiA9IDxBU1RPcGVyYXRvckRlZmluaXRpb24+YXN0Tm9kZTtcclxuICAgICAgICAgICAgbWVyZ2UobGluZXNPcERlZiwgW1wib3BlcmF0b3JOYW1lOiBcIiArIGFzdE9wRGVmLm9wZXJhdG9yTmFtZS5zdHJpbmdWYWx1ZV0pO1xyXG4gICAgICAgICAgICBtZXJnZShsaW5lc09wRGVmLCBbXCJmdW5jdGlvbk92ZXJsb2FkOiBcIiArIG5vZGVOYW1lVG9TdHIoYXN0T3BEZWYuZnVuY3Rpb25PdmVybG9hZCwgZm10KV0pO1xyXG4gICAgICAgICAgICBtZXJnZShsaW5lc09wRGVmLCB0YWIoc3BhY2UoMTQsIHJlY3Vyc2UoYXN0T3BEZWYuZnVuY3Rpb25PdmVybG9hZCwgZm10KSkpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGxpbmVzT3BEZWY7XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5ERUNMQVJBVElPTjpcclxuICAgICAgICAgICAgbGV0IGxpbmVzRGVjOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgYXN0RGVjID0gPEFTVERlY2xhcmF0aW9uPmFzdE5vZGU7XHJcbiAgICAgICAgICAgIGlmIChhc3REZWMuaXNBc3NpZ25tZW50KSB7XHJcbiAgICAgICAgICAgICAgICBtZXJnZShsaW5lc0RlYywgW1wibHZhbHVlOiBcIiArIGFwcGx5Rm10KGV4cHJUb1N0cihhc3REZWMubHZhbHVlKSwgZm10LCBBU1RGbXQuRVhQUkVTU0lPTl9GTVQpXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtZXJnZShsaW5lc0RlYywgW1wibHZhbHVlOiBcIiArIGFwcGx5Rm10KGV4cHJUb1N0cihhc3REZWMubHZhbHVlKSwgZm10LCBBU1RGbXQuSURFTlRJRklFUl9GTVQpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFzdERlYy50eXBlICYmIChhc3REZWMudHlwZS5ub2RlTmFtZSAhPT0gTm9kZVR5cGUuVFlQRV9MSVRFUkFMIHx8ICg8QVNUVHlwZUxpdGVyYWw+YXN0RGVjLnR5cGUpLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBtZXJnZShsaW5lc0RlYywgW1widHlwZTogICBcIiArIGFwcGx5Rm10KGV4cHJUb1N0cihhc3REZWMudHlwZSksIGZtdCwgQVNURm10LlRZUEVfRk1UKV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhc3REZWMucnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKGFzdERlYy5ydmFsdWUubm9kZU5hbWUgPT09IE5vZGVUeXBlLlRZUEVfREVGIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzdERlYy5ydmFsdWUubm9kZU5hbWUgPT09IE5vZGVUeXBlLk1PRFVMRSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3REZWMucnZhbHVlLm5vZGVOYW1lID09PSBOb2RlVHlwZS5GVU5DVElPTikgJiZcclxuICAgICAgICAgICAgICAgICAgICAhKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3REZWMucnZhbHVlLm5vZGVOYW1lID09PSBOb2RlVHlwZS5UWVBFX0RFRiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3REZWMuaW5TY29wZS5nZXRFbmNsb3NpbmdTY29wZShTY29wZVR5cGUuVFlQRV9TQ09QRSlcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXJnZShsaW5lc0RlYywgW1wicnZhbHVlOiBcIiArIG5vZGVOYW1lVG9TdHIoYXN0RGVjLnJ2YWx1ZSwgZm10KV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lcmdlKGxpbmVzRGVjLCB0YWIoc3BhY2UoNCwgcmVjdXJzZShhc3REZWMucnZhbHVlLCBmbXQpKSkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXJnZShsaW5lc0RlYywgW1wicnZhbHVlOiBcIiArIGFwcGx5Rm10KGV4cHJUb1N0cihhc3REZWMucnZhbHVlKSwgZm10LCBBU1RGbXQuRVhQUkVTU0lPTl9GTVQpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGxpbmVzRGVjO1xyXG4gICAgICAgIGNhc2UgTm9kZVR5cGUuTU9EVUxFOlxyXG4gICAgICAgICAgICBsZXQgbGluZXNNb2Q6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGxldCBhc3RNb2QgPSA8QVNUTW9kdWxlPmFzdE5vZGU7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzTW9kLCBbXCJ3aXRoTW9kdWxlczogXCJdKTtcclxuICAgICAgICAgICAgbGV0IHdpdGhNb2RJbk1vZCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFzdE1vZC53aXRoTW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgd2l0aE1vZEluTW9kLnB1c2goYXBwbHlGbXQoZXhwclRvU3RyKGFzdE1vZC53aXRoTW9kdWxlc1tpXSksIGZtdCwgQVNURm10LldJVEhfTU9EVUxFX0ZNVCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzTW9kLCBzcGFjZSg0LCB3aXRoTW9kSW5Nb2QpKTtcclxuICAgICAgICAgICAgbWVyZ2UobGluZXNNb2QsIFtcImRlY2xhcmF0aW9uczpcIl0pO1xyXG4gICAgICAgICAgICBtZXJnZShsaW5lc01vZCwgbGlzdChhc3RNb2QuZGVjbGFyYXRpb25zLCBmbXQpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGxpbmVzTW9kO1xyXG4gICAgICAgIGNhc2UgTm9kZVR5cGUuVFlQRV9ERUY6XHJcbiAgICAgICAgICAgIGxldCBsaW5lc1R5cGVEZWY6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGxldCBhc3RUeXBlRGVmID0gPEFTVFR5cGVEZWZpbml0aW9uPmFzdE5vZGU7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzVHlwZURlZiwgW1wid2l0aE1vZHVsZXM6IFwiXSk7XHJcbiAgICAgICAgICAgIGxldCB3aXRoTW9kSW5UeXBlID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXN0VHlwZURlZi53aXRoTW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgd2l0aE1vZEluVHlwZS5wdXNoKGFwcGx5Rm10KGV4cHJUb1N0cihhc3RUeXBlRGVmLndpdGhNb2R1bGVzW2ldKSwgZm10LCBBU1RGbXQuV0lUSF9NT0RVTEVfRk1UKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWVyZ2UobGluZXNUeXBlRGVmLCBzcGFjZSg0LCB3aXRoTW9kSW5UeXBlKSk7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzVHlwZURlZiwgW1wiZGVjbGFyYXRpb25zOlwiXSk7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzVHlwZURlZiwgbGlzdChhc3RUeXBlRGVmLmRlY2xhcmF0aW9ucywgZm10KSk7XHJcbiAgICAgICAgICAgIHJldHVybiBsaW5lc1R5cGVEZWY7XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5GVU5DVElPTjpcclxuICAgICAgICAgICAgbGV0IGxpbmVzRnVuYzogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICAgICAgbGV0IGFzdEZ1bmMgPSA8QVNURnVuY3Rpb24+YXN0Tm9kZTtcclxuICAgICAgICAgICAgbWVyZ2UobGluZXNGdW5jLCBbXCJwYXJhbURlY2xhcmF0aW9uOlwiXSk7XHJcbiAgICAgICAgICAgIGlmIChhc3RGdW5jLnBhcmFtRGVjbGFyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlKGxpbmVzRnVuYywgbGlzdChhc3RGdW5jLnBhcmFtRGVjbGFyYXRpb24sIGZtdCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhc3RGdW5jLnJldHVyblR5cGUpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlKGxpbmVzRnVuYywgW1wicmV0dXJuVHlwZTogXCIgKyBhcHBseUZtdChleHByVG9TdHIoYXN0RnVuYy5yZXR1cm5UeXBlKSwgZm10LCBBU1RGbXQuVFlQRV9GTVQpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWVyZ2UobGluZXNGdW5jLCBbXCJibG9jazogXCIgKyBub2RlTmFtZVRvU3RyKGFzdEZ1bmMuYmxvY2ssIGZtdCldKTtcclxuICAgICAgICAgICAgbWVyZ2UobGluZXNGdW5jLCB0YWIoc3BhY2UoMywgcmVjdXJzZShhc3RGdW5jLmJsb2NrLCBmbXQpKSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbGluZXNGdW5jO1xyXG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQUNDRVNTX0NBU1Q6XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5UWVBFX0xJVEVSQUw6XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5GVU5DVElPTl9UWVBFOlxyXG4gICAgICAgIGNhc2UgTm9kZVR5cGUuTkFNRTpcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLkRPVF9PUDpcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLkNBTEw6XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5UWVBFX0NPTlNUUlVDVDpcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLkxJVEVSQUw6XHJcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5VTkFSWV9PUDpcclxuICAgICAgICBjYXNlIE5vZGVUeXBlLkJJTkFSWV9PUDpcclxuICAgICAgICAgICAgcmV0dXJuIFthcHBseUZtdChleHByVG9TdHIoPEFTVEV4cHJlc3Npb24+YXN0Tm9kZSksIGZtdCwgQVNURm10LkVYUFJFU1NJT05fRk1UKV07XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgXCJDYW4ndCByZWN1cnNpdmVseSBwcmludCB0cmVlIGJlY2F1c2UgZ2l2ZW4gbm9kZSBpcyBub3QgYW4gQVNUIG5vZGU6IFwiICsgYXN0Tm9kZS5jb25zdHJ1Y3Rvci5uYW1lO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRBU1QoYXN0Tm9kZTogQVNUTm9kZSkge1xyXG4gICAgbGV0IGZtdDogc3RyaW5nW10gPSBbXTtcclxuICAgIGxldCBvdXRBOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgbWVyZ2Uob3V0QSwgW25vZGVOYW1lVG9TdHIoYXN0Tm9kZSwgZm10KV0pO1xyXG4gICAgbWVyZ2Uob3V0QSwgcmVjdXJzZShhc3ROb2RlLCBmbXQpKTtcclxuXHJcbiAgICBsZXQgc3RyOiBzdHJpbmdbXSA9IFtvdXRBLmpvaW4oXCJcXG5cIildO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBzdHIucHVzaChmbXRbaV0pO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2cuYXBwbHkocHJpbnRBU1QsIHN0cik7XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE5vZGVUeXBlIHtcclxuICAgIFBST0dSQU0sXHJcbiAgICBCTE9DSyxcclxuXHJcbiAgICBJRixcclxuICAgIFdISUxFLFxyXG4gICAgRk9SLFxyXG4gICAgQlJFQUssXHJcbiAgICBDT05USU5VRSxcclxuICAgIFJFVFVSTixcclxuXHJcbiAgICBPUEVSQVRPUl9ERUYsXHJcbiAgICBERUNMQVJBVElPTixcclxuXHJcbiAgICBBQ0NFU1NfQ0FTVCxcclxuICAgIFRZUEVfTElURVJBTCxcclxuICAgIEZVTkNUSU9OX1RZUEUsXHJcbiAgICBPVkVSTE9BRF9GVU5DX1RZUEUsXHJcblxyXG4gICAgTU9EVUxFLFxyXG4gICAgVFlQRV9ERUYsXHJcbiAgICBGVU5DVElPTixcclxuXHJcbiAgICBOQU1FLFxyXG4gICAgRE9UX09QLFxyXG4gICAgQ0FMTCxcclxuICAgIFRZUEVfQ09OU1RSVUNULFxyXG5cclxuICAgIExJVEVSQUwsXHJcbiAgICBVTkFSWV9PUCxcclxuICAgIEJJTkFSWV9PUCxcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFTVE5vZGUge1xyXG4gICAgbG9jVG9rZW46IFRva2VuO1xyXG4gICAgZW5kVG9rZW4hOiBUb2tlbjtcclxuICAgIG5vZGVOYW1lITogTm9kZVR5cGU7XHJcbiAgICBjb25zdHJ1Y3Rvcihsb2NUb2tlbjogVG9rZW4pIHtcclxuICAgICAgICB0aGlzLmxvY1Rva2VuID0gbG9jVG9rZW47XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RQcm9ncmFtIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICBub2RlTmFtZSA9IE5vZGVUeXBlLlBST0dSQU07XHJcblxyXG4gICAgc2NvcGUhOiBTY29wZTtcclxuXHJcbiAgICB3aXRoTW9kdWxlcyE6IEFTVEV4cHJlc3Npb25bXTtcclxuICAgIGRlY2xhcmF0aW9ucyE6IEFTVERlY2xhcmF0aW9uW107XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RCbG9jayBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5CTE9DSztcclxuXHJcbiAgICBzY29wZSE6IFNjb3BlOyAvLyBUaGUgc2NvcGUgb2YgdGhlIGJsb2NrXHJcblxyXG4gICAgd2l0aE1vZHVsZXMhOiBBU1RFeHByZXNzaW9uW107XHJcbiAgICBzdGF0ZW1lbnRzITogQVNUU3RhdGVtZW50W107XHJcblxyXG4gICAgaGFzSnVtcCA9IGZhbHNlO1xyXG4gICAgaGFzUmV0dXJuID0gZmFsc2U7XHJcbn1cclxuXHJcbi8vU3RhdGVtZW50c1xyXG5leHBvcnQgdHlwZSBBU1RTdGF0ZW1lbnQgPVxyXG4gICAgfCBBU1RJZlxyXG4gICAgfCBBU1RXaGlsZVxyXG4gICAgfCBBU1RGb3JcclxuICAgIHwgQVNUQnJlYWtcclxuICAgIHwgQVNUQ29udGludWVcclxuICAgIHwgQVNUUmV0dXJuXHJcbiAgICB8IEFTVE9wZXJhdG9yRGVmaW5pdGlvblxyXG4gICAgfCBBU1REZWNsYXJhdGlvblxyXG4gICAgfCBBU1RFeHByZXNzaW9uO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFTVElmIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICBub2RlTmFtZSA9IE5vZGVUeXBlLklGO1xyXG5cclxuICAgIGhhc0p1bXAgPSBmYWxzZTsgLy8gV2hldGhlciBvciBub3QgdGhlIGlmIGNoYWluIGhhcyBjb250aW51ZXMvYnJlYWtzXHJcbiAgICBoYXNSZXR1cm4gPSBmYWxzZTsgLy8gV2hldGhlciBvciBub3QgdGhlIGlmIGNoYWluIGZ1bGx5IHJldHVybnNcclxuXHJcbiAgICBjb25kaXRpb24hOiBBU1RFeHByZXNzaW9uO1xyXG4gICAgY29uc2VxdWVuY2UhOiBBU1RCbG9jaztcclxuICAgIGFsdGVybmF0aXZlITogQVNUQmxvY2sgfCBBU1RJZjsgLy9DaGFpbiBpZiBzdGF0ZW1lbnRzIHRvZ2V0aGVyIHRvIGdldCBcImVsc2UgaWZcIiBzdGF0ZW1lbnRzXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RXaGlsZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5XSElMRTtcclxuXHJcbiAgICBjb25kaXRpb24hOiBBU1RFeHByZXNzaW9uO1xyXG4gICAgYmxvY2shOiBBU1RCbG9jaztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFTVEZvciBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5GT1I7XHJcblxyXG4gICAgaXRlbVBhcmFtRGVjITogQVNURGVjbGFyYXRpb247XHJcbiAgICBpbmRleFBhcmFtRGVjITogQVNURGVjbGFyYXRpb247XHJcblxyXG4gICAgLy9JbiBzdGF0ZW1lbnRcclxuICAgIGl0ZXJhYmxlTmFtZSE6IEFTVEV4cHJlc3Npb247IC8vIGFycmF5XHJcbiAgICBsb3dlckJvdW5kITogQVNURXhwcmVzc2lvbjtcclxuICAgIHVwcGVyQm91bmQhOiBBU1RFeHByZXNzaW9uO1xyXG5cclxuICAgIGJsb2NrITogQVNUQmxvY2s7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RCcmVhayBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5CUkVBSztcclxufVxyXG5leHBvcnQgY2xhc3MgQVNUQ29udGludWUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIG5vZGVOYW1lID0gTm9kZVR5cGUuQ09OVElOVUU7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RSZXR1cm4gZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIG5vZGVOYW1lID0gTm9kZVR5cGUuUkVUVVJOO1xyXG5cclxuICAgIHJldHVyblZhbHVlITogQVNURXhwcmVzc2lvbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFTVE9wZXJhdG9yRGVmaW5pdGlvbiBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5PUEVSQVRPUl9ERUY7XHJcblxyXG4gICAgb3BlcmF0b3JOYW1lITogVG9rZW47XHJcbiAgICBmdW5jdGlvbk92ZXJsb2FkITogQVNURnVuY3Rpb247XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1REZWNsYXJhdGlvbiBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5ERUNMQVJBVElPTjtcclxuXHJcbiAgICBpblNjb3BlITogU2NvcGU7IC8vIFNjb3BlIHRoYXQgdGhlIGRlY2xhcmF0aW9uIGlzIGluXHJcblxyXG4gICAgaGFzVHlwZUNoZWNrZWQgPSBmYWxzZTtcclxuXHJcbiAgICBsdmFsdWUhOiBBU1RFeHByZXNzaW9uOyAvL1JlZmVyZW5jZSB0byB0aGUgdmFyaWFibGUgYmVpbmcgY2hhbmdlZFxyXG4gICAgdHlwZSE6IEFTVEV4cHJlc3Npb247XHJcblxyXG4gICAgaXNBc3NpZ25tZW50ID0gZmFsc2U7XHJcbiAgICBhY2Nlc3NBc3NpZ25tZW50ITogVG9rZW47IC8vRGVjbGFyYXRpb25BY2Nlc3NUb2tlbjsgLy9BbGwgdmFyaWFibGVzIGFyZSBpbW11dGFibGUgYnkgZGVmYXVsdFxyXG4gICAgcnZhbHVlITogQVNURXhwcmVzc2lvbjtcclxufVxyXG5cclxuLy9FeHByZXNzaW9uc1xyXG5leHBvcnQgdHlwZSBBU1RFeHByZXNzaW9uID1cclxuICAgIHwgQVNUQWNjZXNzQ2FzdFxyXG4gICAgfCBBU1RUeXBlTGl0ZXJhbFxyXG4gICAgfCBBU1RGdW5jdGlvblR5cGVcclxuICAgIHwgQVNUTW9kdWxlXHJcbiAgICB8IEFTVFR5cGVEZWZpbml0aW9uXHJcbiAgICB8IEFTVEZ1bmN0aW9uXHJcbiAgICB8IEFTVE5hbWVcclxuICAgIHwgQVNURG90T3BlcmF0b3JcclxuICAgIHwgQVNUQ2FsbFxyXG4gICAgfCBBU1RUeXBlQ29uc3RydWN0aW9uXHJcbiAgICB8IEFTVExpdGVyYWxcclxuICAgIHwgQVNUVW5hcnlPcGVyYXRvclxyXG4gICAgfCBBU1RCaW5hcnlPcGVyYXRvcjtcclxuXHJcbmV4cG9ydCB0eXBlIEFjY2Vzc0Nhc3RUb2tlbiA9IFRva2VuVHlwZS5NVVRfQ0FTVF9US04gfCBUb2tlblR5cGUuSU1NVVRfQ0FTVF9US04gfCBUb2tlblR5cGUuQ09OU1RfQ0FTVF9US047XHJcblxyXG5leHBvcnQgY2xhc3MgQVNUQWNjZXNzQ2FzdCBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5BQ0NFU1NfQ0FTVDtcclxuICAgIHJlc29sdmVkITogQVNURXhwcmVzc2lvbjtcclxuXHJcbiAgICBhY2Nlc3NUeXBlITogQWNjZXNzQ2FzdFRva2VuO1xyXG4gICAgY2FzdGVkVHlwZSE6IEFTVEV4cHJlc3Npb247XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFR5cGVMaXRlcmFsVG9rZW4gPVxyXG4gICAgfCBUb2tlblR5cGUuTU9EVUxFX1RLTlxyXG4gICAgfCBUb2tlblR5cGUuVFlQRV9US05cclxuICAgIHwgVG9rZW5UeXBlLk5VTV9UWVBFX1RLTlxyXG4gICAgfCBUb2tlblR5cGUuU1RSSU5HX1RZUEVfVEtOXHJcbiAgICB8IFRva2VuVHlwZS5CT09MX1RZUEVfVEtOXHJcbiAgICB8IFRva2VuVHlwZS5WT0lEX1RZUEVfVEtOO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFTVFR5cGVMaXRlcmFsIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICBub2RlTmFtZSA9IE5vZGVUeXBlLlRZUEVfTElURVJBTDtcclxuICAgIHJlc29sdmVkITogQVNURXhwcmVzc2lvbjtcclxuXHJcbiAgICAvL251bSwgc3RyaW5nLCBib29sLCB2b2lkXHJcbiAgICB0eXBlITogVHlwZUxpdGVyYWxUb2tlbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFTVEZ1bmN0aW9uVHlwZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5GVU5DVElPTl9UWVBFO1xyXG4gICAgcmVzb2x2ZWQhOiBBU1RFeHByZXNzaW9uO1xyXG5cclxuICAgIGlucHV0VHlwZSE6IEFTVEV4cHJlc3Npb25bXTsgLy8gcGFyYW1ldGVyIHR5cGVzXHJcbiAgICBvdXRUeXBlITogQVNURXhwcmVzc2lvbjsgLy8gbnVtLCBzdHJpbmcsIGJvb2xlYW4sIHZlY3RvciwgUGFydGljbGUsIEFzdHJvbG9neS5TdGFyIGV0Yy4uLlxyXG59XHJcblxyXG4vLyBUeXBlIGNyZWF0ZWQgZHVyaW5nIHR5cGUgY2hlY2tpbmcgLT4gUGFyc2VyIGNhbid0IGNyZWF0ZSB0aGlzXHJcbmV4cG9ydCBjbGFzcyBBU1RPdmVybG9hZGVkRnVuY3Rpb25UeXBlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICBub2RlTmFtZSA9IE5vZGVUeXBlLk9WRVJMT0FEX0ZVTkNfVFlQRTtcclxuICAgIHJlc29sdmVkITogQVNURXhwcmVzc2lvbjtcclxuXHJcbiAgICBhY2Nlc3NpYmxlRnJvbVNjb3BlITogU2NvcGU7IC8vV2hlcmUgdGhlIHNldCBvZiBmdW5jdGlvbiBvdmVybG9hZHMgY2FuIGJlIGFjY2Vzc2VkIGZyb21cclxuICAgIGZ1bmNOYW1lUmVmITogQVNUTmFtZTsgLy9SZWZlcmVuY2UgYSBmdW5jdGlvbiB0byBwdWxsIG92ZXJsb2FkZWQgdHlwZXMgZnJvbVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQVNUTW9kdWxlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICBub2RlTmFtZSA9IE5vZGVUeXBlLk1PRFVMRTtcclxuICAgIHJlc29sdmVkITogQVNURXhwcmVzc2lvbjtcclxuXHJcbiAgICBtb2R1bGVEZWNSZWYhOiBBU1REZWNsYXJhdGlvbjsgLy9SZWZlcmVuY2UgdG8gZGVjbGFyYXRpb24gaG9sZGluZyB0aGUgbW9kdWxlXHJcblxyXG4gICAgc2NvcGUhOiBTY29wZTtcclxuICAgIHdpdGhNb2R1bGVzITogQVNURXhwcmVzc2lvbltdO1xyXG4gICAgZGVjbGFyYXRpb25zITogQVNURGVjbGFyYXRpb25bXTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFTVFR5cGVEZWZpbml0aW9uIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICBub2RlTmFtZSA9IE5vZGVUeXBlLlRZUEVfREVGO1xyXG4gICAgcmVzb2x2ZWQhOiBBU1RFeHByZXNzaW9uO1xyXG5cclxuICAgIHR5cGVEZWNSZWYhOiBBU1REZWNsYXJhdGlvbjsgLy9SZWZlcmVuY2UgdG8gdGhlIGRlY2xhcmF0aW9uIGhvbGRpbmcgdGhlIHR5cGUgZGVmaW5pdGlvblxyXG5cclxuICAgIHNjb3BlITogU2NvcGU7XHJcbiAgICB3aXRoTW9kdWxlcyE6IEFTVEV4cHJlc3Npb25bXTtcclxuICAgIGRlY2xhcmF0aW9ucyE6IEFTVERlY2xhcmF0aW9uW107XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RGdW5jdGlvbiBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5GVU5DVElPTjtcclxuICAgIHJlc29sdmVkITogQVNURXhwcmVzc2lvbjtcclxuXHJcbiAgICBwYXJhbURlY2xhcmF0aW9uITogQVNURGVjbGFyYXRpb25bXTtcclxuICAgIHJldHVyblR5cGUhOiBBU1RFeHByZXNzaW9uO1xyXG4gICAgYmxvY2shOiBBU1RCbG9jaztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFTVE5hbWUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIG5vZGVOYW1lID0gTm9kZVR5cGUuTkFNRTtcclxuICAgIHJlc29sdmVkITogQVNURXhwcmVzc2lvbjtcclxuXHJcbiAgICByZWZOYW1lITogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQVNURG90T3BlcmF0b3IgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIG5vZGVOYW1lID0gTm9kZVR5cGUuRE9UX09QO1xyXG4gICAgcmVzb2x2ZWQhOiBBU1RFeHByZXNzaW9uO1xyXG5cclxuICAgIHJvb3RWYWx1ZSE6IEFTVEV4cHJlc3Npb247XHJcbiAgICBtZW1iZXJWYWx1ZSE6IEFTVE5hbWU7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RDYWxsIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICBub2RlTmFtZSA9IE5vZGVUeXBlLkNBTEw7XHJcbiAgICByZXNvbHZlZCE6IEFTVEV4cHJlc3Npb247XHJcblxyXG4gICAgZnVuY3Rpb25OYW1lUmVmITogQVNURXhwcmVzc2lvbjsgLy9GdW5jdGlvbiBuYW1lIGlkZW50aWZpZXJcclxuICAgIGdpdmVuUGFyYW1zITogQVNURXhwcmVzc2lvbltdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQVNUVHlwZUNvbnN0cnVjdGlvbiBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5UWVBFX0NPTlNUUlVDVDtcclxuICAgIHJlc29sdmVkITogQVNURXhwcmVzc2lvbjtcclxuXHJcbiAgICB0eXBlUmVmITogQVNURXhwcmVzc2lvbjtcclxuICAgIGFzc2lnbm1lbnRzIToge1xyXG4gICAgICAgIGxvY1Rva2VuOiBUb2tlbjtcclxuXHJcbiAgICAgICAgbHZhbHVlOiBBU1ROYW1lO1xyXG4gICAgICAgIHJ2YWx1ZTogQVNURXhwcmVzc2lvbjtcclxuICAgIH1bXTsgLy8gQ29uc3RyYWluZWQgdG8gQVNUTmFtZSBsdmFsdWVzLCBndWFyYW50ZWVkIHRvIGJlIHVuaXF1ZSBhc3NpZ25tZW50c1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQVNUTGl0ZXJhbCBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgbm9kZU5hbWUgPSBOb2RlVHlwZS5MSVRFUkFMO1xyXG4gICAgcmVzb2x2ZWQhOiBBU1RFeHByZXNzaW9uO1xyXG5cclxuICAgIC8vIDY3LCBcInRoaXMgaXMgYSBsaXRlcmFsXCIsIHRydWVcclxuICAgIHZhbHVlITogVG9rZW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RVbmFyeU9wZXJhdG9yIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICBub2RlTmFtZSA9IE5vZGVUeXBlLlVOQVJZX09QO1xyXG4gICAgcmVzb2x2ZWQhOiBBU1RFeHByZXNzaW9uO1xyXG5cclxuICAgIC8vYSA9IH4oMyArIDQpXHJcbiAgICBvcGVyYXRpb24hOiBUb2tlbjtcclxuICAgIHZhbHVlITogQVNURXhwcmVzc2lvbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFTVEJpbmFyeU9wZXJhdG9yIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICBub2RlTmFtZSA9IE5vZGVUeXBlLkJJTkFSWV9PUDtcclxuICAgIHJlc29sdmVkITogQVNURXhwcmVzc2lvbjtcclxuXHJcbiAgICAvLzMgKyA0XHJcbiAgICBsdmFsdWUhOiBBU1RFeHByZXNzaW9uO1xyXG4gICAgb3BlcmF0aW9uITogVG9rZW47XHJcbiAgICBydmFsdWUhOiBBU1RFeHByZXNzaW9uO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scuft/lang/Ast.ts\n");

/***/ }),

/***/ "./src/scuft/lang/ErrorHandler.ts":
/*!****************************************!*\
  !*** ./src/scuft/lang/ErrorHandler.ts ***!
  \****************************************/
/*! namespace exports */
/*! export ErrorHandler [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ErrorHandler\": () => /* binding */ ErrorHandler\n/* harmony export */ });\n/* harmony import */ var _Lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lexer */ \"./src/scuft/lang/Lexer.ts\");\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n\r\n\r\nclass ErrorHandler {\r\n    constructor(header) {\r\n        this.lines = [];\r\n        this.errorQueue = [];\r\n        this.header = header;\r\n    }\r\n    static fromHandler(header, errorHandler) {\r\n        let handler = new ErrorHandler(header);\r\n        handler.lines = errorHandler.lines;\r\n        return handler;\r\n    }\r\n    static fromSource(header, sourceCode) {\r\n        let handler = new ErrorHandler(header);\r\n        let begin = 0;\r\n        let lineCount = 1;\r\n        for (let i = 0; i < sourceCode.length; i++) {\r\n            if (sourceCode.charAt(i) === \"\\n\") {\r\n                handler.lines[lineCount++] = sourceCode.slice(begin, i);\r\n                begin = i + 1;\r\n            }\r\n        }\r\n        handler.lines[lineCount] = sourceCode.slice(begin, sourceCode.length);\r\n        return handler;\r\n    }\r\n    panic() {\r\n        let err = this.header;\r\n        for (let i = 0; i < this.errorQueue.length; i++) {\r\n            err += this.errorQueue[i];\r\n        }\r\n        throw err;\r\n    }\r\n    warn() {\r\n        let err = this.header;\r\n        for (let i = 0; i < this.errorQueue.length; i++) {\r\n            err += this.errorQueue[i];\r\n        }\r\n        console.warn(err);\r\n        this.errorQueue = [];\r\n    }\r\n    errorHeader(msg, line, c) {\r\n        let optionalCol = \"\";\r\n        if (c !== undefined) {\r\n            let str = this.lines[line].slice(0, c);\r\n            let col = 0;\r\n            for (let i = 0; i < str.length; i++) {\r\n                if (str.charAt(i) === \"\\t\") {\r\n                    col += ErrorHandler.TAB_WIDTH;\r\n                }\r\n                else {\r\n                    col++;\r\n                }\r\n            }\r\n            optionalCol = \", col:\" + (col + 1);\r\n        }\r\n        return \"(line:\" + line + optionalCol + \"): \" + msg + \"\\n\";\r\n    }\r\n    formatLine(leftIndentSpace, line, fileLine) {\r\n        if (line < 1)\r\n            return \"\";\r\n        let strNumber = line + \"\";\r\n        for (let i = 0; i < leftIndentSpace - strNumber.length; i++) {\r\n            strNumber = \" \" + strNumber;\r\n        }\r\n        return \"\\t\" + strNumber + \"\\t\" + fileLine + \"\\n\";\r\n    }\r\n    getLineFromSource(line) {\r\n        return this.lines[line].trimLeft().split(\"\\t\").join(\" \");\r\n    }\r\n    makeIndicator(line, c0, c1) {\r\n        console.assert(c0 >= 0, \"c0=%s must be non-negative\", c0);\r\n        console.assert(c1 > c0, \"c1=%s must be larger than c0=%s\", c1, c0);\r\n        let indentLen = this.lines[line].length - this.lines[line].trimLeft().length;\r\n        return \" \".repeat(c0 - indentLen) + \"^\".repeat(c1 - c0);\r\n    }\r\n    insert(msg) {\r\n        this.errorQueue.push(msg);\r\n        return this;\r\n    }\r\n    addNote_PANIC(msg) {\r\n        this.errorQueue.push(\"Note: \" + msg);\r\n        this.panic();\r\n    }\r\n    atPoint(msg, line, c) {\r\n        let error = this.errorHeader(msg, line, c);\r\n        let len = Math.floor(Math.log10(line + 1)) + 1;\r\n        error += this.formatLine(len, line - 1, \"\");\r\n        error += this.formatLine(len, line, this.getLineFromSource(line));\r\n        error += this.formatLine(len, line + 1, this.makeIndicator(line, c, c + 1));\r\n        this.errorQueue.push(error);\r\n        return this;\r\n    }\r\n    atPoint_PANIC(msg, line, c) {\r\n        this.atPoint(msg, line, c);\r\n        this.panic();\r\n    }\r\n    atToken(msg, token) {\r\n        return this.atPoint(msg, token.line, token.c);\r\n    }\r\n    atToken_PANIC(msg, token) {\r\n        this.atPoint_PANIC(msg, token.line, token.c);\r\n    }\r\n    atWholeToken(msg, token) {\r\n        let line = token.line;\r\n        let c = token.c;\r\n        let error = this.errorHeader(msg, line, c);\r\n        let len = Math.floor(Math.log10(line + 1)) + 1;\r\n        error += this.formatLine(len, line - 1, \"\");\r\n        error += this.formatLine(len, line, this.getLineFromSource(line));\r\n        error += this.formatLine(len, line + 1, this.makeIndicator(line, c, c + Math.max(1, token.stringValue.length)));\r\n        this.errorQueue.push(error);\r\n        return this;\r\n    }\r\n    atWholeToken_PANIC(msg, token) {\r\n        this.atWholeToken(msg, token);\r\n        this.panic();\r\n    }\r\n    atNode(msg, node) {\r\n        return this.atToken(msg, node.locToken);\r\n    }\r\n    atNode_PANIC(msg, node) {\r\n        this.atToken_PANIC(msg, node.locToken);\r\n    }\r\n    atWholeNode(msg, node) {\r\n        let locToken = node.locToken;\r\n        if (node.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_1__.NodeType.BINARY_OP) {\r\n            locToken = node.operation;\r\n        }\r\n        let line = locToken.line;\r\n        let c = locToken.c;\r\n        let endToken = node.endToken && node.endToken.line === line ? node.endToken : locToken;\r\n        let error = this.errorHeader(msg, line, c);\r\n        let len = Math.floor(Math.log10(line + 1)) + 1;\r\n        error += this.formatLine(len, line - 1, \"\");\r\n        error += this.formatLine(len, line, this.getLineFromSource(line));\r\n        error += this.formatLine(len, line + 1, this.makeIndicator(line, c, endToken.c + endToken.stringValue.length));\r\n        this.errorQueue.push(error);\r\n        return this;\r\n    }\r\n    atWholeNode_PANIC(msg, node) {\r\n        this.atWholeNode(msg, node);\r\n        this.panic();\r\n    }\r\n    atAfterLastToken(msg, curToken) {\r\n        let curLine = curToken.line;\r\n        let curLineStr = this.lines[curLine];\r\n        let cur = curToken.c;\r\n        do {\r\n            if (cur <= 0 && curLine > 1) {\r\n                curLine--;\r\n                curLineStr = this.lines[curLine];\r\n                cur = curLineStr.length;\r\n            }\r\n            cur--;\r\n        } while ((cur > 0 || curLine >= 1) && _Lexer__WEBPACK_IMPORTED_MODULE_0__.default.isWhitespace(curLineStr.charAt(cur)));\r\n        return this.atPoint(msg, curLine, cur + 1);\r\n    }\r\n    atAfterLastToken_PANIC(msg, curToken) {\r\n        this.atAfterLastToken(msg, curToken);\r\n        this.panic();\r\n    }\r\n}\r\nErrorHandler.TAB_WIDTH = 4;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL0Vycm9ySGFuZGxlci50cz9mNGY1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUM0QjtBQUNDO0FBRXRCLE1BQU0sWUFBWTtJQXNCckIsWUFBb0IsTUFBYztRQUQxQixVQUFLLEdBQWEsRUFBRSxDQUFDO1FBSXJCLGVBQVUsR0FBYSxFQUFFLENBQUM7UUFGOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQXZCRCxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQWMsRUFBRSxZQUEwQjtRQUN6RCxJQUFJLE9BQU8sR0FBRyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxPQUFPLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFDbkMsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBYyxFQUFFLFVBQWtCO1FBQ2hELElBQUksT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO2dCQUMvQixPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hELEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2pCO1NBQ0o7UUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFVBQVUs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QUUsSUFBaUI7UUFDNUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFDRCxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsUUFBZTtRQUN6QyxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQzVCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHO1lBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7Z0JBQ3pCLE9BQU8sRUFBRSxDQUFDO2dCQUNWLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNqQyxHQUFHLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQzthQUMzQjtZQUNELEdBQUcsRUFBRSxDQUFDO1NBQ1QsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQyxJQUFJLHdEQUFrQixDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUNsRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELHNCQUFzQixDQUFDLEdBQVcsRUFBRSxRQUFlO1FBQy9DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUM7O0FBNUl1QixzQkFBUyxHQUFHLENBQUMsQ0FBQyIsImZpbGUiOiIuL3NyYy9zY3VmdC9sYW5nL0Vycm9ySGFuZGxlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRva2VuIH0gZnJvbSBcIi4vVG9rZW5cIjtcclxuaW1wb3J0IExleGVyIGZyb20gXCIuL0xleGVyXCI7XHJcbmltcG9ydCAqIGFzIEFTVCBmcm9tIFwiLi9Bc3RcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFcnJvckhhbmRsZXIge1xyXG4gICAgc3RhdGljIGZyb21IYW5kbGVyKGhlYWRlcjogc3RyaW5nLCBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlcik6IEVycm9ySGFuZGxlciB7XHJcbiAgICAgICAgbGV0IGhhbmRsZXIgPSBuZXcgRXJyb3JIYW5kbGVyKGhlYWRlcik7XHJcbiAgICAgICAgaGFuZGxlci5saW5lcyA9IGVycm9ySGFuZGxlci5saW5lcztcclxuICAgICAgICByZXR1cm4gaGFuZGxlcjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBmcm9tU291cmNlKGhlYWRlcjogc3RyaW5nLCBzb3VyY2VDb2RlOiBzdHJpbmcpOiBFcnJvckhhbmRsZXIge1xyXG4gICAgICAgIGxldCBoYW5kbGVyID0gbmV3IEVycm9ySGFuZGxlcihoZWFkZXIpO1xyXG4gICAgICAgIGxldCBiZWdpbiA9IDA7XHJcbiAgICAgICAgbGV0IGxpbmVDb3VudCA9IDE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VDb2RlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChzb3VyY2VDb2RlLmNoYXJBdChpKSA9PT0gXCJcXG5cIikge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlci5saW5lc1tsaW5lQ291bnQrK10gPSBzb3VyY2VDb2RlLnNsaWNlKGJlZ2luLCBpKTtcclxuICAgICAgICAgICAgICAgIGJlZ2luID0gaSArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaGFuZGxlci5saW5lc1tsaW5lQ291bnRdID0gc291cmNlQ29kZS5zbGljZShiZWdpbiwgc291cmNlQ29kZS5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiBoYW5kbGVyO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVEFCX1dJRFRIID0gNDtcclxuICAgIHByaXZhdGUgaGVhZGVyOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGxpbmVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihoZWFkZXI6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBlcnJvclF1ZXVlOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgcGFuaWMoKTogbmV2ZXIge1xyXG4gICAgICAgIGxldCBlcnIgPSB0aGlzLmhlYWRlcjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXJyb3JRdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBlcnIgKz0gdGhpcy5lcnJvclF1ZXVlW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbiAgICB3YXJuKCkge1xyXG4gICAgICAgIGxldCBlcnIgPSB0aGlzLmhlYWRlcjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXJyb3JRdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBlcnIgKz0gdGhpcy5lcnJvclF1ZXVlW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcclxuICAgICAgICB0aGlzLmVycm9yUXVldWUgPSBbXTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZXJyb3JIZWFkZXIobXNnOiBzdHJpbmcsIGxpbmU6IG51bWJlciwgYz86IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IG9wdGlvbmFsQ29sID0gXCJcIjtcclxuICAgICAgICBpZiAoYyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGxldCBzdHIgPSB0aGlzLmxpbmVzW2xpbmVdLnNsaWNlKDAsIGMpO1xyXG4gICAgICAgICAgICBsZXQgY29sID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdHIuY2hhckF0KGkpID09PSBcIlxcdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sICs9IEVycm9ySGFuZGxlci5UQUJfV0lEVEg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wdGlvbmFsQ29sID0gXCIsIGNvbDpcIiArIChjb2wgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiKGxpbmU6XCIgKyBsaW5lICsgb3B0aW9uYWxDb2wgKyBcIik6IFwiICsgbXNnICsgXCJcXG5cIjtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZm9ybWF0TGluZShsZWZ0SW5kZW50U3BhY2U6IG51bWJlciwgbGluZTogbnVtYmVyLCBmaWxlTGluZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAobGluZSA8IDEpIHJldHVybiBcIlwiO1xyXG4gICAgICAgIGxldCBzdHJOdW1iZXIgPSBsaW5lICsgXCJcIjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlZnRJbmRlbnRTcGFjZSAtIHN0ck51bWJlci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzdHJOdW1iZXIgPSBcIiBcIiArIHN0ck51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiXFx0XCIgKyBzdHJOdW1iZXIgKyBcIlxcdFwiICsgZmlsZUxpbmUgKyBcIlxcblwiO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZXRMaW5lRnJvbVNvdXJjZShsaW5lOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVzW2xpbmVdLnRyaW1MZWZ0KCkuc3BsaXQoXCJcXHRcIikuam9pbihcIiBcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG1ha2VJbmRpY2F0b3IobGluZTogbnVtYmVyLCBjMDogbnVtYmVyLCBjMTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChjMCA+PSAwLCBcImMwPSVzIG11c3QgYmUgbm9uLW5lZ2F0aXZlXCIsIGMwKTtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChjMSA+IGMwLCBcImMxPSVzIG11c3QgYmUgbGFyZ2VyIHRoYW4gYzA9JXNcIiwgYzEsIGMwKTtcclxuICAgICAgICBsZXQgaW5kZW50TGVuID0gdGhpcy5saW5lc1tsaW5lXS5sZW5ndGggLSB0aGlzLmxpbmVzW2xpbmVdLnRyaW1MZWZ0KCkubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiBcIiBcIi5yZXBlYXQoYzAgLSBpbmRlbnRMZW4pICsgXCJeXCIucmVwZWF0KGMxIC0gYzApO1xyXG4gICAgfVxyXG4gICAgaW5zZXJ0KG1zZzogc3RyaW5nKTogRXJyb3JIYW5kbGVyIHtcclxuICAgICAgICB0aGlzLmVycm9yUXVldWUucHVzaChtc2cpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgYWRkTm90ZV9QQU5JQyhtc2c6IHN0cmluZyk6IG5ldmVyIHtcclxuICAgICAgICB0aGlzLmVycm9yUXVldWUucHVzaChcIk5vdGU6IFwiICsgbXNnKTtcclxuICAgICAgICB0aGlzLnBhbmljKCk7XHJcbiAgICB9XHJcbiAgICBhdFBvaW50KG1zZzogc3RyaW5nLCBsaW5lOiBudW1iZXIsIGM6IG51bWJlcik6IEVycm9ySGFuZGxlciB7XHJcbiAgICAgICAgbGV0IGVycm9yID0gdGhpcy5lcnJvckhlYWRlcihtc2csIGxpbmUsIGMpO1xyXG4gICAgICAgIGxldCBsZW4gPSBNYXRoLmZsb29yKE1hdGgubG9nMTAobGluZSArIDEpKSArIDE7XHJcbiAgICAgICAgZXJyb3IgKz0gdGhpcy5mb3JtYXRMaW5lKGxlbiwgbGluZSAtIDEsIFwiXCIpO1xyXG4gICAgICAgIGVycm9yICs9IHRoaXMuZm9ybWF0TGluZShsZW4sIGxpbmUsIHRoaXMuZ2V0TGluZUZyb21Tb3VyY2UobGluZSkpO1xyXG4gICAgICAgIGVycm9yICs9IHRoaXMuZm9ybWF0TGluZShsZW4sIGxpbmUgKyAxLCB0aGlzLm1ha2VJbmRpY2F0b3IobGluZSwgYywgYyArIDEpKTtcclxuICAgICAgICB0aGlzLmVycm9yUXVldWUucHVzaChlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBhdFBvaW50X1BBTklDKG1zZzogc3RyaW5nLCBsaW5lOiBudW1iZXIsIGM6IG51bWJlcik6IG5ldmVyIHtcclxuICAgICAgICB0aGlzLmF0UG9pbnQobXNnLCBsaW5lLCBjKTtcclxuICAgICAgICB0aGlzLnBhbmljKCk7XHJcbiAgICB9XHJcbiAgICBhdFRva2VuKG1zZzogc3RyaW5nLCB0b2tlbjogVG9rZW4pOiBFcnJvckhhbmRsZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0UG9pbnQobXNnLCB0b2tlbi5saW5lLCB0b2tlbi5jKTtcclxuICAgIH1cclxuICAgIGF0VG9rZW5fUEFOSUMobXNnOiBzdHJpbmcsIHRva2VuOiBUb2tlbik6IG5ldmVyIHtcclxuICAgICAgICB0aGlzLmF0UG9pbnRfUEFOSUMobXNnLCB0b2tlbi5saW5lLCB0b2tlbi5jKTtcclxuICAgIH1cclxuICAgIGF0V2hvbGVUb2tlbihtc2c6IHN0cmluZywgdG9rZW46IFRva2VuKTogRXJyb3JIYW5kbGVyIHtcclxuICAgICAgICBsZXQgbGluZSA9IHRva2VuLmxpbmU7XHJcbiAgICAgICAgbGV0IGMgPSB0b2tlbi5jO1xyXG4gICAgICAgIGxldCBlcnJvciA9IHRoaXMuZXJyb3JIZWFkZXIobXNnLCBsaW5lLCBjKTtcclxuICAgICAgICBsZXQgbGVuID0gTWF0aC5mbG9vcihNYXRoLmxvZzEwKGxpbmUgKyAxKSkgKyAxO1xyXG4gICAgICAgIGVycm9yICs9IHRoaXMuZm9ybWF0TGluZShsZW4sIGxpbmUgLSAxLCBcIlwiKTtcclxuICAgICAgICBlcnJvciArPSB0aGlzLmZvcm1hdExpbmUobGVuLCBsaW5lLCB0aGlzLmdldExpbmVGcm9tU291cmNlKGxpbmUpKTtcclxuICAgICAgICBlcnJvciArPSB0aGlzLmZvcm1hdExpbmUobGVuLCBsaW5lICsgMSwgdGhpcy5tYWtlSW5kaWNhdG9yKGxpbmUsIGMsIGMgKyBNYXRoLm1heCgxLCB0b2tlbi5zdHJpbmdWYWx1ZS5sZW5ndGgpKSk7XHJcbiAgICAgICAgdGhpcy5lcnJvclF1ZXVlLnB1c2goZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgYXRXaG9sZVRva2VuX1BBTklDKG1zZzogc3RyaW5nLCB0b2tlbjogVG9rZW4pOiBuZXZlciB7XHJcbiAgICAgICAgdGhpcy5hdFdob2xlVG9rZW4obXNnLCB0b2tlbik7XHJcbiAgICAgICAgdGhpcy5wYW5pYygpO1xyXG4gICAgfVxyXG4gICAgYXROb2RlKG1zZzogc3RyaW5nLCBub2RlOiBBU1QuQVNUTm9kZSk6IEVycm9ySGFuZGxlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXRUb2tlbihtc2csIG5vZGUubG9jVG9rZW4pO1xyXG4gICAgfVxyXG4gICAgYXROb2RlX1BBTklDKG1zZzogc3RyaW5nLCBub2RlOiBBU1QuQVNUTm9kZSk6IG5ldmVyIHtcclxuICAgICAgICB0aGlzLmF0VG9rZW5fUEFOSUMobXNnLCBub2RlLmxvY1Rva2VuKTtcclxuICAgIH1cclxuICAgIGF0V2hvbGVOb2RlKG1zZzogc3RyaW5nLCBub2RlOiBBU1QuQVNUTm9kZSk6IEVycm9ySGFuZGxlciB7XHJcbiAgICAgICAgbGV0IGxvY1Rva2VuID0gbm9kZS5sb2NUb2tlbjtcclxuICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gQVNULk5vZGVUeXBlLkJJTkFSWV9PUCkge1xyXG4gICAgICAgICAgICBsb2NUb2tlbiA9ICg8QVNULkFTVEJpbmFyeU9wZXJhdG9yPm5vZGUpLm9wZXJhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGxpbmUgPSBsb2NUb2tlbi5saW5lO1xyXG4gICAgICAgIGxldCBjID0gbG9jVG9rZW4uYztcclxuICAgICAgICBsZXQgZW5kVG9rZW4gPSBub2RlLmVuZFRva2VuICYmIG5vZGUuZW5kVG9rZW4ubGluZSA9PT0gbGluZSA/IG5vZGUuZW5kVG9rZW4gOiBsb2NUb2tlbjtcclxuICAgICAgICBsZXQgZXJyb3IgPSB0aGlzLmVycm9ySGVhZGVyKG1zZywgbGluZSwgYyk7XHJcbiAgICAgICAgbGV0IGxlbiA9IE1hdGguZmxvb3IoTWF0aC5sb2cxMChsaW5lICsgMSkpICsgMTtcclxuICAgICAgICBlcnJvciArPSB0aGlzLmZvcm1hdExpbmUobGVuLCBsaW5lIC0gMSwgXCJcIik7XHJcbiAgICAgICAgZXJyb3IgKz0gdGhpcy5mb3JtYXRMaW5lKGxlbiwgbGluZSwgdGhpcy5nZXRMaW5lRnJvbVNvdXJjZShsaW5lKSk7XHJcbiAgICAgICAgZXJyb3IgKz0gdGhpcy5mb3JtYXRMaW5lKGxlbiwgbGluZSArIDEsIHRoaXMubWFrZUluZGljYXRvcihsaW5lLCBjLCBlbmRUb2tlbi5jICsgZW5kVG9rZW4uc3RyaW5nVmFsdWUubGVuZ3RoKSk7XHJcbiAgICAgICAgdGhpcy5lcnJvclF1ZXVlLnB1c2goZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgYXRXaG9sZU5vZGVfUEFOSUMobXNnOiBzdHJpbmcsIG5vZGU6IEFTVC5BU1ROb2RlKTogbmV2ZXIge1xyXG4gICAgICAgIHRoaXMuYXRXaG9sZU5vZGUobXNnLCBub2RlKTtcclxuICAgICAgICB0aGlzLnBhbmljKCk7XHJcbiAgICB9XHJcbiAgICBhdEFmdGVyTGFzdFRva2VuKG1zZzogc3RyaW5nLCBjdXJUb2tlbjogVG9rZW4pOiBFcnJvckhhbmRsZXIge1xyXG4gICAgICAgIGxldCBjdXJMaW5lID0gY3VyVG9rZW4ubGluZTtcclxuICAgICAgICBsZXQgY3VyTGluZVN0ciA9IHRoaXMubGluZXNbY3VyTGluZV07XHJcbiAgICAgICAgbGV0IGN1ciA9IGN1clRva2VuLmM7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBpZiAoY3VyIDw9IDAgJiYgY3VyTGluZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGN1ckxpbmUtLTtcclxuICAgICAgICAgICAgICAgIGN1ckxpbmVTdHIgPSB0aGlzLmxpbmVzW2N1ckxpbmVdO1xyXG4gICAgICAgICAgICAgICAgY3VyID0gY3VyTGluZVN0ci5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VyLS07XHJcbiAgICAgICAgfSB3aGlsZSAoKGN1ciA+IDAgfHwgY3VyTGluZSA+PSAxKSAmJiBMZXhlci5pc1doaXRlc3BhY2UoY3VyTGluZVN0ci5jaGFyQXQoY3VyKSkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0UG9pbnQobXNnLCBjdXJMaW5lLCBjdXIgKyAxKTtcclxuICAgIH1cclxuICAgIGF0QWZ0ZXJMYXN0VG9rZW5fUEFOSUMobXNnOiBzdHJpbmcsIGN1clRva2VuOiBUb2tlbik6IG5ldmVyIHtcclxuICAgICAgICB0aGlzLmF0QWZ0ZXJMYXN0VG9rZW4obXNnLCBjdXJUb2tlbik7XHJcbiAgICAgICAgdGhpcy5wYW5pYygpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scuft/lang/ErrorHandler.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Interpreter.ts":
/*!***************************************!*\
  !*** ./src/scuft/lang/Interpreter.ts ***!
  \***************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Interpreter\n/* harmony export */ });\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n\r\nfunction printEnv(ctx) {\r\n    let out = \"\";\r\n    for (const [key, value] of ctx.values.entries()) {\r\n        out += key + \" ::: \" + value + \"\\n\";\r\n    }\r\n    console.log(out);\r\n}\r\nclass Interpreter {\r\n    interpProgram(prgm) {\r\n        let globalCtx = { parentCtx: undefined, values: new Map() };\r\n        for (let [key, value] of prgm.scope.table.entries()) {\r\n            if (value.rvalue)\r\n                globalCtx.values.set(key, this.interpExpression(value.rvalue, globalCtx));\r\n        }\r\n    }\r\n    interpBlock(block, ctx) {\r\n        for (let i = 0; i < block.statements.length; i++) {\r\n            this.interpStatement(block.statements[i], ctx);\r\n        }\r\n    }\r\n    interpStatement(stmt, ctx) {\r\n        switch (stmt.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.DECLARATION:\r\n                this.interpDeclaration(stmt, ctx);\r\n        }\r\n    }\r\n    interpDeclaration(decl, ctx) {\r\n        if (decl.lvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME)\r\n            throw \"Unimplemented declaration thing\";\r\n        if (decl.rvalue) {\r\n            let rvalue = decl.rvalue.resolved ? decl.rvalue.resolved : decl.rvalue;\r\n            ctx.values.set(decl.lvalue.refName, this.interpExpression(rvalue, ctx));\r\n        }\r\n    }\r\n    interpExpression(expr, ctx) {\r\n        switch (expr.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME:\r\n                let name = expr;\r\n                if (ctx.values.has(name.refName)) {\r\n                    return ctx.values.get(name.refName);\r\n                }\r\n                else {\r\n                    throw \"Not possible: variable not defined\";\r\n                }\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.LITERAL:\r\n                return expr.value.value;\r\n            default:\r\n                return \"undefined\";\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL0ludGVycHJldGVyLnRzPzYwMWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkI7QUFXN0IsU0FBUyxRQUFRLENBQUMsR0FBWTtJQUMxQixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QyxHQUFHLElBQUksR0FBRyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDO0tBQ3ZDO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQixDQUFDO0FBRWMsTUFBTSxXQUFXO0lBQzVCLGFBQWEsQ0FBQyxJQUFvQjtRQUM5QixJQUFJLFNBQVMsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxFQUFpQixFQUFFLENBQUM7UUFDM0UsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2pELElBQUksS0FBSyxDQUFDLE1BQU07Z0JBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDL0Y7SUFDTCxDQUFDO0lBQ08sV0FBVyxDQUFDLEtBQW1CLEVBQUUsR0FBWTtRQUNqRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0wsQ0FBQztJQUNPLGVBQWUsQ0FBQyxJQUFzQixFQUFFLEdBQVk7UUFDeEQsUUFBUSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ25CLEtBQUssc0RBQXdCO2dCQUN6QixJQUFJLENBQUMsaUJBQWlCLENBQXFCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUM3RDtJQUNMLENBQUM7SUFDTyxpQkFBaUIsQ0FBQyxJQUF3QixFQUFFLEdBQVk7UUFDNUQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSywrQ0FBaUI7WUFBRSxNQUFNLGlDQUFpQyxDQUFDO1FBRXhGLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN2RSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBZSxJQUFJLENBQUMsTUFBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDMUY7SUFDTCxDQUFDO0lBQ08sZ0JBQWdCLENBQUMsSUFBdUIsRUFBRSxHQUFZO1FBQzFELFFBQVEsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuQixLQUFLLCtDQUFpQjtnQkFDbEIsSUFBSSxJQUFJLEdBQWdCLElBQUksQ0FBQztnQkFDN0IsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQzlCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDO2lCQUN4QztxQkFBTTtvQkFDSCxNQUFNLG9DQUFvQyxDQUFDO2lCQUM5QztZQUNMLEtBQUssa0RBQW9CO2dCQUNyQixPQUF3QixJQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUM5QztnQkFDSSxPQUFPLFdBQVcsQ0FBQztTQUMxQjtJQUNMLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9zY3VmdC9sYW5nL0ludGVycHJldGVyLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVNUIGZyb20gXCIuL0FzdFwiO1xyXG5cclxudHlwZSBWYWx1ZSA9IG51bWJlciB8IHN0cmluZyB8IGJvb2xlYW4gfCBJbnN0YW5jZTtcclxudHlwZSBDb250ZXh0ID0ge1xyXG4gICAgcGFyZW50Q3R4OiBDb250ZXh0IHwgdW5kZWZpbmVkO1xyXG4gICAgdmFsdWVzOiBNYXA8c3RyaW5nLCBWYWx1ZT47XHJcbn07XHJcbnR5cGUgSW5zdGFuY2UgPSB7XHJcbiAgICBjdHg6IENvbnRleHQ7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBwcmludEVudihjdHg6IENvbnRleHQpIHtcclxuICAgIGxldCBvdXQgPSBcIlwiO1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgY3R4LnZhbHVlcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICBvdXQgKz0ga2V5ICsgXCIgOjo6IFwiICsgdmFsdWUgKyBcIlxcblwiO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2cob3V0KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50ZXJwcmV0ZXIge1xyXG4gICAgaW50ZXJwUHJvZ3JhbShwcmdtOiBBU1QuQVNUUHJvZ3JhbSkge1xyXG4gICAgICAgIGxldCBnbG9iYWxDdHggPSB7IHBhcmVudEN0eDogdW5kZWZpbmVkLCB2YWx1ZXM6IG5ldyBNYXA8c3RyaW5nLCBWYWx1ZT4oKSB9O1xyXG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBwcmdtLnNjb3BlLnRhYmxlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUucnZhbHVlKSBnbG9iYWxDdHgudmFsdWVzLnNldChrZXksIHRoaXMuaW50ZXJwRXhwcmVzc2lvbih2YWx1ZS5ydmFsdWUsIGdsb2JhbEN0eCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgaW50ZXJwQmxvY2soYmxvY2s6IEFTVC5BU1RCbG9jaywgY3R4OiBDb250ZXh0KSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9jay5zdGF0ZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJwU3RhdGVtZW50KGJsb2NrLnN0YXRlbWVudHNbaV0sIGN0eCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBpbnRlcnBTdGF0ZW1lbnQoc3RtdDogQVNULkFTVFN0YXRlbWVudCwgY3R4OiBDb250ZXh0KSB7XHJcbiAgICAgICAgc3dpdGNoIChzdG10Lm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQVNULk5vZGVUeXBlLkRFQ0xBUkFUSU9OOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcnBEZWNsYXJhdGlvbig8QVNULkFTVERlY2xhcmF0aW9uPnN0bXQsIGN0eCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBpbnRlcnBEZWNsYXJhdGlvbihkZWNsOiBBU1QuQVNURGVjbGFyYXRpb24sIGN0eDogQ29udGV4dCkge1xyXG4gICAgICAgIGlmIChkZWNsLmx2YWx1ZS5ub2RlTmFtZSAhPT0gQVNULk5vZGVUeXBlLk5BTUUpIHRocm93IFwiVW5pbXBsZW1lbnRlZCBkZWNsYXJhdGlvbiB0aGluZ1wiO1xyXG5cclxuICAgICAgICBpZiAoZGVjbC5ydmFsdWUpIHtcclxuICAgICAgICAgICAgbGV0IHJ2YWx1ZSA9IGRlY2wucnZhbHVlLnJlc29sdmVkID8gZGVjbC5ydmFsdWUucmVzb2x2ZWQgOiBkZWNsLnJ2YWx1ZTtcclxuICAgICAgICAgICAgY3R4LnZhbHVlcy5zZXQoKDxBU1QuQVNUTmFtZT5kZWNsLmx2YWx1ZSkucmVmTmFtZSwgdGhpcy5pbnRlcnBFeHByZXNzaW9uKHJ2YWx1ZSwgY3R4KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBpbnRlcnBFeHByZXNzaW9uKGV4cHI6IEFTVC5BU1RFeHByZXNzaW9uLCBjdHg6IENvbnRleHQpOiBWYWx1ZSB7XHJcbiAgICAgICAgc3dpdGNoIChleHByLm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQVNULk5vZGVUeXBlLk5BTUU6XHJcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IDxBU1QuQVNUTmFtZT5leHByO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN0eC52YWx1ZXMuaGFzKG5hbWUucmVmTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3R4LnZhbHVlcy5nZXQobmFtZS5yZWZOYW1lKSE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiTm90IHBvc3NpYmxlOiB2YXJpYWJsZSBub3QgZGVmaW5lZFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIEFTVC5Ob2RlVHlwZS5MSVRFUkFMOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICg8QVNULkFTVExpdGVyYWw+ZXhwcikudmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scuft/lang/Interpreter.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Lexer.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Lexer.ts ***!
  \*********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Lexer\n/* harmony export */ });\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n\r\n\r\nclass Lexer {\r\n    constructor(sourceCode, errHandler) {\r\n        this.curIndex = 0;\r\n        this.curLine = 1;\r\n        this.curC = 0;\r\n        this.sourceCode = sourceCode;\r\n        this.err = _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler.fromHandler(\"----Lexer----\\n\", errHandler);\r\n    }\r\n    lex() {\r\n        let tokens = [];\r\n        let token = this.nextToken();\r\n        while (token.type !== _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN) {\r\n            tokens.push(token);\r\n            token = this.nextToken();\r\n        }\r\n        tokens.push(token);\r\n        return tokens;\r\n    }\r\n    getChar(index) {\r\n        return this.sourceCode.charAt(index);\r\n    }\r\n    getCurChar() {\r\n        return this.getChar(this.curIndex);\r\n    }\r\n    getNextChar() {\r\n        return this.getChar(this.curIndex + 1);\r\n    }\r\n    incrementCurIndex(amount) {\r\n        if (this.getCurChar() === \"\\n\") {\r\n            this.curLine++;\r\n            this.curC = -1;\r\n        }\r\n        this.curIndex += amount;\r\n        this.curC += amount;\r\n    }\r\n    nextToken() {\r\n        while (Lexer.isWhitespace(this.getCurChar())) {\r\n            this.incrementCurIndex(1);\r\n        }\r\n        if (this.curIndex >= this.sourceCode.length) {\r\n            let lastTkn = this.lastToken;\r\n            let tkn = this.grabToken(\"' '\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN);\r\n            if (lastTkn) {\r\n                tkn.line = lastTkn.line;\r\n                tkn.c = lastTkn.c + lastTkn.stringValue.length;\r\n            }\r\n            return tkn;\r\n        }\r\n        switch (this.getCurChar()) {\r\n            case \">\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\">=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_EQUAL_TKN);\r\n                }\r\n                else if (this.getNextChar() === \">\" && this.getChar(this.curIndex + 2) === \">\") {\r\n                    return this.grabToken(\">>>\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n                }\r\n                else if (this.getNextChar() === \">\") {\r\n                    return this.grabToken(\">>\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\">\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_TKN);\r\n                }\r\n            case \"<\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"<=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_EQUAL_TKN);\r\n                    case \"<\":\r\n                        return this.grabToken(\"<<\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_LEFT_TKN);\r\n                    case \"-\":\r\n                        return this.grabToken(\"<-\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.REVERSE_ARROW_TKN);\r\n                    default:\r\n                        return this.grabToken(\"<\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_TKN);\r\n                }\r\n            case \":\":\r\n                return this.grabToken(\":\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN);\r\n            case \"=\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"==\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_EQUALS_TKN);\r\n                    case \">\":\r\n                        return this.grabToken(\"=>\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN);\r\n                    default:\r\n                        return this.grabToken(\"=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IMMUTABLE_ASSIGNMENT_TKN);\r\n                }\r\n            case \"{\":\r\n                return this.grabToken(\"{\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN);\r\n            case \"}\":\r\n                return this.grabToken(\"}\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN);\r\n            case \"[\":\r\n                return this.grabToken(\"[\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_SQUARE_TKN);\r\n            case \"]\":\r\n                return this.grabToken(\"]\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_SQUARE_TKN);\r\n            case \"(\":\r\n                return this.grabToken(\"(\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN);\r\n            case \")\":\r\n                return this.grabToken(\")\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN);\r\n            case \"|\":\r\n                if (this.getNextChar() === \"|\") {\r\n                    return this.grabToken(\"||\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_OR_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"|\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_OR_TKN);\r\n                }\r\n            case \"&\":\r\n                if (this.getNextChar() === \"&\") {\r\n                    return this.grabToken(\"&&\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_AND_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"&\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_AND_TKN);\r\n                }\r\n            case \"$\":\r\n                if (this.getNextChar() === \"$\") {\r\n                    return this.grabToken(\"$$\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_XOR_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"$\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_XOR_TKN);\r\n                }\r\n            case \"!\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\"!=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_EQUALS_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"!\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_TKN);\r\n                }\r\n            case \"+\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"+=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_EQUALS_TKN);\r\n                    case \"+\":\r\n                        return this.grabToken(\"++\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_ADD_TKN);\r\n                    default:\r\n                        return this.grabToken(\"+\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_TKN);\r\n                }\r\n            case \"-\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"-=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_EQUALS_TKN);\r\n                    case \"-\":\r\n                        return this.grabToken(\"--\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_SUBTR_TKN);\r\n                    case \">\":\r\n                        return this.grabToken(\"->\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN);\r\n                    default:\r\n                        return this.grabToken(\"-\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN);\r\n                }\r\n            case \"*\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"*=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MULT_EQUALS_TKN);\r\n                    case \"/\":\r\n                        this.err.atPoint_PANIC(\"Unclosed block comment\", this.curLine, this.curC);\r\n                    default:\r\n                        return this.grabToken(\"*\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MULT_TKN);\r\n                }\r\n            case \"/\":\r\n                switch (this.getNextChar()) {\r\n                    case \"/\":\r\n                        this.consumeSingleLineComment();\r\n                        return this.nextToken();\r\n                    case \"*\":\r\n                        this.consumeBlockComment();\r\n                        return this.nextToken();\r\n                    case \"=\":\r\n                        return this.grabToken(\"/=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_DIV_EQUALS_TKN);\r\n                    default:\r\n                        return this.grabToken(\"/\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_DIVIDE_TKN);\r\n                }\r\n            case \"^\":\r\n                return this.grabToken(\"^\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_CARROT_TKN);\r\n            case \"%\":\r\n                return this.grabToken(\"%\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MODULUS_TKN);\r\n            case \"~\":\r\n                if (this.getNextChar() == \"=\") {\r\n                    return this.grabToken(\"~=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"~\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_NOT_TKN);\r\n                }\r\n            case \".\":\r\n                if (this.getNextChar() === \".\" && this.getChar(this.curIndex + 2) === \".\") {\r\n                    return this.grabToken(\"...\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\".\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN);\r\n                }\r\n            case \"\\\\\":\r\n                return this.grabToken(\"\\\\\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN);\r\n            case \",\":\r\n                return this.grabToken(\",\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN);\r\n            case \";\":\r\n                return this.grabToken(\";\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN);\r\n            case '\"':\r\n                return this.grabStringLiteral();\r\n            default:\r\n                if (Lexer.isLetter(this.getCurChar())) {\r\n                    return this.grabIdentifier();\r\n                }\r\n                else if (Lexer.isNumber(this.getCurChar())) {\r\n                    return this.grabNumericLiteral();\r\n                }\r\n                else if (this.getCurChar() === \"#\") {\r\n                    return this.grabDirective();\r\n                }\r\n                else {\r\n                    let unknown = this.grabToken(this.getCurChar(), _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n                    unknown.value = this.getCurChar();\r\n                    return unknown;\r\n                }\r\n        }\r\n    }\r\n    grabToken(str, type) {\r\n        this.incrementCurIndex(str.length);\r\n        return this.makeToken(str, type);\r\n    }\r\n    makeToken(str, type) {\r\n        let tkn = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(str, this.curLine, this.curC - str.length, type);\r\n        this.lastToken = tkn;\r\n        return tkn;\r\n    }\r\n    grabNumericLiteral() {\r\n        let stringValue = \"\";\r\n        let base = 10;\r\n        if (this.getCurChar() === \"0\") {\r\n            switch (this.getNextChar()) {\r\n                case \"b\":\r\n                    base = 2;\r\n                    stringValue = \"0b\";\r\n                    this.incrementCurIndex(2);\r\n                    break;\r\n                case \"o\":\r\n                    base = 8;\r\n                    stringValue = \"0o\";\r\n                    this.incrementCurIndex(2);\r\n                    break;\r\n                case \"x\":\r\n                    base = 16;\r\n                    stringValue = \"0x\";\r\n                    this.incrementCurIndex(2);\r\n                    break;\r\n            }\r\n        }\r\n        let number = 0;\r\n        let ch = this.getCurChar();\r\n        let point = false;\r\n        let divideBy = 1;\r\n        while (Lexer.isNumber(ch) || ch === \".\" || (base == 16 && Lexer.isHexLetter(ch))) {\r\n            stringValue += ch;\r\n            if (ch !== \"_\") {\r\n                if (ch === \".\") {\r\n                    if (point === false) {\r\n                        point = true;\r\n                        this.incrementCurIndex(1);\r\n                        ch = this.getCurChar();\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        this.err.atPoint_PANIC('Number has too many decimal points \"' + number / divideBy + '.\"', this.curLine, this.curC);\r\n                    }\r\n                }\r\n                let val = Lexer.toInt(ch);\r\n                if (val < base) {\r\n                    number = base * number + val;\r\n                    if (point)\r\n                        divideBy = divideBy * base;\r\n                }\r\n                else {\r\n                    this.err.atPoint_PANIC(ch + \" is an invalid digit symbol in base \" + base, this.curLine, this.curC);\r\n                }\r\n            }\r\n            this.incrementCurIndex(1);\r\n            ch = this.getCurChar();\r\n        }\r\n        let value = number / divideBy;\r\n        let tkn = this.makeToken(stringValue, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN);\r\n        tkn.value = value;\r\n        return tkn;\r\n    }\r\n    grabStringLiteral() {\r\n        this.grabToken('\"', _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOUBLE_QUOTE_TKN);\r\n        let str = \"\";\r\n        let ch = this.getCurChar();\r\n        let escapeChar = false;\r\n        while (this.curIndex < this.sourceCode.length && ch !== \"\\n\" && (escapeChar || ch !== '\"')) {\r\n            if (!escapeChar || ch === '\"') {\r\n                str += ch;\r\n            }\r\n            if (ch === \"\\\\\") {\r\n                escapeChar = true;\r\n            }\r\n            else {\r\n                escapeChar = false;\r\n            }\r\n            this.incrementCurIndex(1);\r\n            ch = this.getCurChar();\r\n        }\r\n        if (this.curIndex >= this.sourceCode.length || ch === \"\\n\") {\r\n            this.err.atPoint_PANIC(\"Unterminated string literal\", this.curLine, this.curC - str.length - 1);\r\n        }\r\n        this.grabToken('\"', _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOUBLE_QUOTE_TKN);\r\n        let tkn = this.makeToken('\"' + str + '\"', _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN);\r\n        tkn.value = str;\r\n        return tkn;\r\n    }\r\n    grabDirective() {\r\n        console.assert(this.getCurChar() === \"#\", \"Directives must start with #\");\r\n        this.incrementCurIndex(1);\r\n        let str = \"#\";\r\n        let ch = this.getCurChar();\r\n        while (Lexer.isLetter(ch) || Lexer.isNumber(ch)) {\r\n            this.incrementCurIndex(1);\r\n            str = str + ch;\r\n            ch = this.getCurChar();\r\n        }\r\n        switch (str) {\r\n            case \"#range\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.HASH_RANGE_TKN);\r\n            default:\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n        }\r\n    }\r\n    grabIdentifier() {\r\n        let str = \"\";\r\n        let ch = this.getCurChar();\r\n        while (Lexer.isLetter(ch) || Lexer.isNumber(ch)) {\r\n            this.incrementCurIndex(1);\r\n            str = str + ch;\r\n            ch = this.getCurChar();\r\n        }\r\n        switch (str) {\r\n            case \"type\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN);\r\n            case \"module\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN);\r\n            case \"with\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN);\r\n            case \"if\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN);\r\n            case \"else\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELSE_TKN);\r\n            case \"while\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WHILE_TKN);\r\n            case \"for\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.FOR_TKN);\r\n            case \"in\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IN_TKN);\r\n            case \"break\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BREAK_TKN);\r\n            case \"continue\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONTINUE_TKN);\r\n            case \"true\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN);\r\n            case \"false\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN);\r\n            case \"mut\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUT_CAST_TKN);\r\n            case \"const\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_CAST_TKN);\r\n            case \"void\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.VOID_TYPE_TKN);\r\n            case \"num\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN);\r\n            case \"string\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_TYPE_TKN);\r\n            case \"bool\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BOOL_TYPE_TKN);\r\n            case \"return\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RETURN_TKN);\r\n            default:\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN);\r\n        }\r\n    }\r\n    consumeSingleLineComment() {\r\n        this.incrementCurIndex(2);\r\n        while (this.curIndex < this.sourceCode.length && this.getCurChar() !== \"\\n\") {\r\n            this.incrementCurIndex(1);\r\n        }\r\n    }\r\n    consumeBlockComment() {\r\n        let beginLine = this.curLine;\r\n        let beginC = this.curC;\r\n        this.incrementCurIndex(2);\r\n        while (this.curIndex < this.sourceCode.length && !(this.getCurChar() === \"*\" && this.getNextChar() === \"/\")) {\r\n            this.incrementCurIndex(1);\r\n        }\r\n        if (this.curIndex >= this.sourceCode.length) {\r\n            this.err\r\n                .atPoint(\"Beginning of the block comment is as follows\", beginLine, beginC)\r\n                .atPoint_PANIC(\"Unterminated block comment at the end of the file. Expected */\", this.curLine, this.curC);\r\n        }\r\n        this.incrementCurIndex(2);\r\n    }\r\n    static isWhitespace(ch) {\r\n        return ch === \" \" || ch === \"\\t\" || ch === \"\\r\" || ch === \"\\n\";\r\n    }\r\n    static isLetter(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 65 && n < 91) || (n >= 97 && n < 123) || ch === \"'\" || ch === \"_\";\r\n    }\r\n    static isNumber(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 48 && n <= 57) || ch === \"_\";\r\n    }\r\n    static isHexLetter(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 65 && n < 71) || (n >= 97 && n < 103);\r\n    }\r\n    static toInt(ch) {\r\n        if (Lexer.isNumber(ch))\r\n            return parseInt(ch);\r\n        if (Lexer.isHexLetter(ch)) {\r\n            let val = ch.charCodeAt(0) - 65 + 10;\r\n            if (val <= 15)\r\n                return val;\r\n            return val - (97 - 65);\r\n        }\r\n        throw \"String is not assignable to any int value\";\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Lexer.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Log.ts":
/*!*******************************!*\
  !*** ./src/scuft/lang/Log.ts ***!
  \*******************************/
/*! namespace exports */
/*! export applyFmt [provided] [no usage info] [missing usage info prevents renaming] */
/*! export bar [provided] [no usage info] [missing usage info prevents renaming] */
/*! export merge [provided] [no usage info] [missing usage info prevents renaming] */
/*! export space [provided] [no usage info] [missing usage info prevents renaming] */
/*! export tab [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyFmt\": () => /* binding */ applyFmt,\n/* harmony export */   \"merge\": () => /* binding */ merge,\n/* harmony export */   \"space\": () => /* binding */ space,\n/* harmony export */   \"tab\": () => /* binding */ tab,\n/* harmony export */   \"bar\": () => /* binding */ bar\n/* harmony export */ });\nconst DEFAULT_FMT = \"color: #7D7C84;\";\r\nfunction applyFmt(str, fmt, format = DEFAULT_FMT) {\r\n    fmt.push(format);\r\n    fmt.push(DEFAULT_FMT);\r\n    return \"%c\" + str + \"%c\";\r\n}\r\nfunction merge(firstStr, secondStr) {\r\n    for (let i = 0; i < secondStr.length; i++) {\r\n        firstStr.push(secondStr[i]);\r\n    }\r\n    return firstStr;\r\n}\r\nfunction space(amount, strA) {\r\n    const prefix = \" \".repeat(amount);\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = prefix + strA[i];\r\n    }\r\n    return strA;\r\n}\r\nfunction tab(strA) {\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = \"    \" + strA[i];\r\n    }\r\n    return strA;\r\n}\r\nfunction bar(strA) {\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = \" |  \" + strA[i];\r\n    }\r\n    return strA;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL0xvZy50cz9hNjIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUM7QUFFL0IsU0FBUyxRQUFRLENBQUMsR0FBVyxFQUFFLEdBQWEsRUFBRSxNQUFNLEdBQUcsV0FBVztJQUNyRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEIsT0FBTyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztBQUM3QixDQUFDO0FBRU0sU0FBUyxLQUFLLENBQUMsUUFBa0IsRUFBRSxTQUFtQjtJQUN6RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN2QyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQy9CO0lBQ0QsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUVNLFNBQVMsS0FBSyxDQUFDLE1BQWMsRUFBRSxJQUFjO0lBQ2hELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRU0sU0FBUyxHQUFHLENBQUMsSUFBYztJQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNsQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFFTSxTQUFTLEdBQUcsQ0FBQyxJQUFjO0lBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzlCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQyIsImZpbGUiOiIuL3NyYy9zY3VmdC9sYW5nL0xvZy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERFRkFVTFRfRk1UID0gXCJjb2xvcjogIzdEN0M4NDtcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseUZtdChzdHI6IHN0cmluZywgZm10OiBzdHJpbmdbXSwgZm9ybWF0ID0gREVGQVVMVF9GTVQpOiBzdHJpbmcge1xyXG4gICAgZm10LnB1c2goZm9ybWF0KTtcclxuICAgIGZtdC5wdXNoKERFRkFVTFRfRk1UKTtcclxuICAgIHJldHVybiBcIiVjXCIgKyBzdHIgKyBcIiVjXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZShmaXJzdFN0cjogc3RyaW5nW10sIHNlY29uZFN0cjogc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlY29uZFN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGZpcnN0U3RyLnB1c2goc2Vjb25kU3RyW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmaXJzdFN0cjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNwYWNlKGFtb3VudDogbnVtYmVyLCBzdHJBOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHByZWZpeCA9IFwiIFwiLnJlcGVhdChhbW91bnQpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJBLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgc3RyQVtpXSA9IHByZWZpeCArIHN0ckFbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyQTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRhYihzdHJBOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyQS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHN0ckFbaV0gPSBcIiAgICBcIiArIHN0ckFbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyQTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJhcihzdHJBOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyQS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHN0ckFbaV0gPSBcIiB8ICBcIiArIHN0ckFbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyQTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scuft/lang/Log.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Parser.ts":
/*!**********************************!*\
  !*** ./src/scuft/lang/Parser.ts ***!
  \**********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Parser\n/* harmony export */ });\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Scope */ \"./src/scuft/lang/Scope.ts\");\n\r\n\r\n\r\n\r\nclass Parser {\r\n    constructor(lexer, errHandler) {\r\n        this.tokenQueue = [];\r\n        this.precedence = new Map();\r\n        this.LOWEST_PRECEDENCE = 0;\r\n        this.HIGHEST_PRECEDENCE = 100;\r\n        this.lexer = lexer;\r\n        this.err = _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler.fromHandler(\"----Parser----\\n\", errHandler);\r\n        this.initPrecedenceMap();\r\n    }\r\n    throwAssertError(actualTkn, expectedTkn, msg) {\r\n        if (msg) {\r\n            this.err.atAfterLastToken(\"Expected \" + expectedTkn + \" but found a different token. \" + msg, actualTkn);\r\n        }\r\n        else {\r\n            this.err.atAfterLastToken(\"Expected \" + expectedTkn + \" but found a different token\", actualTkn);\r\n        }\r\n        let actualTknStr = actualTkn.stringValue;\r\n        if (actualTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN) {\r\n            actualTknStr = \"'\" + actualTkn.stringValue + \"'\";\r\n        }\r\n        this.err.atWholeToken_PANIC(actualTknStr + \" is not permitted here\", actualTkn);\r\n    }\r\n    assertIdentifier(expectedTkn, msg) {\r\n        let actualTkn = this.peekToken();\r\n        if (actualTkn.type !== _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN) {\r\n            this.throwAssertError(actualTkn, expectedTkn, msg);\r\n        }\r\n    }\r\n    assertToken(type, msg) {\r\n        let actualTkn = this.peekToken();\r\n        let expectedTkn = (0,_Token__WEBPACK_IMPORTED_MODULE_1__.tokenToStr)(type);\r\n        if (actualTkn.type !== type) {\r\n            this.throwAssertError(actualTkn, expectedTkn, msg);\r\n        }\r\n    }\r\n    lookAheadToken(amount) {\r\n        console.assert(amount > 0, \"Must only look ahead by amount greater than 0. Instead got %s\", amount);\r\n        for (let i = this.tokenQueue.length; i < amount; i++) {\r\n            this.tokenQueue.push(this.lexer.nextToken());\r\n        }\r\n        return this.tokenQueue[amount - 1];\r\n    }\r\n    checkAheadToken(amount, type) {\r\n        return this.lookAheadToken(amount).type === type;\r\n    }\r\n    peekToken() {\r\n        return this.lookAheadToken(1);\r\n    }\r\n    checkToken(type) {\r\n        return this.peekToken().type === type;\r\n    }\r\n    nextToken() {\r\n        if (this.tokenQueue.length > 0) {\r\n            return this.tokenQueue.shift();\r\n        }\r\n        else {\r\n            return this.lexer.nextToken();\r\n        }\r\n    }\r\n    parseProgram() {\r\n        let program = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTProgram(this.peekToken());\r\n        program.scope = _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope.newGlobalScope();\r\n        program.withModules = [];\r\n        program.declarations = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN)) {\r\n                program.withModules.push(this.parseWith(program.scope));\r\n            }\r\n            else {\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err.atToken_PANIC(\"Statements are not allowed to exist freely in global scope\", this.peekToken());\r\n                }\r\n                let declaration = this.parseDeclaration(program.scope);\r\n                program.declarations.push(declaration);\r\n            }\r\n        }\r\n        return program;\r\n    }\r\n    parseBlock(blockScope) {\r\n        let block = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBlock(this.peekToken());\r\n        if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN)) {\r\n            let singleLineBlock = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBlock(this.peekToken());\r\n            singleLineBlock.scope = blockScope;\r\n            singleLineBlock.statements = [];\r\n            singleLineBlock.statements.push(this.getStatement(singleLineBlock));\r\n            singleLineBlock.endToken = singleLineBlock.statements[0].endToken;\r\n            return singleLineBlock;\r\n        }\r\n        this.nextToken();\r\n        block.scope = blockScope;\r\n        block.withModules = [];\r\n        block.statements = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (block.hasJump) {\r\n                let lastStmt = block.statements[block.statements.length - 1];\r\n                if (lastStmt.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.IF) {\r\n                    this.err\r\n                        .atNode(\"Error after if statement starting here\", lastStmt)\r\n                        .atToken(\"End of block reached after the }\", lastStmt.endToken)\r\n                        .atWholeToken_PANIC(\"If statement has no leaks. The following statement is unreachable and not allowed by this language\", this.peekToken());\r\n                }\r\n                else {\r\n                    this.err\r\n                        .atWholeNode(\"End of block reached here\", lastStmt)\r\n                        .atWholeToken_PANIC(\"Statements following a \" +\r\n                        block.statements[block.statements.length - 1].locToken.stringValue +\r\n                        \" are unreachable and not allowed by this language\", this.peekToken());\r\n                }\r\n            }\r\n            if (this.peekToken().type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN) {\r\n                block.withModules.push(this.parseWith(blockScope));\r\n            }\r\n            else {\r\n                let statement = this.getStatement(block);\r\n                if (statement.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.DECLARATION) {\r\n                    let decl = statement;\r\n                    if (decl.rvalue) {\r\n                        switch (decl.rvalue.nodeName) {\r\n                            case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.MODULE:\r\n                                this.err\r\n                                    .atNode(\"Error in block\", block)\r\n                                    .atNode_PANIC(\"Module declaration is not allowed here\", decl);\r\n                            case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.TYPE_DEF:\r\n                                this.err\r\n                                    .atNode(\"Error in block\", block)\r\n                                    .atNode_PANIC(\"Type definition is not allowed here\", decl);\r\n                        }\r\n                    }\r\n                }\r\n                block.statements.push(statement);\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atNode(\"Error in block\", block)\r\n                .atAfterLastToken_PANIC(\"Unterminated block at end of file. Expected closing }\", this.peekToken());\r\n        }\r\n        else {\r\n            block.endToken = this.nextToken();\r\n        }\r\n        return block;\r\n    }\r\n    getStatement(block) {\r\n        let blockScope = block.scope;\r\n        switch (this.peekToken().type) {\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BREAK_TKN:\r\n                let breakStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBreak(this.nextToken());\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of break statements\");\r\n                breakStatement.endToken = this.nextToken();\r\n                block.hasJump = true;\r\n                let enclosedFuncBreak = blockScope.getEnclosingScope(_Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.FUNC_SCOPE);\r\n                let enclosedLoopBreak = blockScope.getEnclosingScope(_Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.LOOP_SCOPE);\r\n                if (!enclosedLoopBreak) {\r\n                    this.err.atWholeNode_PANIC(\"Break statement must be used within a loop\", breakStatement);\r\n                }\r\n                if (enclosedFuncBreak && enclosedFuncBreak.scopeID > enclosedLoopBreak.scopeID) {\r\n                    this.err.atWholeNode_PANIC(\"Can't break out of a function using a break statement\", breakStatement);\r\n                }\r\n                return breakStatement;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONTINUE_TKN:\r\n                let continueStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTContinue(this.nextToken());\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of continue statements\");\r\n                continueStatement.endToken = this.nextToken();\r\n                block.hasJump = true;\r\n                let enclosedFuncCont = blockScope.getEnclosingScope(_Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.FUNC_SCOPE);\r\n                let enclosedLoopCont = blockScope.getEnclosingScope(_Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.LOOP_SCOPE);\r\n                if (!enclosedLoopCont) {\r\n                    this.err.atWholeNode_PANIC(\"Continue statement must be used within a loop\", continueStatement);\r\n                }\r\n                if (enclosedFuncCont && enclosedFuncCont.scopeID > enclosedLoopCont.scopeID) {\r\n                    this.err.atWholeNode_PANIC(\"Can't continue out of a function using a continue statement\", continueStatement);\r\n                }\r\n                return continueStatement;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RETURN_TKN:\r\n                let returnStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTReturn(this.nextToken());\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                    returnStatement.returnValue = this.parseExpression(blockScope);\r\n                }\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of return statements\");\r\n                returnStatement.endToken = this.nextToken();\r\n                block.hasJump = true;\r\n                block.hasReturn = true;\r\n                return returnStatement;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN:\r\n                let ifStmt = this.parseIf(blockScope);\r\n                block.hasJump = ifStmt.hasJump;\r\n                block.hasReturn = ifStmt.hasReturn;\r\n                return ifStmt;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WHILE_TKN:\r\n                return this.parseWhile(blockScope);\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.FOR_TKN:\r\n                return this.parseFor(blockScope);\r\n            default:\r\n                let refName = this.parseExpression(blockScope);\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN) &&\r\n                    !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN) &&\r\n                    !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IMMUTABLE_ASSIGNMENT_TKN) &&\r\n                    !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN)) {\r\n                    this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"This expression must end with a semi-colon\");\r\n                    this.nextToken();\r\n                    return refName;\r\n                }\r\n                else {\r\n                    return this.parseDeclarationFromName(refName, blockScope);\r\n                }\r\n        }\r\n    }\r\n    parseWith(scope) {\r\n        this.nextToken();\r\n        this.assertIdentifier(\"a module name\", \"With keyword must be followed by a name reference to a module\");\r\n        let withModuleReference = this.parseExpression(scope);\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of with statements\");\r\n        this.nextToken();\r\n        return withModuleReference;\r\n    }\r\n    parseIf(scope) {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN, \"If statement must start with if keyword\");\r\n        let ifStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTIf(this.nextToken());\r\n        let ifConseqScope = new _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope(scope);\r\n        ifConseqScope.scopeType = _Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.BRANCH_SCOPE;\r\n        ifStatement.condition = this.parseExpression(ifConseqScope);\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n            this.err.atToken_PANIC(\"Unbalanced parenthesis. Expected {\", this.peekToken());\r\n        }\r\n        ifStatement.consequence = this.parseBlock(ifConseqScope);\r\n        ifStatement.endToken = ifStatement.consequence.endToken;\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELSE_TKN)) {\r\n            this.nextToken();\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN)) {\r\n                ifStatement.alternative = this.parseIf(scope);\r\n            }\r\n            else if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n                this.err\r\n                    .atNode(\"Error in if statement\", ifStatement)\r\n                    .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected if keyword or {\", this.peekToken());\r\n            }\r\n            else {\r\n                let alternateScope = new _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope(scope);\r\n                alternateScope.scopeType = _Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.BRANCH_SCOPE;\r\n                ifStatement.alternative = this.parseBlock(alternateScope);\r\n            }\r\n            ifStatement.hasJump = ifStatement.consequence.hasJump && ifStatement.alternative.hasJump;\r\n            ifStatement.hasReturn = ifStatement.consequence.hasReturn && ifStatement.alternative.hasReturn;\r\n            ifStatement.endToken = ifStatement.alternative.endToken;\r\n        }\r\n        return ifStatement;\r\n    }\r\n    parseWhile(scope) {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WHILE_TKN, \"While loop must start with while keyword\");\r\n        let whileStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTWhile(this.nextToken());\r\n        let whileScope = new _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope(scope);\r\n        whileScope.scopeType = _Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.LOOP_SCOPE;\r\n        whileStatement.condition = this.parseExpression(whileScope);\r\n        whileStatement.block = this.parseBlock(whileScope);\r\n        return whileStatement;\r\n    }\r\n    parseFor(scope) {\r\n        let forScope = new _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope(scope);\r\n        forScope.scopeType = _Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.LOOP_SCOPE;\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.FOR_TKN, \"For loop must start with for keyword\");\r\n        let forStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTFor(this.nextToken());\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN)) {\r\n            this.err.atToken_PANIC(\"For loops don't require encapsulating parenthesis in this language\", this.peekToken());\r\n        }\r\n        switch (this.lookAheadToken(2).type) {\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN:\r\n                this.assertIdentifier(\"a variable reference to an iterable\");\r\n                forStatement.iterableName = this.parseExpression(forScope);\r\n                break;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN:\r\n                let itemDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n                forStatement.itemParamDec = itemDec;\r\n                itemDec.inScope = forScope;\r\n                itemDec.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err.atToken_PANIC(\"Expected a new 'item' variable declaration but got an expression instead\", this.peekToken());\r\n                }\r\n                itemDec.lvalue.refName = this.nextToken().stringValue;\r\n                forScope.table.set(itemDec.lvalue.refName, itemDec);\r\n                this.nextToken();\r\n                let indexDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n                forStatement.indexParamDec = indexDec;\r\n                indexDec.inScope = forScope;\r\n                indexDec.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n                indexDec.type = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeLiteral(this.peekToken());\r\n                indexDec.type.type = _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN;\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err.atToken_PANIC(\"Expected a new 'index' variable declaration but got an expression instead\", this.peekToken());\r\n                }\r\n                indexDec.lvalue.refName = this.nextToken().stringValue;\r\n                if (itemDec.lvalue.refName === indexDec.lvalue.refName) {\r\n                    this.err\r\n                        .atNode(\"Duplicate variable declaration in for loop\", itemDec)\r\n                        .atNode_PANIC(\"Variable name of item and index variable must be different\", indexDec);\r\n                }\r\n                forScope.table.set(itemDec.lvalue.refName, itemDec);\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IN_TKN);\r\n                this.nextToken();\r\n                this.assertIdentifier(\"a variable reference to an iterable\");\r\n                forStatement.iterableName = this.parseExpression(forScope);\r\n                break;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IN_TKN:\r\n                let inItemDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n                forStatement.itemParamDec = inItemDec;\r\n                inItemDec.inScope = forScope;\r\n                inItemDec.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err.atToken_PANIC(\"Expected a new 'item' variable declaration but got an expression instead\", this.peekToken());\r\n                }\r\n                inItemDec.lvalue.refName = this.nextToken().stringValue;\r\n                forScope.table.set(inItemDec.lvalue.refName, inItemDec);\r\n                this.nextToken();\r\n                if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.HASH_RANGE_TKN)) {\r\n                    this.nextToken();\r\n                    let isLowerBoundExclusive = false;\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN)) {\r\n                        isLowerBoundExclusive = true;\r\n                    }\r\n                    else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_SQUARE_TKN)) {\r\n                        this.err.atToken_PANIC(\"Expected either a [ or a (\", this.peekToken());\r\n                    }\r\n                    this.nextToken();\r\n                    forStatement.lowerBound = this.parseExpression(forScope);\r\n                    if (isLowerBoundExclusive) {\r\n                        let expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(forStatement.lowerBound.locToken);\r\n                        expression.lvalue = forStatement.lowerBound;\r\n                        expression.operation = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(\"+\", forStatement.lowerBound.locToken.line, forStatement.lowerBound.locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_TKN);\r\n                        expression.rvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTLiteral(forStatement.lowerBound.locToken);\r\n                        expression.rvalue.value = _Token__WEBPACK_IMPORTED_MODULE_1__.Token.fromType(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN, expression.rvalue.locToken);\r\n                        expression.rvalue.value.value = 1;\r\n                        forStatement.lowerBound = expression;\r\n                        expression.endToken = expression.rvalue.locToken;\r\n                    }\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_SQUARE_TKN) || this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                        this.err.atToken_PANIC(\"For loop range requires two expressions separated by a comma\", this.peekToken());\r\n                    }\r\n                    this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN, \"Invalid declaration of a for loop range\");\r\n                    this.nextToken();\r\n                    forStatement.upperBound = this.parseExpression(forScope);\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                        let expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(forStatement.upperBound.locToken);\r\n                        expression.lvalue = forStatement.upperBound;\r\n                        expression.operation = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(\"-\", forStatement.upperBound.locToken.line, forStatement.upperBound.locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN);\r\n                        expression.rvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTLiteral(forStatement.upperBound.locToken);\r\n                        expression.rvalue.value = _Token__WEBPACK_IMPORTED_MODULE_1__.Token.fromType(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN, expression.rvalue.locToken);\r\n                        expression.rvalue.value.value = 1;\r\n                        forStatement.upperBound = expression;\r\n                        expression.endToken = expression.rvalue.locToken;\r\n                    }\r\n                    else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_SQUARE_TKN)) {\r\n                        this.err.atToken_PANIC(\"Expected either a ] or a )\", this.peekToken());\r\n                    }\r\n                    this.nextToken();\r\n                    break;\r\n                }\r\n                else {\r\n                    this.assertIdentifier(\"a variable reference to an iterable\", \"A potential fix is to use #range after the in keyword to denote iteration over a range\");\r\n                    forStatement.iterableName = this.parseExpression(forScope);\r\n                    break;\r\n                }\r\n            default:\r\n                this.err.atToken_PANIC(\"Invalid for loop. Expected a single variable name but got an expression instead\", this.peekToken());\r\n        }\r\n        forStatement.block = this.parseBlock(forScope);\r\n        return forStatement;\r\n    }\r\n    parseDeclaration(scope) {\r\n        return this.parseDeclarationFromName(this.parseExpression(scope), scope);\r\n    }\r\n    parseDeclarationFromName(refName, scope) {\r\n        let decl = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(refName.locToken);\r\n        decl.inScope = scope;\r\n        decl.lvalue = refName;\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN)) {\r\n            this.nextToken();\r\n            decl.type = this.parseExpression(scope);\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN) ||\r\n            this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IMMUTABLE_ASSIGNMENT_TKN) ||\r\n            this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN)) {\r\n            decl.accessAssignment = this.nextToken();\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN)) {\r\n                decl.rvalue = this.parseTypeDefinition(scope);\r\n                decl.rvalue.typeDecRef = decl;\r\n                if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                    this.err\r\n                        .atNode(\"Error in type definition\", refName)\r\n                        .atToken_PANIC(\"Semi-colons are not accepted directly after the end bracket of a type definition\", this.peekToken());\r\n                }\r\n            }\r\n            else {\r\n                decl.rvalue = this.parseExpression(scope);\r\n                if (decl.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.MODULE) {\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                        this.err\r\n                            .atNode(\"Error in module\", refName)\r\n                            .atToken_PANIC(\"Semi-colons are not accepted directly after the end bracket of a module declaration\", this.peekToken());\r\n                    }\r\n                    decl.rvalue.moduleDecRef = decl;\r\n                }\r\n                else if (decl.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.FUNCTION) {\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                        this.err\r\n                            .atNode(\"Error in function declaration\", refName)\r\n                            .atToken_PANIC(\"Semi-colons are not accepted directly after the end bracket of a function declaration\", this.peekToken());\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n                        this.err\r\n                            .atWholeNode(\"Error in expression\", decl.rvalue)\r\n                            .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected an operator, operand, or terminating token like semi-colon\", this.peekToken());\r\n                    }\r\n                    else if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                        this.err.atToken_PANIC(\"Unbalanced parenthesis. Expected a semi-colon\", this.peekToken());\r\n                    }\r\n                    else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                        this.err\r\n                            .atNode(\"Error in declaration \", refName)\r\n                            .atAfterLastToken_PANIC(\"Expected a semi-colon at the end of the declaration but got \" +\r\n                            this.peekToken().stringValue +\r\n                            \" instead\", this.peekToken());\r\n                    }\r\n                    this.nextToken();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of variable declarations\");\r\n            this.nextToken();\r\n        }\r\n        console.assert(decl.type || decl.rvalue, \"This should be evaluted as an expression statement, not a declaration\");\r\n        if (refName.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.NAME) {\r\n            if (!scope.table.has(refName.refName)) {\r\n                let isFunc = decl.rvalue && decl.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.FUNCTION;\r\n                if (isFunc && decl.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN) {\r\n                    this.err\r\n                        .atNode(\"Function can't be assigned using mutable assignment\", decl)\r\n                        .addNote_PANIC(\"Functions can only be assigned to a variable using = or =>\");\r\n                }\r\n                scope.table.set(refName.refName, decl);\r\n                return decl;\r\n            }\r\n        }\r\n        decl.isAssignment = true;\r\n        return decl;\r\n    }\r\n    parseModule(scope) {\r\n        let moduleScope = new _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope(scope);\r\n        moduleScope.scopeType = _Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.MODULE_SCOPE;\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN, \"Module must start with module keyword\");\r\n        let module = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTModule(this.nextToken());\r\n        module.scope = moduleScope;\r\n        module.withModules = [];\r\n        module.declarations = [];\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN);\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN)) {\r\n                module.withModules.push(this.parseWith(moduleScope));\r\n            }\r\n            else {\r\n                module.declarations.push(this.parseDeclaration(moduleScope));\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atNode(\"Error in module\", module)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected closing {\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        return module;\r\n    }\r\n    parseTypeDefinition(scope) {\r\n        let typeDefScope = new _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope(scope);\r\n        typeDefScope.scopeType = _Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.TYPE_SCOPE;\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN, \"Type definition must start with type keyword\");\r\n        let typeDef = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeDefinition(this.nextToken());\r\n        typeDef.scope = typeDefScope;\r\n        typeDef.withModules = [];\r\n        typeDef.declarations = [];\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN, \"Type definition must be enclosed in curly brackets\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN)) {\r\n                typeDef.withModules.push(this.parseWith(typeDefScope));\r\n            }\r\n            else {\r\n                typeDef.declarations.push(this.parseDeclaration(typeDefScope));\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atNode(\"Error in type definition\", typeDef)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected closing {\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        return typeDef;\r\n    }\r\n    tryParseFunction(scope) {\r\n        let parensAndIdentifier = this.checkAheadToken(1, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN) && this.checkAheadToken(2, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN);\r\n        if (!((parensAndIdentifier &&\r\n            (this.checkAheadToken(3, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN) ||\r\n                this.checkAheadToken(3, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN))) ||\r\n            (this.checkAheadToken(1, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN) &&\r\n                this.checkAheadToken(2, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)))) {\r\n            if (parensAndIdentifier &&\r\n                (this.checkAheadToken(3, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN) ||\r\n                    this.checkAheadToken(3, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IMMUTABLE_ASSIGNMENT_TKN))) {\r\n                this.err.atToken_PANIC(\"Default function parameters can only be mutable assigned with ~=\", this.lookAheadToken(3));\r\n            }\r\n            return undefined;\r\n        }\r\n        let functionScope = new _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope(scope);\r\n        functionScope.scopeType = _Scope__WEBPACK_IMPORTED_MODULE_3__.ScopeType.FUNC_SCOPE;\r\n        let func = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTFunction(this.peekToken());\r\n        func.paramDeclaration = [];\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN, \"Function declaration must specify parameters or use ()\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            let paramDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n            paramDec.inScope = functionScope;\r\n            this.assertIdentifier(\"a parameter name\", \"Function parameters must declare variable names\");\r\n            paramDec.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n            paramDec.lvalue.refName = this.nextToken().stringValue;\r\n            let otherDec = functionScope.table.get(paramDec.lvalue.refName);\r\n            if (otherDec) {\r\n                this.err\r\n                    .atNode(\"Found duplicate name for parameter declaration\", paramDec)\r\n                    .atNode_PANIC(\"Other duplicate parameter here\", otherDec);\r\n            }\r\n            else {\r\n                functionScope.table.set(paramDec.lvalue.refName, paramDec);\r\n            }\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN)) {\r\n                this.nextToken();\r\n                paramDec.type = this.parseExpression(functionScope);\r\n            }\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN)) {\r\n                paramDec.accessAssignment = this.nextToken();\r\n                paramDec.rvalue = this.parseExpression(functionScope);\r\n            }\r\n            if (!paramDec.type && !paramDec.rvalue) {\r\n                this.err\r\n                    .atNode(\"Error in function definition\", paramDec)\r\n                    .atToken_PANIC(this.peekToken().stringValue +\r\n                    \" is not allowed here. Function parameter must either specify a type using : or assign a default value using =\", this.peekToken());\r\n            }\r\n            func.paramDeclaration.push(paramDec);\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                if (this.checkAheadToken(2, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                    this.err.atAfterLastToken_PANIC(\"Expected another parameter definition after the comma but got nothing\", this.lookAheadToken(2));\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                this.err.atAfterLastToken_PANIC(\"Invalid function parameter definition. Expected either a comma or )\", this.peekToken());\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err.atAfterLastToken_PANIC(\"Unterminated parameter declaration at end of file\", this.peekToken());\r\n        }\r\n        this.nextToken();\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN)) {\r\n            this.nextToken();\r\n            func.returnType = this.parseExpression(functionScope);\r\n        }\r\n        func.block = this.parseBlock(functionScope);\r\n        return func;\r\n    }\r\n    setPrecedence(precedence, ...types) {\r\n        for (let i = 0; i < types.length; i++) {\r\n            this.precedence.set(types[i], precedence);\r\n        }\r\n    }\r\n    initPrecedenceMap() {\r\n        this.setPrecedence(1, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_OR_TKN);\r\n        this.setPrecedence(2, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_XOR_TKN);\r\n        this.setPrecedence(3, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_AND_TKN);\r\n        this.setPrecedence(4, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_OR_TKN);\r\n        this.setPrecedence(5, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_XOR_TKN);\r\n        this.setPrecedence(6, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_AND_TKN);\r\n        this.setPrecedence(7, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_EQUALS_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_EQUALS_TKN);\r\n        this.setPrecedence(8, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_EQUAL_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_EQUAL_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_TKN);\r\n        this.setPrecedence(9, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_LEFT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_RIGHT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n        this.setPrecedence(10, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN);\r\n        this.setPrecedence(11, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MULT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_DIVIDE_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MODULUS_TKN);\r\n        this.setPrecedence(12, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_CARROT_TKN);\r\n        this.setPrecedence(13, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN);\r\n    }\r\n    parseExpression(scope) {\r\n        return this.recurseExpression(this.LOWEST_PRECEDENCE, 0, { token: this.peekToken(), scope: scope });\r\n    }\r\n    recurseExpression(precedence, depthCount, src) {\r\n        let expression;\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            let tkn = this.peekToken();\r\n            if (expression) {\r\n                switch (tkn.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUT_CAST_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_CAST_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BOOL_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.VOID_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_NOT_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN:\r\n                        if (depthCount !== 0) {\r\n                            this.err\r\n                                .insert(\"First potential error:\\n\")\r\n                                .atToken(\"Operand token (ex: 3, true, etc.) or prefix operator (ex: !, ~, etc.) can only appear after an operator (ex: +, *, etc.)\", tkn)\r\n                                .insert(\"Second potential error:\\n\")\r\n                                .atAfterLastToken_PANIC(\"Unbalanced parenthesis. Expected \" + depthCount + \" more )\", tkn);\r\n                        }\r\n                        return expression;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN:\r\n                        return expression;\r\n                    default:\r\n                        let curPrecedence = this.precedence.get(tkn.type);\r\n                        if (curPrecedence !== undefined) {\r\n                            if (curPrecedence > precedence) {\r\n                                if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN)) {\r\n                                    if (this.checkAheadToken(2, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN)) {\r\n                                        expression = this.parseTypeConstruction(expression, src.scope);\r\n                                        break;\r\n                                    }\r\n                                    let dotOp = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDotOperator(expression.locToken);\r\n                                    dotOp.rootValue = expression;\r\n                                    this.nextToken();\r\n                                    let memberVal = this.recurseExpression(curPrecedence, depthCount, src);\r\n                                    if (memberVal.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.NAME) {\r\n                                        this.err.atWholeNode_PANIC(\"Expected a variable name reference to a property in \" +\r\n                                            _Ast__WEBPACK_IMPORTED_MODULE_2__.exprToStr(dotOp.rootValue), memberVal);\r\n                                    }\r\n                                    dotOp.memberValue = memberVal;\r\n                                    expression = dotOp;\r\n                                    dotOp.endToken = dotOp.memberValue.endToken;\r\n                                }\r\n                                else if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN)) {\r\n                                    expression = this.parseCall(expression, src);\r\n                                }\r\n                                else {\r\n                                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_LEFT_TKN)) {\r\n                                        if (this.checkAheadToken(2, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_TKN)) {\r\n                                            this.err.atToken_PANIC(\"Arithmetic left shift is equivalent to logical left shift. Use << instead of <<<\", this.peekToken());\r\n                                        }\r\n                                    }\r\n                                    let binOp = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(expression.locToken);\r\n                                    binOp.lvalue = expression;\r\n                                    binOp.operation = this.nextToken();\r\n                                    binOp.rvalue = this.recurseExpression(curPrecedence, depthCount, src);\r\n                                    expression = binOp;\r\n                                    expression.endToken = expression.rvalue.endToken;\r\n                                }\r\n                            }\r\n                            else {\r\n                                return expression;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN)) {\r\n                                this.err.atToken_PANIC(\"Expression contains unknown operator \" + this.peekToken().stringValue, this.peekToken());\r\n                            }\r\n                            else if (depthCount !== 0) {\r\n                                this.err\r\n                                    .atToken(\"Error in expression starting with\", src.token)\r\n                                    .atToken_PANIC(\"Unbalanced parenthesis. Expected \" + depthCount + \" more )\", tkn);\r\n                            }\r\n                            else {\r\n                                return expression;\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            else {\r\n                switch (tkn.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN:\r\n                        expression = this.parseModule(src.scope);\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUT_CAST_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_CAST_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTAccessCast(tkn);\r\n                        expression.accessType = this.nextToken().type;\r\n                        expression.castedType = this.recurseExpression(this.HIGHEST_PRECEDENCE, depthCount, src);\r\n                        expression.endToken = expression.castedType.endToken;\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BOOL_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.VOID_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeLiteral(tkn);\r\n                        expression.type = this.nextToken().type;\r\n                        expression.endToken = tkn;\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTLiteral(tkn);\r\n                        expression.value = this.nextToken();\r\n                        expression.endToken = tkn;\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_NOT_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTUnaryOperator(tkn);\r\n                        expression.operation = this.nextToken();\r\n                        expression.value = this.recurseExpression(precedence, depthCount, src);\r\n                        expression.endToken = expression.value.endToken;\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN:\r\n                        expression = this.parseFunctionType(src.scope);\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(tkn);\r\n                        expression.refName = tkn.stringValue;\r\n                        this.nextToken();\r\n                        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN) || this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN)) {\r\n                            this.err.atToken_PANIC(\"Too many dots in a row. Note that an ellipsis has three dots: ...\", this.peekToken());\r\n                        }\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.nextToken());\r\n                        expression.refName = expression.locToken.stringValue;\r\n                        expression.endToken = expression.locToken;\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN:\r\n                        let func = this.tryParseFunction(src.scope);\r\n                        if (func) {\r\n                            expression = func;\r\n                        }\r\n                        else {\r\n                            this.nextToken();\r\n                            expression = this.recurseExpression(this.LOWEST_PRECEDENCE, depthCount + 1, src);\r\n                            this.nextToken();\r\n                        }\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN:\r\n                        this.err\r\n                            .atToken(\"Error in reference starting with\", src.token)\r\n                            .atToken_PANIC(\"Can't start an expression with a dot or have two dots in a row\", this.peekToken());\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(tkn);\r\n                        expression.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTLiteral(tkn);\r\n                        expression.lvalue.value = _Token__WEBPACK_IMPORTED_MODULE_1__.Token.fromType(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN, tkn);\r\n                        expression.lvalue.value.value = 0;\r\n                        expression.operation = this.nextToken();\r\n                        expression.rvalue = this.recurseExpression(this.HIGHEST_PRECEDENCE, depthCount, src);\r\n                        expression.endToken = expression.rvalue.endToken;\r\n                        break;\r\n                    default:\r\n                        this.err.atAfterLastToken_PANIC(\"Expected an expression but got nothing\", tkn);\r\n                }\r\n            }\r\n        }\r\n        return expression;\r\n    }\r\n    parseCall(prevExpression, src) {\r\n        let call = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTCall(prevExpression.locToken);\r\n        call.functionNameRef = prevExpression;\r\n        call.givenParams = [];\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN || expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN) {\r\n                    this.err.atAfterLastToken_PANIC(\"Expected another expression after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else {\r\n                call.givenParams.push(this.recurseExpression(this.LOWEST_PRECEDENCE, 0, src));\r\n            }\r\n        }\r\n        this.nextToken();\r\n        return call;\r\n    }\r\n    parseTypeConstruction(prevExpression, scope) {\r\n        let typeConstruct = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeConstruction(prevExpression.locToken);\r\n        typeConstruct.typeRef = prevExpression;\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN, \"Dot '.' is required after the type name in a type construction\");\r\n        this.nextToken();\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN, \"Type construction must be enclosed in curly brackets\");\r\n        this.nextToken();\r\n        typeConstruct.assignments = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN)) {\r\n            if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                this.err\r\n                    .atNode(\"Error in type constructor\", typeConstruct)\r\n                    .atToken_PANIC(\"Type construction assignments need to be single variable names\", this.peekToken());\r\n            }\r\n            let lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n            lvalue.refName = this.nextToken().stringValue;\r\n            for (let i = 0; i < typeConstruct.assignments.length; i++) {\r\n                if (typeConstruct.assignments[i].lvalue.refName === lvalue.refName) {\r\n                    this.err\r\n                        .atToken(\"Repeated assignment in type construction\", typeConstruct.assignments[i].locToken)\r\n                        .atNode_PANIC(\"Other repeated assignment found here\", lvalue);\r\n                }\r\n            }\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IMMUTABLE_ASSIGNMENT_TKN)) {\r\n                this.err\r\n                    .atNode(\"Error in type constructor\", typeConstruct)\r\n                    .atToken_PANIC(\"Assignment in a type constructor must use <- instead of =\", this.peekToken());\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.REVERSE_ARROW_TKN)) {\r\n                this.err\r\n                    .atToken(\"Assignment in a type constructor must assign a value using <-\", this.peekToken())\r\n                    .addNote_PANIC(\"Type consteuction assignments need to be in the form [singleVariableName] <- [assignedValue]\");\r\n            }\r\n            this.nextToken();\r\n            let assignment = {\r\n                locToken: lvalue.locToken,\r\n                lvalue: lvalue,\r\n                rvalue: this.parseExpression(scope),\r\n            };\r\n            typeConstruct.assignments.push(assignment);\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                if (this.checkAheadToken(2, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN)) {\r\n                    this.err.atToken_PANIC(\"Last assignment in a type construction can't end in a comma\", this.peekToken());\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN)) {\r\n                this.err.atAfterLastToken_PANIC(\"Invalid type construction. Expected either a comma or }\", this.peekToken());\r\n            }\r\n        }\r\n        typeConstruct.endToken = this.nextToken();\r\n        return typeConstruct;\r\n    }\r\n    parseFunctionType(scope) {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN, \"Function type must start with a backslash\");\r\n        this.nextToken();\r\n        let type = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTFunctionType(this.peekToken());\r\n        this.nextToken();\r\n        type.inputType = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            type.inputType.push(this.parseExpression(scope));\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                this.nextToken();\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                this.err.atAfterLastToken_PANIC(\"Invalid type definition. Expected either a comma or )\", this.peekToken());\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atNode(\"Error in declaration type specifier\", type)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected another type\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN, \"Function type declarations must declare a return type.\");\r\n        this.nextToken();\r\n        type.outType = this.parseExpression(scope);\r\n        return type;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Parser.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Scope.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Scope.ts ***!
  \*********************************/
/*! namespace exports */
/*! export Scope [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ScopeType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export printScope [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ScopeType\": () => /* binding */ ScopeType,\n/* harmony export */   \"Scope\": () => /* binding */ Scope,\n/* harmony export */   \"printScope\": () => /* binding */ printScope\n/* harmony export */ });\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _Log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Log */ \"./src/scuft/lang/Log.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n\r\n\r\n\r\nvar ScopeType;\r\n(function (ScopeType) {\r\n    ScopeType[ScopeType[\"GLOBAL_SCOPE\"] = 0] = \"GLOBAL_SCOPE\";\r\n    ScopeType[ScopeType[\"MODULE_SCOPE\"] = 1] = \"MODULE_SCOPE\";\r\n    ScopeType[ScopeType[\"TYPE_SCOPE\"] = 2] = \"TYPE_SCOPE\";\r\n    ScopeType[ScopeType[\"FUNC_SCOPE\"] = 3] = \"FUNC_SCOPE\";\r\n    ScopeType[ScopeType[\"BRANCH_SCOPE\"] = 4] = \"BRANCH_SCOPE\";\r\n    ScopeType[ScopeType[\"LOOP_SCOPE\"] = 5] = \"LOOP_SCOPE\";\r\n})(ScopeType || (ScopeType = {}));\r\nclass Scope {\r\n    constructor(parentScope) {\r\n        this.table = new Map();\r\n        this.scopeID = Scope.scopeCounter++;\r\n        if (parentScope) {\r\n            this.parent = parentScope;\r\n            if (!parentScope.debugChildren)\r\n                parentScope.debugChildren = [];\r\n            parentScope.debugChildren.push(this);\r\n        }\r\n    }\r\n    static newGlobalScope() {\r\n        let globalScope = new Scope(undefined);\r\n        globalScope.operatorOverloads = new Map();\r\n        globalScope.scopeType = ScopeType.GLOBAL_SCOPE;\r\n        return globalScope;\r\n    }\r\n    addOperatorOverload(operator, overload) {\r\n        let existingOverloads = this.operatorOverloads.get(operator);\r\n        if (!existingOverloads) {\r\n            existingOverloads = [];\r\n            this.operatorOverloads.set(operator, existingOverloads);\r\n        }\r\n        existingOverloads.push(overload);\r\n    }\r\n    getOperatorOverload(operator) {\r\n        return this.operatorOverloads.get(operator);\r\n    }\r\n    getEnclosingScope(scopeType) {\r\n        if (this.scopeType === scopeType)\r\n            return this;\r\n        if (!this.parent)\r\n            return undefined;\r\n        return this.parent.getEnclosingScope(scopeType);\r\n    }\r\n    equals(otherScope) {\r\n        return otherScope.scopeID === this.scopeID;\r\n    }\r\n    isUnordered() {\r\n        return (this.scopeType === ScopeType.GLOBAL_SCOPE ||\r\n            this.scopeType === ScopeType.MODULE_SCOPE ||\r\n            this.scopeType === ScopeType.TYPE_SCOPE);\r\n    }\r\n}\r\nScope.scopeCounter = 0;\r\nfunction printScope(scope) {\r\n    let fmt = [];\r\n    let lines = [];\r\n    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, recurseScope(scope, fmt));\r\n    let str = [lines.join(\"\\n\")];\r\n    for (let i = 0; i < fmt.length; i++) {\r\n        str.push(fmt[i]);\r\n    }\r\n    console.log.apply(lines, str);\r\n}\r\nfunction recurseScope(scope, fmt) {\r\n    let lines = [(0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(\"Scope\", fmt)];\r\n    if (scope.operatorOverloads) {\r\n        (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, [\"   OperatorOverloads:\"]);\r\n        let maxKeyLength = 0;\r\n        for (const key of scope.operatorOverloads.keys()) {\r\n            if ((0,_Token__WEBPACK_IMPORTED_MODULE_2__.tokenToStr)(key).length > maxKeyLength)\r\n                maxKeyLength = (0,_Token__WEBPACK_IMPORTED_MODULE_2__.tokenToStr)(key).length;\r\n        }\r\n        for (const [key, value] of scope.operatorOverloads.entries()) {\r\n            for (let i = 0; i < value.length; i++) {\r\n                let line = \"    |  \";\r\n                if (i === 0) {\r\n                    line +=\r\n                        (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)((0,_Token__WEBPACK_IMPORTED_MODULE_2__.tokenToStr)(key), fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.IDENTIFIER_FMT) +\r\n                            \" \".repeat(maxKeyLength - (0,_Token__WEBPACK_IMPORTED_MODULE_2__.tokenToStr)(key).length);\r\n                }\r\n                else {\r\n                    line += \" \".repeat(maxKeyLength);\r\n                }\r\n                line += \"  => \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(_Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value[i]), fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.EXPRESSION_FMT);\r\n                lines.push(line);\r\n            }\r\n        }\r\n    }\r\n    lines.push(\"   Table:\");\r\n    let maxKeyLength = 0;\r\n    let maxTypeLength = 0;\r\n    for (const [key, value] of scope.table.entries()) {\r\n        if (key.length > maxKeyLength)\r\n            maxKeyLength = key.length;\r\n        if (value.type && value.type.resolved) {\r\n            let typeName = _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value.type.resolved);\r\n            if (typeName.length > maxTypeLength)\r\n                maxTypeLength = typeName.length;\r\n        }\r\n    }\r\n    for (const [key, value] of scope.table.entries()) {\r\n        let line = \"    |  \";\r\n        line += (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(key, fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.IDENTIFIER_FMT) + \" \".repeat(maxKeyLength - key.length);\r\n        let typeName = \"\";\r\n        if (value.type && value.type.resolved) {\r\n            typeName = _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value.type.resolved);\r\n            line += \" : \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(typeName, fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.TYPE_FMT);\r\n        }\r\n        else {\r\n            line += \"   \";\r\n        }\r\n        if (value.rvalue) {\r\n            let assignment = \"  =  \";\r\n            if (value.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.CONST_ASSIGNMENT_TKN)\r\n                assignment = \"  => \";\r\n            if (value.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.MUTABLE_ASSIGNMENT_TKN)\r\n                assignment = \" ~=  \";\r\n            line +=\r\n                \" \".repeat(maxTypeLength - typeName.length) +\r\n                    assignment +\r\n                    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(_Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value.rvalue), fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.EXPRESSION_FMT);\r\n        }\r\n        lines.push(line);\r\n    }\r\n    if (scope.debugChildren) {\r\n        lines.push(\"   Children:\");\r\n        for (let i = 0; i < scope.debugChildren.length; i++) {\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.bar)(recurseScope(scope.debugChildren[i], fmt))));\r\n        }\r\n    }\r\n    return lines;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL1Njb3BlLnRzPzFjNjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTZCO0FBQ3VCO0FBQ0o7QUFFaEQsSUFBWSxTQVNYO0FBVEQsV0FBWSxTQUFTO0lBQ2pCLHlEQUFZO0lBQ1oseURBQVk7SUFDWixxREFBVTtJQUVWLHFEQUFVO0lBRVYseURBQVk7SUFDWixxREFBVTtBQUNkLENBQUMsRUFUVyxTQUFTLEtBQVQsU0FBUyxRQVNwQjtBQUNNLE1BQU0sS0FBSztJQTBCZCxZQUFZLFdBQThCO1FBSjFDLFVBQUssR0FBb0MsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUsvQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQyxJQUFJLFdBQVcsRUFBRTtZQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDO1lBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYTtnQkFBRSxXQUFXLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztZQUMvRCxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7SUFoQ0QsTUFBTSxDQUFDLGNBQWM7UUFDakIsSUFBSSxXQUFXLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkMsV0FBVyxDQUFDLGlCQUFpQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDMUMsV0FBVyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDO1FBQy9DLE9BQU8sV0FBVyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxRQUFtQixFQUFFLFFBQXlCO1FBQzlELElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFD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QUMsY0FBYyxDQUFDLENBQUM7UUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2pELDJDQUFLLENBQUMsS0FBSyxFQUFFLDJDQUFLLENBQUMsQ0FBQyxFQUFFLHlDQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUU7S0FDSjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUMiLCJmaWxlIjoiLi9zcmMvc2N1ZnQvbGFuZy9TY29wZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFTVCBmcm9tIFwiLi9Bc3RcIjtcclxuaW1wb3J0IHsgYXBwbHlGbXQsIG1lcmdlLCBzcGFjZSwgYmFyIH0gZnJvbSBcIi4vTG9nXCI7XHJcbmltcG9ydCB7IFRva2VuVHlwZSwgdG9rZW5Ub1N0ciB9IGZyb20gXCIuL1Rva2VuXCI7XHJcblxyXG5leHBvcnQgZW51bSBTY29wZVR5cGUge1xyXG4gICAgR0xPQkFMX1NDT1BFLFxyXG4gICAgTU9EVUxFX1NDT1BFLFxyXG4gICAgVFlQRV9TQ09QRSxcclxuXHJcbiAgICBGVU5DX1NDT1BFLFxyXG5cclxuICAgIEJSQU5DSF9TQ09QRSxcclxuICAgIExPT1BfU0NPUEUsXHJcbn1cclxuZXhwb3J0IGNsYXNzIFNjb3BlIHtcclxuICAgIHN0YXRpYyBuZXdHbG9iYWxTY29wZSgpOiBTY29wZSB7XHJcbiAgICAgICAgbGV0IGdsb2JhbFNjb3BlID0gbmV3IFNjb3BlKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgZ2xvYmFsU2NvcGUub3BlcmF0b3JPdmVybG9hZHMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZ2xvYmFsU2NvcGUuc2NvcGVUeXBlID0gU2NvcGVUeXBlLkdMT0JBTF9TQ09QRTtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsU2NvcGU7XHJcbiAgICB9XHJcbiAgICBvcGVyYXRvck92ZXJsb2FkcyE6IE1hcDxUb2tlblR5cGUsIEFTVC5BU1RGdW5jdGlvbltdPjsgLy8gR2xvYmFsIHNjb3BlIGhhcyBhIGxpc3Qgb2Ygb3ZlcmxvYWRzXHJcbiAgICBhZGRPcGVyYXRvck92ZXJsb2FkKG9wZXJhdG9yOiBUb2tlblR5cGUsIG92ZXJsb2FkOiBBU1QuQVNURnVuY3Rpb24pIHtcclxuICAgICAgICBsZXQgZXhpc3RpbmdPdmVybG9hZHMgPSB0aGlzLm9wZXJhdG9yT3ZlcmxvYWRzLmdldChvcGVyYXRvcik7XHJcbiAgICAgICAgaWYgKCFleGlzdGluZ092ZXJsb2Fkcykge1xyXG4gICAgICAgICAgICBleGlzdGluZ092ZXJsb2FkcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLm9wZXJhdG9yT3ZlcmxvYWRzLnNldChvcGVyYXRvciwgZXhpc3RpbmdPdmVybG9hZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBleGlzdGluZ092ZXJsb2Fkcy5wdXNoKG92ZXJsb2FkKTtcclxuICAgIH1cclxuICAgIGdldE9wZXJhdG9yT3ZlcmxvYWQob3BlcmF0b3I6IFRva2VuVHlwZSk6IEFTVC5BU1RGdW5jdGlvbltdIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRvck92ZXJsb2Fkcy5nZXQob3BlcmF0b3IpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHNjb3BlQ291bnRlciA9IDA7XHJcbiAgICBzY29wZUlEOiBudW1iZXI7XHJcbiAgICBzY29wZVR5cGUhOiBTY29wZVR5cGU7XHJcbiAgICB0YWJsZTogTWFwPHN0cmluZywgQVNULkFTVERlY2xhcmF0aW9uPiA9IG5ldyBNYXAoKTtcclxuICAgIHdpdGhNb2R1bGVzITogQVNULkFTVERlY2xhcmF0aW9uW107IC8vIFN0b3JlIHRoZSBzY29wZSBvZiBhbGwgXCJ3aXRoXCIgbW9kdWxlc1xyXG4gICAgcGFyZW50ITogU2NvcGU7XHJcbiAgICBkZWJ1Z0NoaWxkcmVuITogU2NvcGVbXTsgLy8gUHVyZWx5IGZvciBkZWJ1Z2luZywgc2NvcGUgZG9lc24ndCBuZWVkIHRvIGtub3cgaXRzIGNoaWxkcmVuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTY29wZTogU2NvcGUgfCB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLnNjb3BlSUQgPSBTY29wZS5zY29wZUNvdW50ZXIrKztcclxuICAgICAgICBpZiAocGFyZW50U2NvcGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRTY29wZTtcclxuICAgICAgICAgICAgaWYgKCFwYXJlbnRTY29wZS5kZWJ1Z0NoaWxkcmVuKSBwYXJlbnRTY29wZS5kZWJ1Z0NoaWxkcmVuID0gW107XHJcbiAgICAgICAgICAgIHBhcmVudFNjb3BlLmRlYnVnQ2hpbGRyZW4ucHVzaCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRFbmNsb3NpbmdTY29wZShzY29wZVR5cGU6IFNjb3BlVHlwZSk6IFNjb3BlIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAodGhpcy5zY29wZVR5cGUgPT09IHNjb3BlVHlwZSkgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0RW5jbG9zaW5nU2NvcGUoc2NvcGVUeXBlKTtcclxuICAgIH1cclxuICAgIGVxdWFscyhvdGhlclNjb3BlOiBTY29wZSkge1xyXG4gICAgICAgIHJldHVybiBvdGhlclNjb3BlLnNjb3BlSUQgPT09IHRoaXMuc2NvcGVJRDtcclxuICAgIH1cclxuICAgIGlzVW5vcmRlcmVkKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHRoaXMuc2NvcGVUeXBlID09PSBTY29wZVR5cGUuR0xPQkFMX1NDT1BFIHx8XHJcbiAgICAgICAgICAgIHRoaXMuc2NvcGVUeXBlID09PSBTY29wZVR5cGUuTU9EVUxFX1NDT1BFIHx8XHJcbiAgICAgICAgICAgIHRoaXMuc2NvcGVUeXBlID09PSBTY29wZVR5cGUuVFlQRV9TQ09QRVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmludFNjb3BlKHNjb3BlOiBTY29wZSkge1xyXG4gICAgbGV0IGZtdDogc3RyaW5nW10gPSBbXTtcclxuICAgIGxldCBsaW5lczogc3RyaW5nW10gPSBbXTtcclxuICAgIG1lcmdlKGxpbmVzLCByZWN1cnNlU2NvcGUoc2NvcGUsIGZtdCkpO1xyXG5cclxuICAgIGxldCBzdHI6IHN0cmluZ1tdID0gW2xpbmVzLmpvaW4oXCJcXG5cIildO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBzdHIucHVzaChmbXRbaV0pO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2cuYXBwbHkobGluZXMsIHN0cik7XHJcbn1cclxuZnVuY3Rpb24gcmVjdXJzZVNjb3BlKHNjb3BlOiBTY29wZSwgZm10OiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGxldCBsaW5lczogc3RyaW5nW10gPSBbYXBwbHlGbXQoXCJTY29wZVwiLCBmbXQpXTtcclxuICAgIGlmIChzY29wZS5vcGVyYXRvck92ZXJsb2Fkcykge1xyXG4gICAgICAgIG1lcmdlKGxpbmVzLCBbXCIgICBPcGVyYXRvck92ZXJsb2FkczpcIl0pO1xyXG4gICAgICAgIGxldCBtYXhLZXlMZW5ndGggPSAwO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHNjb3BlLm9wZXJhdG9yT3ZlcmxvYWRzLmtleXMoKSkge1xyXG4gICAgICAgICAgICBpZiAodG9rZW5Ub1N0cihrZXkpLmxlbmd0aCA+IG1heEtleUxlbmd0aCkgbWF4S2V5TGVuZ3RoID0gdG9rZW5Ub1N0cihrZXkpLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygc2NvcGUub3BlcmF0b3JPdmVybG9hZHMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBsaW5lID0gXCIgICAgfCAgXCI7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUgKz1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlGbXQodG9rZW5Ub1N0cihrZXkpLCBmbXQsIEFTVC5BU1RGbXQuSURFTlRJRklFUl9GTVQpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCIgXCIucmVwZWF0KG1heEtleUxlbmd0aCAtIHRva2VuVG9TdHIoa2V5KS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lICs9IFwiIFwiLnJlcGVhdChtYXhLZXlMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGluZSArPSBcIiAgPT4gXCIgKyBhcHBseUZtdChBU1QuZXhwclRvU3RyKHZhbHVlW2ldKSwgZm10LCBBU1QuQVNURm10LkVYUFJFU1NJT05fRk1UKTtcclxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2gobGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsaW5lcy5wdXNoKFwiICAgVGFibGU6XCIpO1xyXG4gICAgbGV0IG1heEtleUxlbmd0aCA9IDA7XHJcbiAgICBsZXQgbWF4VHlwZUxlbmd0aCA9IDA7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBzY29wZS50YWJsZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICBpZiAoa2V5Lmxlbmd0aCA+IG1heEtleUxlbmd0aCkgbWF4S2V5TGVuZ3RoID0ga2V5Lmxlbmd0aDtcclxuICAgICAgICBpZiAodmFsdWUudHlwZSAmJiB2YWx1ZS50eXBlLnJlc29sdmVkKSB7XHJcbiAgICAgICAgICAgIGxldCB0eXBlTmFtZSA9IEFTVC5leHByVG9TdHIodmFsdWUudHlwZS5yZXNvbHZlZCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlTmFtZS5sZW5ndGggPiBtYXhUeXBlTGVuZ3RoKSBtYXhUeXBlTGVuZ3RoID0gdHlwZU5hbWUubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHNjb3BlLnRhYmxlLmVudHJpZXMoKSkge1xyXG4gICAgICAgIGxldCBsaW5lID0gXCIgICAgfCAgXCI7XHJcbiAgICAgICAgbGluZSArPSBhcHBseUZtdChrZXksIGZtdCwgQVNULkFTVEZtdC5JREVOVElGSUVSX0ZNVCkgKyBcIiBcIi5yZXBlYXQobWF4S2V5TGVuZ3RoIC0ga2V5Lmxlbmd0aCk7XHJcbiAgICAgICAgbGV0IHR5cGVOYW1lID0gXCJcIjtcclxuICAgICAgICBpZiAodmFsdWUudHlwZSAmJiB2YWx1ZS50eXBlLnJlc29sdmVkKSB7XHJcbiAgICAgICAgICAgIHR5cGVOYW1lID0gQVNULmV4cHJUb1N0cih2YWx1ZS50eXBlLnJlc29sdmVkKTtcclxuICAgICAgICAgICAgbGluZSArPSBcIiA6IFwiICsgYXBwbHlGbXQodHlwZU5hbWUsIGZtdCwgQVNULkFTVEZtdC5UWVBFX0ZNVCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGluZSArPSBcIiAgIFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUucnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGxldCBhc3NpZ25tZW50ID0gXCIgID0gIFwiO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuYWNjZXNzQXNzaWdubWVudC50eXBlID09PSBUb2tlblR5cGUuQ09OU1RfQVNTSUdOTUVOVF9US04pIGFzc2lnbm1lbnQgPSBcIiAgPT4gXCI7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5hY2Nlc3NBc3NpZ25tZW50LnR5cGUgPT09IFRva2VuVHlwZS5NVVRBQkxFX0FTU0lHTk1FTlRfVEtOKSBhc3NpZ25tZW50ID0gXCIgfj0gIFwiO1xyXG4gICAgICAgICAgICBsaW5lICs9XHJcbiAgICAgICAgICAgICAgICBcIiBcIi5yZXBlYXQobWF4VHlwZUxlbmd0aCAtIHR5cGVOYW1lLmxlbmd0aCkgK1xyXG4gICAgICAgICAgICAgICAgYXNzaWdubWVudCArXHJcbiAgICAgICAgICAgICAgICBhcHBseUZtdChBU1QuZXhwclRvU3RyKHZhbHVlLnJ2YWx1ZSksIGZtdCwgQVNULkFTVEZtdC5FWFBSRVNTSU9OX0ZNVCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpbmVzLnB1c2gobGluZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NvcGUuZGVidWdDaGlsZHJlbikge1xyXG4gICAgICAgIGxpbmVzLnB1c2goXCIgICBDaGlsZHJlbjpcIik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY29wZS5kZWJ1Z0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1lcmdlKGxpbmVzLCBzcGFjZSgzLCBiYXIocmVjdXJzZVNjb3BlKHNjb3BlLmRlYnVnQ2hpbGRyZW5baV0sIGZtdCkpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxpbmVzO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scuft/lang/Scope.ts\n");

/***/ }),

/***/ "./src/scuft/lang/ScuftTest.ts":
/*!*************************************!*\
  !*** ./src/scuft/lang/ScuftTest.ts ***!
  \*************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* export default binding */ __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _Lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lexer */ \"./src/scuft/lang/Lexer.ts\");\n/* harmony import */ var _Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Parser */ \"./src/scuft/lang/Parser.ts\");\n/* harmony import */ var _TypeChecker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TypeChecker */ \"./src/scuft/lang/TypeChecker.ts\");\n/* harmony import */ var _Interpreter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Interpreter */ \"./src/scuft/lang/Interpreter.ts\");\n/* harmony import */ var _test_7_InterpTest_scft__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../test/7-InterpTest.scft */ \"./src/scuft/test/7-InterpTest.scft\");\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Scope */ \"./src/scuft/lang/Scope.ts\");\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\r\n    function testString(input) {\r\n        let errHandler = _ErrorHandler__WEBPACK_IMPORTED_MODULE_7__.ErrorHandler.fromSource(\"\", input);\r\n        let parser = new _Parser__WEBPACK_IMPORTED_MODULE_1__.default(new _Lexer__WEBPACK_IMPORTED_MODULE_0__.default(input, errHandler), errHandler);\r\n        let prgm = parser.parseProgram();\r\n        (0,_Ast__WEBPACK_IMPORTED_MODULE_5__.printAST)(prgm);\r\n        let typeCheck = new _TypeChecker__WEBPACK_IMPORTED_MODULE_2__.default(errHandler);\r\n        typeCheck.typeCheckProgram(prgm);\r\n        (0,_Scope__WEBPACK_IMPORTED_MODULE_6__.printScope)(prgm.scope);\r\n        let interp = new _Interpreter__WEBPACK_IMPORTED_MODULE_3__.default();\r\n        interp.interpProgram(prgm);\r\n    }\r\n    testString(_test_7_InterpTest_scft__WEBPACK_IMPORTED_MODULE_4__.default);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL1NjdWZ0VGVzdC50cz8wYjQ4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUE0QjtBQUNFO0FBQ1U7QUFDQTtBQU9XO0FBRWxCO0FBQ0k7QUFDUztBQUU5Qyw2QkFBZSxzQ0FBWTtJQUN2QixTQUFTLFVBQVUsQ0FBQyxLQUFhO1FBQzdCLElBQUksVUFBVSxHQUFHLGtFQUF1QixDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUtwRCxJQUFJLE1BQU0sR0FBRyxJQUFJLDRDQUFNLENBQUMsSUFBSSwyQ0FBSyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNsRSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFakMsOENBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVmLElBQUksU0FBUyxHQUFHLElBQUksaURBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1QyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsa0RBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdkIsSUFBSSxNQUFNLEdBQUcsSUFBSSxpREFBVyxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBT0QsVUFBVSxDQUFDLDREQUFVLENBQUMsQ0FBQztBQUczQixDQUFDIiwiZmlsZSI6Ii4vc3JjL3NjdWZ0L2xhbmcvU2N1ZnRUZXN0LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExleGVyIGZyb20gXCIuL0xleGVyXCI7XHJcbmltcG9ydCBQYXJzZXIgZnJvbSBcIi4vUGFyc2VyXCI7XHJcbmltcG9ydCBUeXBlQ2hlY2tlciBmcm9tIFwiLi9UeXBlQ2hlY2tlclwiO1xyXG5pbXBvcnQgSW50ZXJwcmV0ZXIgZnJvbSBcIi4vSW50ZXJwcmV0ZXJcIjtcclxuXHJcbmltcG9ydCBzaW1wbGVUZXN0IGZyb20gXCIuLi90ZXN0LzEtU2ltcGxlVGVzdC5zY2Z0XCI7XHJcbmltcG9ydCBsaXRlcmFsVGVzdCBmcm9tIFwiLi4vdGVzdC8yLUxpdGVyYWxUZXN0LnNjZnRcIjtcclxuaW1wb3J0IGV4cHJlc3Npb25UZXN0IGZyb20gXCIuLi90ZXN0LzQtRXhwcmVzc2lvblRlc3Quc2NmdFwiO1xyXG5pbXBvcnQgbW9kdWxlVHlwZURlZlRlc3QgZnJvbSBcIi4uL3Rlc3QvNS1Nb2R1bGVUeXBlRGVmaW5pdGlvblRlc3Quc2NmdFwiO1xyXG5pbXBvcnQgZGVjbGFyZVR5cGVUZXN0IGZyb20gXCIuLi90ZXN0LzYtRGVjbGFyYXRpb25UeXBlSW5mZXIuc2NmdFwiO1xyXG5pbXBvcnQgaW50ZXJwVGVzdCBmcm9tIFwiLi4vdGVzdC83LUludGVycFRlc3Quc2NmdFwiO1xyXG5cclxuaW1wb3J0IHsgcHJpbnRBU1QgfSBmcm9tIFwiLi9Bc3RcIjtcclxuaW1wb3J0IHsgcHJpbnRTY29wZSB9IGZyb20gXCIuL1Njb3BlXCI7XHJcbmltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gXCIuL0Vycm9ySGFuZGxlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gdGVzdFN0cmluZyhpbnB1dDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGVyckhhbmRsZXIgPSBFcnJvckhhbmRsZXIuZnJvbVNvdXJjZShcIlwiLCBpbnB1dCk7XHJcblxyXG4gICAgICAgIC8vIGxldCBsZXhlciA9IG5ldyBMZXhlcihpbnB1dCwgZXJySGFuZGxlcik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobGV4ZXIubGV4KCkpO1xyXG5cclxuICAgICAgICBsZXQgcGFyc2VyID0gbmV3IFBhcnNlcihuZXcgTGV4ZXIoaW5wdXQsIGVyckhhbmRsZXIpLCBlcnJIYW5kbGVyKTtcclxuICAgICAgICBsZXQgcHJnbSA9IHBhcnNlci5wYXJzZVByb2dyYW0oKTtcclxuXHJcbiAgICAgICAgcHJpbnRBU1QocHJnbSk7XHJcblxyXG4gICAgICAgIGxldCB0eXBlQ2hlY2sgPSBuZXcgVHlwZUNoZWNrZXIoZXJySGFuZGxlcik7XHJcbiAgICAgICAgdHlwZUNoZWNrLnR5cGVDaGVja1Byb2dyYW0ocHJnbSk7XHJcbiAgICAgICAgcHJpbnRTY29wZShwcmdtLnNjb3BlKTtcclxuXHJcbiAgICAgICAgbGV0IGludGVycCA9IG5ldyBJbnRlcnByZXRlcigpO1xyXG4gICAgICAgIGludGVycC5pbnRlcnBQcm9ncmFtKHByZ20pO1xyXG4gICAgfVxyXG4gICAgLy8gdGVzdFN0cmluZyhzaW1wbGVUZXN0KTtcclxuICAgIC8vIHRlc3RTdHJpbmcobGl0ZXJhbFRlc3QpO1xyXG4gICAgLy8gdGVzdFN0cmluZyh0eXBlVGVzdCk7XHJcbiAgICAvLyB0ZXN0U3RyaW5nKGV4cHJlc3Npb25UZXN0KTtcclxuICAgIC8vIHRlc3RTdHJpbmcobW9kdWxlVHlwZURlZlRlc3QpO1xyXG4gICAgLy8gdGVzdFN0cmluZyhkZWNsYXJlVHlwZVRlc3QpO1xyXG4gICAgdGVzdFN0cmluZyhpbnRlcnBUZXN0KTtcclxuXHJcbiAgICAvLyB0ZXN0U3RyaW5nKFwiYjIgPSAoYTogbnVtLCBiOiBudW0pIC0+IG51bSB7fTtcIik7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scuft/lang/ScuftTest.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Token.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Token.ts ***!
  \*********************************/
/*! namespace exports */
/*! export Token [provided] [no usage info] [missing usage info prevents renaming] */
/*! export TokenType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export tokenToStr [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Token\": () => /* binding */ Token,\n/* harmony export */   \"tokenToStr\": () => /* binding */ tokenToStr,\n/* harmony export */   \"TokenType\": () => /* binding */ TokenType\n/* harmony export */ });\nclass Token {\r\n    constructor(stringValue, line, c, type) {\r\n        this.stringValue = stringValue;\r\n        this.line = line;\r\n        this.c = c;\r\n        this.type = type;\r\n        this.typeName = TokenType[type];\r\n    }\r\n    static fromType(type, locToken) {\r\n        return new Token(tokenToStr(type), locToken.line, locToken.c, type);\r\n    }\r\n    equals(other) {\r\n        return (other.line === this.line && other.c === this.c && this.isTokenTypeEqual(other) && other.value === this.value);\r\n    }\r\n    isTokenTypeEqual(other) {\r\n        return other.type === this.type;\r\n    }\r\n    isTokenBefore(otherAfterCurrent) {\r\n        return (this.line < otherAfterCurrent.line || (this.line === otherAfterCurrent.line && this.c < otherAfterCurrent.c));\r\n    }\r\n}\r\nfunction tokenToStr(tokenType) {\r\n    switch (tokenType) {\r\n        case TokenType.COLON_TKN:\r\n            return \":\";\r\n        case TokenType.CONST_ASSIGNMENT_TKN:\r\n            return \"=>\";\r\n        case TokenType.IMMUTABLE_ASSIGNMENT_TKN:\r\n            return \"=\";\r\n        case TokenType.MUTABLE_ASSIGNMENT_TKN:\r\n            return \"~=\";\r\n        case TokenType.LEFT_CURLY_TKN:\r\n            return \"{\";\r\n        case TokenType.RIGHT_CURLY_TKN:\r\n            return \"}\";\r\n        case TokenType.LEFT_SQUARE_TKN:\r\n            return \"[\";\r\n        case TokenType.RIGHT_SQUARE_TKN:\r\n            return \"]\";\r\n        case TokenType.LEFT_PARENS_TKN:\r\n            return \"(\";\r\n        case TokenType.RIGHT_PARENS_TKN:\r\n            return \")\";\r\n        case TokenType.TYPE_TKN:\r\n            return \"type\";\r\n        case TokenType.MODULE_TKN:\r\n            return \"module\";\r\n        case TokenType.WITH_TKN:\r\n            return \"with\";\r\n        case TokenType.IF_TKN:\r\n            return \"if\";\r\n        case TokenType.ELSE_TKN:\r\n            return \"else\";\r\n        case TokenType.WHILE_TKN:\r\n            return \"while\";\r\n        case TokenType.FOR_TKN:\r\n            return \"for\";\r\n        case TokenType.IN_TKN:\r\n            return \"in\";\r\n        case TokenType.BREAK_TKN:\r\n            return \"break\";\r\n        case TokenType.CONTINUE_TKN:\r\n            return \"continue\";\r\n        case TokenType.COND_OR_TKN:\r\n            return \"||\";\r\n        case TokenType.COND_AND_TKN:\r\n            return \"&&\";\r\n        case TokenType.COND_XOR_TKN:\r\n            return \"$$\";\r\n        case TokenType.COND_NOT_TKN:\r\n            return \"!\";\r\n        case TokenType.COND_EQUALS_TKN:\r\n            return \"==\";\r\n        case TokenType.COND_NOT_EQUALS_TKN:\r\n            return \"!=\";\r\n        case TokenType.COND_LESS_THAN_TKN:\r\n            return \"<\";\r\n        case TokenType.COND_LESS_THAN_EQUAL_TKN:\r\n            return \"<=\";\r\n        case TokenType.COND_GREATER_THAN_TKN:\r\n            return \">\";\r\n        case TokenType.COND_GREATER_THAN_EQUAL_TKN:\r\n            return \">=\";\r\n        case TokenType.COND_TRUE_TKN:\r\n            return \"true\";\r\n        case TokenType.COND_FALSE_TKN:\r\n            return \"false\";\r\n        case TokenType.MUT_CAST_TKN:\r\n            return \"mut\";\r\n        case TokenType.IMMUT_CAST_TKN:\r\n            return \"immut\";\r\n        case TokenType.CONST_CAST_TKN:\r\n            return \"const\";\r\n        case TokenType.VOID_TYPE_TKN:\r\n            return \"void\";\r\n        case TokenType.NUM_TYPE_TKN:\r\n            return \"num\";\r\n        case TokenType.STRING_TYPE_TKN:\r\n            return \"string\";\r\n        case TokenType.BOOL_TYPE_TKN:\r\n            return \"bool\";\r\n        case TokenType.BIN_OR_TKN:\r\n            return \"or\";\r\n        case TokenType.BIN_AND_TKN:\r\n            return \"and\";\r\n        case TokenType.BIN_XOR_TKN:\r\n            return \"xor\";\r\n        case TokenType.BIN_NOT_TKN:\r\n            return \"~\";\r\n        case TokenType.BIN_SHIFT_RIGHT_TKN:\r\n            return \">>\";\r\n        case TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN:\r\n            return \">>>\";\r\n        case TokenType.BIN_SHIFT_LEFT_TKN:\r\n            return \"<<\";\r\n        case TokenType.ARROW_TKN:\r\n            return \"->\";\r\n        case TokenType.RETURN_TKN:\r\n            return \"return\";\r\n        case TokenType.BACKSLASH_TKN:\r\n            return \"\\\\\";\r\n        case TokenType.OP_ADD_TKN:\r\n            return \"+\";\r\n        case TokenType.OP_SUBTR_TKN:\r\n            return \"-\";\r\n        case TokenType.OP_MULT_TKN:\r\n            return \"*\";\r\n        case TokenType.OP_DIVIDE_TKN:\r\n            return \"/\";\r\n        case TokenType.OP_CARROT_TKN:\r\n            return \"^\";\r\n        case TokenType.OP_MODULUS_TKN:\r\n            return \"%\";\r\n        case TokenType.OP_ADD_ADD_TKN:\r\n            return \"++\";\r\n        case TokenType.OP_ADD_EQUALS_TKN:\r\n            return \"+=\";\r\n        case TokenType.OP_SUBTR_SUBTR_TKN:\r\n            return \"--\";\r\n        case TokenType.OP_SUBTR_EQUALS_TKN:\r\n            return \"-=\";\r\n        case TokenType.OP_MULT_EQUALS_TKN:\r\n            return \"*=\";\r\n        case TokenType.OP_DIV_EQUALS_TKN:\r\n            return \"/=\";\r\n        case TokenType.HASH_RANGE_TKN:\r\n            return \"#range\";\r\n        case TokenType.DOUBLE_QUOTE_TKN:\r\n            return '\"';\r\n        case TokenType.DOT_TKN:\r\n            return \".\";\r\n        case TokenType.ELLIPSIS_TKN:\r\n            return \"...\";\r\n        case TokenType.REVERSE_ARROW_TKN:\r\n            return \"<-\";\r\n        case TokenType.COMMA_TKN:\r\n            return \",\";\r\n        case TokenType.SEMI_COLON_TKN:\r\n            return \";\";\r\n        default:\r\n            return TokenType[tokenType];\r\n    }\r\n}\r\nvar TokenType;\r\n(function (TokenType) {\r\n    TokenType[TokenType[\"IDENTIFIER_TKN\"] = 0] = \"IDENTIFIER_TKN\";\r\n    TokenType[TokenType[\"COLON_TKN\"] = 1] = \"COLON_TKN\";\r\n    TokenType[TokenType[\"NUMERIC_LITERAL_TKN\"] = 2] = \"NUMERIC_LITERAL_TKN\";\r\n    TokenType[TokenType[\"STRING_LITERAL_TKN\"] = 3] = \"STRING_LITERAL_TKN\";\r\n    TokenType[TokenType[\"IMMUTABLE_ASSIGNMENT_TKN\"] = 4] = \"IMMUTABLE_ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"CONST_ASSIGNMENT_TKN\"] = 5] = \"CONST_ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"MUTABLE_ASSIGNMENT_TKN\"] = 6] = \"MUTABLE_ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"LEFT_CURLY_TKN\"] = 7] = \"LEFT_CURLY_TKN\";\r\n    TokenType[TokenType[\"RIGHT_CURLY_TKN\"] = 8] = \"RIGHT_CURLY_TKN\";\r\n    TokenType[TokenType[\"LEFT_SQUARE_TKN\"] = 9] = \"LEFT_SQUARE_TKN\";\r\n    TokenType[TokenType[\"RIGHT_SQUARE_TKN\"] = 10] = \"RIGHT_SQUARE_TKN\";\r\n    TokenType[TokenType[\"LEFT_PARENS_TKN\"] = 11] = \"LEFT_PARENS_TKN\";\r\n    TokenType[TokenType[\"RIGHT_PARENS_TKN\"] = 12] = \"RIGHT_PARENS_TKN\";\r\n    TokenType[TokenType[\"TYPE_TKN\"] = 13] = \"TYPE_TKN\";\r\n    TokenType[TokenType[\"MODULE_TKN\"] = 14] = \"MODULE_TKN\";\r\n    TokenType[TokenType[\"WITH_TKN\"] = 15] = \"WITH_TKN\";\r\n    TokenType[TokenType[\"IF_TKN\"] = 16] = \"IF_TKN\";\r\n    TokenType[TokenType[\"ELSE_TKN\"] = 17] = \"ELSE_TKN\";\r\n    TokenType[TokenType[\"WHILE_TKN\"] = 18] = \"WHILE_TKN\";\r\n    TokenType[TokenType[\"FOR_TKN\"] = 19] = \"FOR_TKN\";\r\n    TokenType[TokenType[\"IN_TKN\"] = 20] = \"IN_TKN\";\r\n    TokenType[TokenType[\"BREAK_TKN\"] = 21] = \"BREAK_TKN\";\r\n    TokenType[TokenType[\"CONTINUE_TKN\"] = 22] = \"CONTINUE_TKN\";\r\n    TokenType[TokenType[\"COND_OR_TKN\"] = 23] = \"COND_OR_TKN\";\r\n    TokenType[TokenType[\"COND_AND_TKN\"] = 24] = \"COND_AND_TKN\";\r\n    TokenType[TokenType[\"COND_XOR_TKN\"] = 25] = \"COND_XOR_TKN\";\r\n    TokenType[TokenType[\"COND_NOT_TKN\"] = 26] = \"COND_NOT_TKN\";\r\n    TokenType[TokenType[\"COND_EQUALS_TKN\"] = 27] = \"COND_EQUALS_TKN\";\r\n    TokenType[TokenType[\"COND_NOT_EQUALS_TKN\"] = 28] = \"COND_NOT_EQUALS_TKN\";\r\n    TokenType[TokenType[\"COND_LESS_THAN_TKN\"] = 29] = \"COND_LESS_THAN_TKN\";\r\n    TokenType[TokenType[\"COND_LESS_THAN_EQUAL_TKN\"] = 30] = \"COND_LESS_THAN_EQUAL_TKN\";\r\n    TokenType[TokenType[\"COND_GREATER_THAN_TKN\"] = 31] = \"COND_GREATER_THAN_TKN\";\r\n    TokenType[TokenType[\"COND_GREATER_THAN_EQUAL_TKN\"] = 32] = \"COND_GREATER_THAN_EQUAL_TKN\";\r\n    TokenType[TokenType[\"COND_TRUE_TKN\"] = 33] = \"COND_TRUE_TKN\";\r\n    TokenType[TokenType[\"COND_FALSE_TKN\"] = 34] = \"COND_FALSE_TKN\";\r\n    TokenType[TokenType[\"MUT_CAST_TKN\"] = 35] = \"MUT_CAST_TKN\";\r\n    TokenType[TokenType[\"IMMUT_CAST_TKN\"] = 36] = \"IMMUT_CAST_TKN\";\r\n    TokenType[TokenType[\"CONST_CAST_TKN\"] = 37] = \"CONST_CAST_TKN\";\r\n    TokenType[TokenType[\"VOID_TYPE_TKN\"] = 38] = \"VOID_TYPE_TKN\";\r\n    TokenType[TokenType[\"NUM_TYPE_TKN\"] = 39] = \"NUM_TYPE_TKN\";\r\n    TokenType[TokenType[\"STRING_TYPE_TKN\"] = 40] = \"STRING_TYPE_TKN\";\r\n    TokenType[TokenType[\"BOOL_TYPE_TKN\"] = 41] = \"BOOL_TYPE_TKN\";\r\n    TokenType[TokenType[\"BIN_OR_TKN\"] = 42] = \"BIN_OR_TKN\";\r\n    TokenType[TokenType[\"BIN_AND_TKN\"] = 43] = \"BIN_AND_TKN\";\r\n    TokenType[TokenType[\"BIN_XOR_TKN\"] = 44] = \"BIN_XOR_TKN\";\r\n    TokenType[TokenType[\"BIN_NOT_TKN\"] = 45] = \"BIN_NOT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_RIGHT_TKN\"] = 46] = \"BIN_SHIFT_RIGHT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_ARITHMETIC_RIGHT_TKN\"] = 47] = \"BIN_SHIFT_ARITHMETIC_RIGHT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_LEFT_TKN\"] = 48] = \"BIN_SHIFT_LEFT_TKN\";\r\n    TokenType[TokenType[\"ARROW_TKN\"] = 49] = \"ARROW_TKN\";\r\n    TokenType[TokenType[\"RETURN_TKN\"] = 50] = \"RETURN_TKN\";\r\n    TokenType[TokenType[\"BACKSLASH_TKN\"] = 51] = \"BACKSLASH_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_TKN\"] = 52] = \"OP_ADD_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_TKN\"] = 53] = \"OP_SUBTR_TKN\";\r\n    TokenType[TokenType[\"OP_MULT_TKN\"] = 54] = \"OP_MULT_TKN\";\r\n    TokenType[TokenType[\"OP_DIVIDE_TKN\"] = 55] = \"OP_DIVIDE_TKN\";\r\n    TokenType[TokenType[\"OP_CARROT_TKN\"] = 56] = \"OP_CARROT_TKN\";\r\n    TokenType[TokenType[\"OP_MODULUS_TKN\"] = 57] = \"OP_MODULUS_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_ADD_TKN\"] = 58] = \"OP_ADD_ADD_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_EQUALS_TKN\"] = 59] = \"OP_ADD_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_SUBTR_TKN\"] = 60] = \"OP_SUBTR_SUBTR_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_EQUALS_TKN\"] = 61] = \"OP_SUBTR_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_MULT_EQUALS_TKN\"] = 62] = \"OP_MULT_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_DIV_EQUALS_TKN\"] = 63] = \"OP_DIV_EQUALS_TKN\";\r\n    TokenType[TokenType[\"HASH_RANGE_TKN\"] = 64] = \"HASH_RANGE_TKN\";\r\n    TokenType[TokenType[\"DOUBLE_QUOTE_TKN\"] = 65] = \"DOUBLE_QUOTE_TKN\";\r\n    TokenType[TokenType[\"DOT_TKN\"] = 66] = \"DOT_TKN\";\r\n    TokenType[TokenType[\"ELLIPSIS_TKN\"] = 67] = \"ELLIPSIS_TKN\";\r\n    TokenType[TokenType[\"REVERSE_ARROW_TKN\"] = 68] = \"REVERSE_ARROW_TKN\";\r\n    TokenType[TokenType[\"COMMA_TKN\"] = 69] = \"COMMA_TKN\";\r\n    TokenType[TokenType[\"SEMI_COLON_TKN\"] = 70] = \"SEMI_COLON_TKN\";\r\n    TokenType[TokenType[\"UNKNOWN_TKN\"] = 71] = \"UNKNOWN_TKN\";\r\n    TokenType[TokenType[\"END_TKN\"] = 72] = \"END_TKN\";\r\n})(TokenType || (TokenType = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Token.ts\n");

/***/ }),

/***/ "./src/scuft/lang/TypeChecker.ts":
/*!***************************************!*\
  !*** ./src/scuft/lang/TypeChecker.ts ***!
  \***************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ TypeChecker\n/* harmony export */ });\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Scope */ \"./src/scuft/lang/Scope.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n\r\n\r\n\r\n\r\nclass TypeChecker {\r\n    constructor(errHandler) {\r\n        this.typeOfNameStack = [];\r\n        this.typeCheckTypeConstructStack = [];\r\n        this.err = _ErrorHandler__WEBPACK_IMPORTED_MODULE_1__.ErrorHandler.fromHandler(\"----TypeChecker----\\n\", errHandler);\r\n    }\r\n    castAccess(typeExpr, accessCast) {\r\n        if (accessCast === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN) {\r\n            if (typeExpr.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST) {\r\n                return typeExpr.castedType;\r\n            }\r\n            else {\r\n                return typeExpr;\r\n            }\r\n        }\r\n        let cast = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTAccessCast(typeExpr.locToken);\r\n        cast.accessType = accessCast;\r\n        cast.castedType = typeExpr;\r\n        return this.resolveAccessCast(cast);\r\n    }\r\n    checkAccessCast(typeExpr, accessCast) {\r\n        if (typeExpr.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST) {\r\n            return accessCast === typeExpr.accessType;\r\n        }\r\n        else {\r\n            return accessCast === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN;\r\n        }\r\n    }\r\n    resolveAccessCast(accessCast) {\r\n        if (accessCast.castedType.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST) {\r\n            let isInMut = accessCast.castedType.accessType === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN;\r\n            if (accessCast.accessType === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN) {\r\n                if (isInMut) {\r\n                }\r\n                else {\r\n                    this.err.atNode_PANIC(\"Can't cast const type to mutable\", accessCast);\r\n                }\r\n            }\r\n            else {\r\n                if (isInMut) {\r\n                }\r\n                else {\r\n                }\r\n            }\r\n            accessCast.castedType = accessCast.castedType.castedType;\r\n        }\r\n        return accessCast;\r\n    }\r\n    isTypeEqual(t0, t1, scope) {\r\n        if (!t0.resolved)\r\n            this.resolveConstExpression(t0, scope);\r\n        if (!t1.resolved)\r\n            this.resolveConstExpression(t1, scope);\r\n        t1 = t1.resolved;\r\n        t0 = t0.resolved;\r\n        if (t0.nodeName !== t1.nodeName)\r\n            return false;\r\n        switch (t0.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST:\r\n                let accessCast0 = t0;\r\n                let accessCast1 = t1;\r\n                if (accessCast0.accessType !== accessCast1.accessType)\r\n                    return false;\r\n                return this.isTypeEqual(accessCast0.castedType, accessCast1.castedType, scope);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL:\r\n                let typeLit0 = t0;\r\n                let typeLit1 = t1;\r\n                return typeLit0.type === typeLit1.type;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION_TYPE:\r\n                let func0 = t0;\r\n                let func1 = t1;\r\n                if (!this.isTypeEqual(func0.outType, func1.outType, scope))\r\n                    return false;\r\n                for (let i = 0; i < func0.inputType.length; i++) {\r\n                    if (!this.isTypeEqual(func0.inputType[i], func1.inputType[i], scope))\r\n                        return false;\r\n                }\r\n                return true;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF:\r\n                let typeDef0 = t0;\r\n                let typeDef1 = t1;\r\n                return typeDef0.locToken.equals(typeDef1.locToken);\r\n            default:\r\n                throw \"Expression is not a pure type and can't be used in isTypeEqual\";\r\n        }\r\n    }\r\n    isEqualToUncastedType(typeExpr, typeLiteral) {\r\n        if (typeExpr.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST) {\r\n            return this.isEqualToUncastedType(typeExpr.castedType, typeLiteral);\r\n        }\r\n        if (typeExpr.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL)\r\n            return false;\r\n        return typeExpr.type === typeLiteral;\r\n    }\r\n    resolveTypeExpression(expr, scope) {\r\n        this.resolveConstExpression(expr, scope);\r\n        if (!this.isLooseType(expr.resolved)) {\r\n            this.err.atWholeNode_PANIC(\"Expression expected to be a type but got \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expr.resolved) + \" instead\", expr);\r\n        }\r\n    }\r\n    isLooseType(expr) {\r\n        switch (expr.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST:\r\n                let accessCast = expr;\r\n                return this.isLooseType(accessCast.castedType);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL:\r\n                return true;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION_TYPE:\r\n                let funcType = expr;\r\n                for (let i = 0; i < funcType.inputType.length; i++) {\r\n                    if (!this.isLooseType(funcType.inputType[i]))\r\n                        return false;\r\n                }\r\n                return this.isLooseType(funcType.outType);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF:\r\n                return true;\r\n            default:\r\n                console.log(expr);\r\n                return false;\r\n        }\r\n    }\r\n    resolveConstExpression(expr, scope) {\r\n        this.recurseResConstExpression(expr, expr, scope);\r\n    }\r\n    recurseResConstExpression(expr, sourceExpr, scope) {\r\n        if (expr.resolved)\r\n            return;\r\n        switch (expr.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST:\r\n                let accessCast = this.resolveAccessCast(expr);\r\n                this.resolveTypeExpression(accessCast.castedType, scope);\r\n                expr.resolved = accessCast;\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL:\r\n                expr.resolved = expr;\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION_TYPE:\r\n                let astFuncType = expr;\r\n                for (let i = 0; i < astFuncType.inputType.length; i++) {\r\n                    this.resolveTypeExpression(astFuncType.inputType[i], scope);\r\n                }\r\n                this.resolveTypeExpression(astFuncType.outType, scope);\r\n                expr.resolved = expr;\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF:\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.MODULE:\r\n                expr.resolved = expr;\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION:\r\n                let astFunc = expr;\r\n                this.assertPureFunction(astFunc, astFunc);\r\n                expr.resolved = expr;\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME:\r\n                let astName = expr;\r\n                let nameDecl = this.searchDeclarationName(astName, scope);\r\n                if (nameDecl) {\r\n                    if (!nameDecl.accessAssignment ||\r\n                        nameDecl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                        this.err\r\n                            .atWholeNode(\"Only constant expressions can be used to define other constant expressions\", sourceExpr)\r\n                            .atNode_PANIC(\"This declaration was expected to be constant\", nameDecl);\r\n                    }\r\n                    this.recurseResConstExpression(nameDecl.rvalue, sourceExpr, scope);\r\n                    expr.resolved = nameDecl.rvalue.resolved;\r\n                    break;\r\n                }\r\n                else {\r\n                    this.err.atNode_PANIC(\"Couldn't find constant variable '\" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(astName) + \"'\", astName);\r\n                }\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.DOT_OP:\r\n                let refDot = expr;\r\n                this.recurseResConstExpression(refDot.rootValue, sourceExpr, scope);\r\n                let rootDec;\r\n                let accessScope;\r\n                if (refDot.rootValue.resolved.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.MODULE) {\r\n                    let mod = refDot.rootValue.resolved;\r\n                    rootDec = mod.moduleDecRef;\r\n                    accessScope = mod.scope;\r\n                }\r\n                else if (refDot.rootValue.resolved.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF) {\r\n                    let typeDef = refDot.rootValue.resolved;\r\n                    rootDec = typeDef.typeDecRef;\r\n                    accessScope = typeDef.scope;\r\n                }\r\n                else if (refDot.rootValue.resolved.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_CONSTRUCT) {\r\n                    let typeConstruct = refDot.rootValue.resolved;\r\n                    let typeDef = typeConstruct.typeRef.resolved;\r\n                    let typePropDec = typeDef.scope.table.get(refDot.memberValue.refName);\r\n                    if (typePropDec) {\r\n                        let propValue = typePropDec.rvalue;\r\n                        if (!propValue) {\r\n                            for (let i = 0; i < typeConstruct.assignments.length; i++) {\r\n                                if (typeConstruct.assignments[i].lvalue.refName ===\r\n                                    typePropDec.lvalue.refName) {\r\n                                    propValue = typeConstruct.assignments[i].rvalue;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!propValue) {\r\n                                this.err\r\n                                    .atWholeNode(\"Const expression can't reference an uninitialized property\", refDot)\r\n                                    .atWholeNode(\"Property \" +\r\n                                    _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(refDot.memberValue) +\r\n                                    \" is not initialized in the type definition\", typePropDec)\r\n                                    .atWholeNode_PANIC(\"...nor is it initialized in the const type construction\", typeConstruct.resolved);\r\n                            }\r\n                        }\r\n                        this.recurseResConstExpression(propValue, sourceExpr, scope);\r\n                        expr.resolved = propValue.resolved;\r\n                        break;\r\n                    }\r\n                    else {\r\n                        this.err.atWholeNode_PANIC(\"Property \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(refDot.memberValue) +\r\n                            \" not found in \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(refDot.rootValue), refDot);\r\n                    }\r\n                }\r\n                else {\r\n                    this.err.atWholeNode_PANIC(_Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(refDot.rootValue) +\r\n                        \" has no properties which can be accessed because it has the type \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(this.typeOfExpression(refDot.rootValue.resolved, scope)), refDot.rootValue);\r\n                }\r\n                let refDecl = accessScope.table.get(refDot.memberValue.refName);\r\n                if (refDecl) {\r\n                    if (!refDecl.rvalue ||\r\n                        !refDecl.accessAssignment ||\r\n                        refDecl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                        this.err\r\n                            .atWholeNode(\"Constant expression is attempting to access non-constant values\", refDot)\r\n                            .atWholeNode(\"In \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(rootDec.lvalue) + \"...\", refDot.rootValue.resolved)\r\n                            .atWholeNode_PANIC(\"Attempted to access \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(refDot.memberValue) + \" which is not constant\", refDecl);\r\n                    }\r\n                    this.recurseResConstExpression(refDecl.rvalue, sourceExpr, scope);\r\n                    expr.resolved = refDecl.rvalue.resolved;\r\n                    break;\r\n                }\r\n                else {\r\n                    this.err.atWholeNode_PANIC(\"Property \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(refDot.memberValue) +\r\n                        \" not found in \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(refDot.rootValue), refDot);\r\n                }\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_CONSTRUCT:\r\n                let astConstruct = expr;\r\n                this.recurseResConstExpression(astConstruct.typeRef, sourceExpr, scope);\r\n                if (astConstruct.typeRef.resolved.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL) {\r\n                    this.err.atWholeNode_PANIC(\"Can't construct a \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(astConstruct.typeRef.resolved) +\r\n                        \" using a type constructor\", astConstruct.typeRef);\r\n                }\r\n                if (astConstruct.typeRef.resolved.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF) {\r\n                    this.err.atWholeNode_PANIC(\"Can't construct type for unknown type '\" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(astConstruct.typeRef.resolved) + \"'\", astConstruct.typeRef);\r\n                }\r\n                for (let i = 0; i < astConstruct.assignments.length; i++) {\r\n                    this.recurseResConstExpression(astConstruct.assignments[i].rvalue, sourceExpr, scope);\r\n                }\r\n                expr.resolved = expr;\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.CALL:\r\n                throw \"Unimplemented constant resolution of call: Requires evaluation stuff\";\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.LITERAL:\r\n                expr.resolved = expr;\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.BINARY_OP:\r\n                let astBinOp = expr;\r\n                this.recurseResConstExpression(astBinOp.lvalue, sourceExpr, scope);\r\n                this.recurseResConstExpression(astBinOp.rvalue, sourceExpr, scope);\r\n                expr.resolved = expr;\r\n                break;\r\n            default:\r\n                this.err.atWholeNode_PANIC(\"Expected a constant but got \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expr) + \" instead\", expr);\r\n        }\r\n    }\r\n    assertPureFunction(func, srcFunc) {\r\n        this.assertPureBlock(func.block, srcFunc);\r\n    }\r\n    assertPureBlock(block, srcFunc) {\r\n        let statements = block.statements;\r\n        for (let i = 0; i < statements.length; i++) {\r\n            switch (statements[i].nodeName) {\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.IF:\r\n                    this.assertPureIf(statements[i], srcFunc);\r\n                    break;\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.WHILE:\r\n                    let astWhile = statements[i];\r\n                    this.assertExprInPureFunc(astWhile.condition, block.scope, srcFunc);\r\n                    this.assertPureBlock(astWhile.block, srcFunc);\r\n                    break;\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.BREAK:\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.CONTINUE:\r\n                    break;\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.RETURN:\r\n                    let astRet = statements[i];\r\n                    this.assertExprInPureFunc(astRet.returnValue, block.scope, srcFunc);\r\n                    break;\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.DECLARATION:\r\n                    let astDecl = statements[i];\r\n                    let ldeclCompare = this.searchDeclarationName(astDecl.lvalue, srcFunc.block.scope);\r\n                    if (ldeclCompare) {\r\n                        if (ldeclCompare.inScope.scopeID < srcFunc.block.scope.scopeID) {\r\n                            this.err\r\n                                .atNode(\"Error in pure function\", srcFunc)\r\n                                .atNode(\"Can't assign a value to a variable outside of a pure function's scope\", statements[i])\r\n                                .atNode_PANIC(\"Outside declaration found here\", ldeclCompare);\r\n                        }\r\n                    }\r\n                    if (astDecl.rvalue && astDecl.rvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION) {\r\n                        this.assertExprInPureFunc(astDecl.rvalue, astDecl.inScope, srcFunc);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType[statements[i].nodeName] + \" constant checking not implemented yet\";\r\n            }\r\n        }\r\n        return block;\r\n    }\r\n    assertPureIf(iff, srcFunc) {\r\n        this.assertExprInPureFunc(iff.condition, iff.consequence.scope.parent, srcFunc);\r\n        this.assertPureBlock(iff.consequence, srcFunc);\r\n        if (iff.alternative) {\r\n            if (iff.alternative.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.BLOCK) {\r\n                this.assertPureBlock(iff.alternative, srcFunc);\r\n            }\r\n            else {\r\n                this.assertPureIf(iff.alternative, srcFunc);\r\n            }\r\n        }\r\n    }\r\n    assertExprInPureFunc(expr, exprScope, srcFunc) {\r\n        switch (expr.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME:\r\n                let name = expr;\r\n                let nameDecl = this.searchDeclarationName(name, exprScope);\r\n                if (nameDecl) {\r\n                    if (nameDecl.inScope.scopeID < srcFunc.block.scope.scopeID) {\r\n                        if (nameDecl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                            this.err\r\n                                .atNode(\"Error in pure function\", srcFunc)\r\n                                .atNode(\"Can't assign a value to a variable outside of a pure function's scope\", expr)\r\n                                .atNode_PANIC(\"Outside declaration found here\", nameDecl);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_CONSTRUCT:\r\n                throw \"Unimplemented purity check for type constructors\";\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.CALL:\r\n                let funcCall = expr;\r\n                let funcRef = funcCall.functionNameRef;\r\n                throw \"Unimplemented purity check for function calls\";\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.LITERAL:\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.BINARY_OP:\r\n                let binOp = expr;\r\n                this.assertExprInPureFunc(binOp.lvalue, exprScope, srcFunc);\r\n                this.assertExprInPureFunc(binOp.rvalue, exprScope, srcFunc);\r\n                break;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.UNARY_OP:\r\n                this.assertExprInPureFunc(expr.value, exprScope, srcFunc);\r\n                break;\r\n            default:\r\n                throw _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expr) + \" not implemented yet (assertExprInPureFunc)\";\r\n        }\r\n    }\r\n    typeOfExpression(expr, scope) {\r\n        switch (expr.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL:\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION_TYPE:\r\n                let funcTypeLitType = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(expr.locToken);\r\n                funcTypeLitType.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.TYPE_TKN;\r\n                return funcTypeLitType;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.MODULE:\r\n                this.typeCheckModule(expr);\r\n                let modType = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(expr.locToken);\r\n                modType.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MODULE_TKN;\r\n                return modType;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF:\r\n                this.typeCheckTypeDefinition(expr);\r\n                let typeDefType = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(expr.locToken);\r\n                typeDefType.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.TYPE_TKN;\r\n                return typeDefType;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION:\r\n                let astFunc = expr;\r\n                this.typeCheckFunction(astFunc);\r\n                let funcType = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFunctionType(astFunc.locToken);\r\n                funcType.inputType = [];\r\n                for (let i = 0; i < astFunc.paramDeclaration.length; i++) {\r\n                    funcType.inputType.push(astFunc.paramDeclaration[i].type.resolved);\r\n                }\r\n                if (astFunc.returnType) {\r\n                    this.resolveConstExpression(astFunc.returnType, scope);\r\n                    funcType.outType = astFunc.returnType.resolved;\r\n                }\r\n                else {\r\n                    funcType.outType = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(funcType.locToken);\r\n                    funcType.outType.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.VOID_TYPE_TKN;\r\n                }\r\n                return funcType;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME:\r\n                return this.typeOfName(expr, scope);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.DOT_OP:\r\n                throw \"Cry... ;-; (Dot operator not yet implemented)\";\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.CALL:\r\n                throw \"Unimplemented type of for call\";\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_CONSTRUCT:\r\n                let astTypeCons = expr;\r\n                this.typeCheckTypeConstruction(astTypeCons, scope);\r\n                return this.castAccess(astTypeCons.typeRef.resolved, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.LITERAL:\r\n                let astLiteral = expr;\r\n                let astLitNewTypeLit = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(expr.locToken);\r\n                switch (astLiteral.value.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.NUMERIC_LITERAL_TKN:\r\n                        astLitNewTypeLit.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.NUM_TYPE_TKN;\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.STRING_LITERAL_TKN:\r\n                        astLitNewTypeLit.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.STRING_TYPE_TKN;\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_TRUE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_FALSE_TKN:\r\n                        astLitNewTypeLit.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BOOL_TYPE_TKN;\r\n                        break;\r\n                    default:\r\n                        throw \"The ASTLiteral does not contain a literal token\";\r\n                }\r\n                return this.castAccess(astLitNewTypeLit, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.UNARY_OP:\r\n                let astUnary = expr;\r\n                let unaryOp = astUnary.operation.type;\r\n                let innerType = this.typeOfExpression(astUnary.value, scope);\r\n                if (unaryOp == _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BIN_NOT_TKN) {\r\n                    if (this.isEqualToUncastedType(innerType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.NUM_TYPE_TKN)) {\r\n                        let typeLiteral = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(expr.locToken);\r\n                        typeLiteral.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.NUM_TYPE_TKN;\r\n                        return typeLiteral;\r\n                    }\r\n                    throw \"operator is acting on not an integer\";\r\n                }\r\n                else if (unaryOp == _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_NOT_TKN) {\r\n                    if (this.isEqualToUncastedType(innerType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BOOL_TYPE_TKN)) {\r\n                        let typeLiteral = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(expr.locToken);\r\n                        typeLiteral.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BOOL_TYPE_TKN;\r\n                        return typeLiteral;\r\n                    }\r\n                    throw \"operator is acting on not a boolean\";\r\n                }\r\n                else {\r\n                    throw \"operator doesn't exist\";\r\n                }\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.BINARY_OP:\r\n                return this.typeOfBinaryOperator(expr, scope);\r\n            default:\r\n                throw \"You done fucked up\";\r\n        }\r\n    }\r\n    typeOfName(exprName, scope) {\r\n        let nameDecl = this.searchDeclarationName(exprName, scope);\r\n        if (!nameDecl) {\r\n            this.err.atNode(\"Couldn't find variable with name '\" + exprName.refName + \"'\", exprName);\r\n            if (scope.getEnclosingScope(_Scope__WEBPACK_IMPORTED_MODULE_2__.ScopeType.MODULE_SCOPE)) {\r\n                this.err.addNote_PANIC(\"Modules can only access constant variables outside of their scope\");\r\n            }\r\n            if (scope.getEnclosingScope(_Scope__WEBPACK_IMPORTED_MODULE_2__.ScopeType.TYPE_SCOPE)) {\r\n                this.err.addNote_PANIC(\"Type definitions can only access constant variables outside of their scope\");\r\n            }\r\n            this.err.panic();\r\n        }\r\n        if (nameDecl.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION)\r\n            throw \"Functions aren't implemented here yet...\";\r\n        if (!nameDecl.inScope.isUnordered() &&\r\n            nameDecl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN &&\r\n            exprName.locToken.isTokenBefore(nameDecl.locToken)) {\r\n            this.err\r\n                .atWholeToken(\"Variable is used before it is declared\", exprName.locToken)\r\n                .atNode(\"Declaration for the variable found here\", nameDecl)\r\n                .addNote_PANIC(\"Forward referencing for immutable and mutable variables is not allowed in block scopes (if, while, for, etc.)\");\r\n        }\r\n        for (let i = this.typeOfNameStack.length - 1; i >= 0; i--) {\r\n            if (exprName.locToken.equals(this.typeOfNameStack[i].locToken)) {\r\n                this.err.atNode(\"Cyclic dependency found when type checking the following\", exprName);\r\n                for (let j = i + 1; j < this.typeOfNameStack.length; j++) {\r\n                    this.err.atNode(\"...which led to type checking the following\", this.typeOfNameStack[j]);\r\n                }\r\n                this.err.panic();\r\n            }\r\n        }\r\n        this.typeOfNameStack.push(exprName);\r\n        this.typeCheckDeclaration(nameDecl);\r\n        this.typeOfNameStack = [];\r\n        if (!this.checkAccessCast(nameDecl.type.resolved, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN)) {\r\n            let resolvedType = nameDecl.type.resolved;\r\n            if (resolvedType.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST) {\r\n                resolvedType = resolvedType.castedType;\r\n            }\r\n            if (resolvedType.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL ||\r\n                resolvedType.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION_TYPE) {\r\n                return this.castAccess(resolvedType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN);\r\n            }\r\n        }\r\n        return nameDecl.type.resolved;\r\n    }\r\n    typeOfBinaryOperator(binaryOp, scope) {\r\n        let lType = this.typeOfExpression(binaryOp.lvalue, scope);\r\n        let rType = this.typeOfExpression(binaryOp.rvalue, scope);\r\n        switch (binaryOp.operation.type) {\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_OR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_AND_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_XOR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_EQUALS_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_NOT_EQUALS_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_LESS_THAN_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_LESS_THAN_EQUAL_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_GREATER_THAN_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.COND_GREATER_THAN_EQUAL_TKN:\r\n                if (this.isEqualToUncastedType(lType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BOOL_TYPE_TKN)) {\r\n                    if (this.isEqualToUncastedType(rType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BOOL_TYPE_TKN)) {\r\n                        let typeLit = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(binaryOp.locToken);\r\n                        typeLit.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BOOL_TYPE_TKN;\r\n                        return this.castAccess(typeLit, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN);\r\n                    }\r\n                    else {\r\n                        this.err\r\n                            .atWholeNode(\"Error while type checking operator\", binaryOp)\r\n                            .atWholeNode(\"Right hand side of operator expected to be of type bool but got \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(rType) +\r\n                            \" instead\", binaryOp.rvalue)\r\n                            .addNote_PANIC(\"No other matching operator overloads\");\r\n                    }\r\n                }\r\n                else {\r\n                    this.err\r\n                        .atWholeNode(\"Error while type checking operator\", binaryOp)\r\n                        .atWholeNode(\"Left hand side of operator expected to be of type bool but got \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(lType) +\r\n                        \" instead\", binaryOp.lvalue)\r\n                        .addNote_PANIC(\"No other matching operator overloads\");\r\n                }\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BIN_OR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BIN_AND_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BIN_XOR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BIN_SHIFT_RIGHT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BIN_SHIFT_LEFT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.OP_ADD_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.OP_SUBTR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.OP_MULT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.OP_DIVIDE_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.OP_CARROT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.OP_MODULUS_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.OP_SUBTR_TKN:\r\n                if (this.isEqualToUncastedType(lType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.NUM_TYPE_TKN)) {\r\n                    if (this.isEqualToUncastedType(rType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.NUM_TYPE_TKN)) {\r\n                        let typeLit = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(binaryOp.locToken);\r\n                        typeLit.type = _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.NUM_TYPE_TKN;\r\n                        return this.castAccess(typeLit, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN);\r\n                    }\r\n                    else {\r\n                        this.err\r\n                            .atWholeNode(\"Error while type checking operator\", binaryOp)\r\n                            .atWholeNode(\"Right hand side of operator expected to be of type num but got \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(rType) +\r\n                            \" instead\", binaryOp.rvalue)\r\n                            .addNote_PANIC(\"No other matching operator overloads\");\r\n                    }\r\n                }\r\n                else {\r\n                    this.err\r\n                        .atWholeNode(\"Error while type checking operator\", binaryOp)\r\n                        .atWholeNode(\"Left hand side of operator expected to be of type num but got \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(lType) +\r\n                        \" instead\", binaryOp.lvalue)\r\n                        .addNote_PANIC(\"No other matching operator overloads\");\r\n                }\r\n            default:\r\n                throw \"Unknown binary operator\";\r\n        }\r\n    }\r\n    searchDeclarationName(name, scope) {\r\n        if (!scope)\r\n            return undefined;\r\n        let outerDecl = this.searchDeclarationName(name, scope.parent);\r\n        let decl = scope.table.get(name.refName);\r\n        if (!outerDecl)\r\n            return decl;\r\n        if (scope.scopeType === _Scope__WEBPACK_IMPORTED_MODULE_2__.ScopeType.MODULE_SCOPE || scope.scopeType === _Scope__WEBPACK_IMPORTED_MODULE_2__.ScopeType.TYPE_SCOPE) {\r\n            if (!outerDecl.accessAssignment || outerDecl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                return undefined;\r\n            }\r\n        }\r\n        if (!decl)\r\n            return outerDecl;\r\n        if (outerDecl.inScope.isUnordered() || outerDecl.locToken.isTokenBefore(decl.locToken)) {\r\n            return outerDecl;\r\n        }\r\n        else {\r\n            return decl;\r\n        }\r\n    }\r\n    typeCheckProgram(prgm) {\r\n        for (let i = 0; i < prgm.declarations.length; i++) {\r\n            this.typeCheckDeclaration(prgm.declarations[i]);\r\n        }\r\n    }\r\n    typeCheckBlock(block, expectedReturnType) {\r\n        for (let i = 0; i < block.withModules.length; i++) {\r\n        }\r\n        for (let i = 0; i < block.statements.length; i++) {\r\n            let statement = block.statements[i];\r\n            switch (statement.nodeName) {\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.IF:\r\n                    this.typeCheckIf(statement, expectedReturnType, block.scope);\r\n                    break;\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.WHILE:\r\n                    let astWhile = statement;\r\n                    let whileCondition = this.typeOfExpression(astWhile.condition, block.scope);\r\n                    if (!this.isEqualToUncastedType(whileCondition, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BOOL_TYPE_TKN)) {\r\n                        this.err.atNode_PANIC(\"While statement condition expected to be a boolean but found \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(whileCondition) +\r\n                            \" instead\", astWhile.condition);\r\n                    }\r\n                    this.typeCheckBlock(astWhile.block, expectedReturnType);\r\n                    break;\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FOR:\r\n                    let astFor = statement;\r\n                    if (!astFor.itemParamDec && !astFor.indexParamDec) {\r\n                        throw \"Either index or item must be defined \";\r\n                    }\r\n                    throw \"unimplemented for loop condition\";\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.BREAK:\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.CONTINUE:\r\n                    break;\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.RETURN:\r\n                    let astReturn = statement;\r\n                    if (expectedReturnType) {\r\n                        if (!astReturn.returnValue) {\r\n                            this.err\r\n                                .atWholeNode(\"Enclosing function has return type of \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expectedReturnType), expectedReturnType)\r\n                                .atNode_PANIC(\"Return statement expected to return an expression but instead got nothing\", astReturn);\r\n                        }\r\n                        let returnValType = this.typeOfExpression(astReturn.returnValue, block.scope);\r\n                        if (this.checkAccessCast(expectedReturnType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_CAST_TKN)) {\r\n                            this.resolveConstExpression(returnValType, block.scope);\r\n                            returnValType = this.castAccess(returnValType.resolved, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_CAST_TKN);\r\n                        }\r\n                        else if (this.checkAccessCast(expectedReturnType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN)) {\r\n                            returnValType = this.castAccess(returnValType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN);\r\n                        }\r\n                        else if (this.checkAccessCast(expectedReturnType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN)) {\r\n                            if (this.checkAccessCast(returnValType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_CAST_TKN)) {\r\n                                this.err\r\n                                    .atWholeNode(\"Return type of function is of type \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expectedReturnType), expectedReturnType)\r\n                                    .atWholeNode(\"Const reference to a type instance can't be casted to a mutable type\", astReturn.returnValue)\r\n                                    .addNote_PANIC(\"Casting the reference to a mutable type would enable modification of the original const variable\");\r\n                            }\r\n                            if (this.checkAccessCast(returnValType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN)) {\r\n                                this.err\r\n                                    .atWholeNode(\"Return type of function is of type \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expectedReturnType), expectedReturnType)\r\n                                    .atWholeNode(\"Immutable reference to a type instance can't be casted to a mutable type\", astReturn.returnValue)\r\n                                    .addNote_PANIC(\"Casting the reference to a mutable type would enable modification of the original immutable variable\");\r\n                            }\r\n                            returnValType = this.castAccess(returnValType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN);\r\n                        }\r\n                        if (!this.isTypeEqual(expectedReturnType, returnValType, block.scope)) {\r\n                            this.err\r\n                                .atWholeNode(\"Mismatch between function return type and return statement expression with type \" +\r\n                                _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(returnValType), returnValType)\r\n                                .atWholeNode_PANIC(\"Function return type expected to be \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expectedReturnType), expectedReturnType);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (astReturn.returnValue) {\r\n                            this.err.atWholeNode_PANIC(\"Function has implicit return type of void. Expected to return with no expression but found the following\", astReturn.returnValue);\r\n                        }\r\n                    }\r\n                    break;\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.DECLARATION:\r\n                    this.typeCheckDeclaration(statement);\r\n                    break;\r\n                default:\r\n                    throw \"Unimplemented type checking in block\";\r\n            }\r\n        }\r\n    }\r\n    typeCheckIf(iff, expectedReturnType, scope) {\r\n        let ifConditionType = this.typeOfExpression(iff.condition, scope);\r\n        if (this.isEqualToUncastedType(ifConditionType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.BOOL_TYPE_TKN)) {\r\n            if (iff.consequence)\r\n                this.typeCheckBlock(iff.consequence, expectedReturnType);\r\n            if (iff.alternative) {\r\n                if (iff.alternative.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.BLOCK) {\r\n                    this.typeCheckBlock(iff.alternative, expectedReturnType);\r\n                }\r\n                else {\r\n                    this.typeCheckIf(iff.alternative, expectedReturnType, scope);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.err.atNode_PANIC(\"If statement conditional must be a boolean. Instead found \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(ifConditionType), iff.condition);\r\n        }\r\n    }\r\n    typeCheckDeclaration(decl) {\r\n        if (decl.hasTypeChecked)\r\n            return;\r\n        if (decl.type)\r\n            this.resolveTypeExpression(decl.type, decl.inScope);\r\n        if (decl.rvalue) {\r\n            if (decl.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.MODULE) {\r\n                if (decl.lvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME) {\r\n                    this.err.atNode_PANIC(\"Module declaration must declare a new single variable name\", decl);\r\n                }\r\n                if (decl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                    this.err.atToken_PANIC(\"Module declarations must be constant: \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.lvalue) + \" => module {...}\", decl.accessAssignment);\r\n                }\r\n            }\r\n            if (decl.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF) {\r\n                if (decl.lvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME) {\r\n                    this.err.atNode_PANIC(\"Type definition must declare a new single variable name\", decl);\r\n                }\r\n                if (decl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                    this.err.atToken_PANIC(\"Type definitions must be constant: \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.lvalue) + \" => type {...}\", decl.accessAssignment);\r\n                }\r\n            }\r\n            let expressionType;\r\n            if (decl.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                this.resolveConstExpression(decl.rvalue, decl.inScope);\r\n                expressionType = this.castAccess(this.typeOfExpression(decl.rvalue.resolved, decl.inScope), _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_CAST_TKN);\r\n            }\r\n            else if (decl.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUTABLE_ASSIGNMENT_TKN) {\r\n                expressionType = this.castAccess(this.typeOfExpression(decl.rvalue, decl.inScope), _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN);\r\n            }\r\n            else if (decl.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUTABLE_ASSIGNMENT_TKN) {\r\n                expressionType = this.typeOfExpression(decl.rvalue, decl.inScope);\r\n                if (this.checkAccessCast(expressionType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_CAST_TKN)) {\r\n                    this.err\r\n                        .atWholeNode(\"The right side value of the declaration is of inferred type \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expressionType), decl.rvalue)\r\n                        .atWholeNode(\"Constant reference to a type instance can't be assigned to a mutable variable\", decl)\r\n                        .addNote_PANIC(\"Casting the reference to a mutable type would enable modification of the original const variable\");\r\n                }\r\n                if (this.checkAccessCast(expressionType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN)) {\r\n                    this.err\r\n                        .atWholeNode(\"The right side value of the declaration is of inferred type \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expressionType), decl.rvalue)\r\n                        .atWholeNode(\"Immutable reference to a type instance can't be assigned to a mutable variable\", decl)\r\n                        .addNote_PANIC(\"Casting the reference to a mutable type would enable modification of the original immutable variable\");\r\n                }\r\n                expressionType = this.castAccess(expressionType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN);\r\n            }\r\n            if (!decl.type) {\r\n                decl.type = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeLiteral(decl.lvalue.locToken);\r\n                decl.type.resolved = expressionType;\r\n            }\r\n            else {\r\n                if (this.checkAccessCast(decl.type.resolved, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_CAST_TKN)) {\r\n                    if (decl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                        this.err\r\n                            .atWholeToken(\"Mismatch between variable type and assignment type\", decl.accessAssignment)\r\n                            .addNote_PANIC(\"Use => to denote const assignment \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.lvalue) +\r\n                            \": \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.type) +\r\n                            \" => \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.rvalue) +\r\n                            \";\");\r\n                    }\r\n                }\r\n                else if (this.checkAccessCast(decl.type.resolved, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN)) {\r\n                    if (decl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUTABLE_ASSIGNMENT_TKN) {\r\n                        this.err\r\n                            .atWholeToken(\"Mismatch between variable type and assignment type\", decl.accessAssignment)\r\n                            .addNote_PANIC(\"Use = to denote immutable assignment \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.lvalue) +\r\n                            \": \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.type) +\r\n                            \" = \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.rvalue) +\r\n                            \";\");\r\n                    }\r\n                }\r\n                else if (this.checkAccessCast(decl.type.resolved, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUT_CAST_TKN)) {\r\n                    if (decl.accessAssignment.type !== _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUTABLE_ASSIGNMENT_TKN) {\r\n                        this.err\r\n                            .atWholeToken(\"Mismatch between variable type and assignment type\", decl.accessAssignment)\r\n                            .addNote_PANIC(\"Use ~= to denote mut assignment \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.lvalue) +\r\n                            \": \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.type) +\r\n                            \" ~= \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.rvalue) +\r\n                            \";\");\r\n                    }\r\n                }\r\n                if (!this.isTypeEqual(decl.type.resolved, expressionType, decl.inScope)) {\r\n                    this.err\r\n                        .atNode(\"Type mismatch between declared type and expression type. The inferred declare type is \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.type.resolved), decl.type)\r\n                        .atNode_PANIC(\"The expression has an inferred type of \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expressionType), decl.rvalue);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (decl.type.resolved.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST) {\r\n                let cast = decl.type.resolved;\r\n                if (cast.accessType === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_CAST_TKN) {\r\n                    this.err.atNode_PANIC(\"Constant declarations must define a right side value\", decl);\r\n                }\r\n                else {\r\n                    decl.accessAssignment = _Token__WEBPACK_IMPORTED_MODULE_3__.Token.fromType(_Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUTABLE_ASSIGNMENT_TKN, decl.type.locToken);\r\n                }\r\n            }\r\n            else {\r\n                decl.accessAssignment = _Token__WEBPACK_IMPORTED_MODULE_3__.Token.fromType(_Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUTABLE_ASSIGNMENT_TKN, decl.type.locToken);\r\n            }\r\n        }\r\n        let otherDecl = this.searchDeclarationName(decl.lvalue, decl.inScope);\r\n        if (otherDecl && !otherDecl.locToken.equals(decl.locToken)) {\r\n            if (!decl.isAssignment) {\r\n                decl.isAssignment = true;\r\n                decl.inScope.table.delete(decl.lvalue.refName);\r\n            }\r\n            if (decl.inScope.isUnordered() && decl.inScope.equals(otherDecl.inScope)) {\r\n                if (decl.inScope.scopeType === _Scope__WEBPACK_IMPORTED_MODULE_2__.ScopeType.GLOBAL_SCOPE) {\r\n                    this.err\r\n                        .atNode(\"Found duplicate variable declaration in global scope\", decl)\r\n                        .atNode(\"Other duplicate declaration found here\", otherDecl)\r\n                        .addNote_PANIC(\"Can't have duplicate variables in global scope\");\r\n                }\r\n                this.err\r\n                    .atNode(\"Found duplicate variable declaration\", decl)\r\n                    .atNode(\"Other duplicate declaration found here\", otherDecl)\r\n                    .addNote_PANIC(\"Can't have duplicate variables in modules or type definitions\");\r\n            }\r\n            this.typeCheckDeclaration(otherDecl);\r\n            if (otherDecl.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                this.err\r\n                    .atWholeToken(\"Reassignment of constant variable is not allowed\", decl.accessAssignment)\r\n                    .atWholeToken(\"Const declaration already exists here\", otherDecl.locToken)\r\n                    .addNote_PANIC(\"All constant variables are unordered within a scope\");\r\n            }\r\n            if (otherDecl.rvalue && otherDecl.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUTABLE_ASSIGNMENT_TKN) {\r\n                if (otherDecl.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION) {\r\n                    this.err\r\n                        .atWholeNode(\"Function overloading is not allowed\", decl)\r\n                        .atWholeNode_PANIC(\"Other function declaration already exists here\", otherDecl);\r\n                }\r\n                else {\r\n                    this.err\r\n                        .atWholeNode(\"Reassignment of immutable variable is not allowed\", decl)\r\n                        .atWholeNode_PANIC(\"Immutable declaration already exists here\", otherDecl);\r\n                }\r\n            }\r\n            if (decl.type &&\r\n                (decl.type.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL || decl.type.type)) {\r\n                this.err\r\n                    .atNode(\"Duplicate variable declaration found\", decl)\r\n                    .atNode(\"Other variable found in outer scope\", otherDecl)\r\n                    .addNote_PANIC(\"Variable shadowing is not allowed in this language\");\r\n            }\r\n            if (!this.isTypeEqual(otherDecl.type, decl.type, decl.inScope)) {\r\n                this.err\r\n                    .atNode(\"Type mismatch between variable assignment and declaration. Inferred type of assignment is \" +\r\n                    _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.type.resolved), decl)\r\n                    .atNode(\"Declaration found here with inferred type of \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(otherDecl.type.resolved), otherDecl);\r\n                if (otherDecl.type.resolved.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST &&\r\n                    decl.type.resolved.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.ACCESS_CAST) {\r\n                    this.err.addNote_PANIC(\"Must use consistent access type when assigning to a declared variable\");\r\n                }\r\n                else {\r\n                    this.err.panic();\r\n                }\r\n            }\r\n        }\r\n        decl.hasTypeChecked = true;\r\n    }\r\n    typeCheckModule(module) {\r\n        for (let i = 0; i < module.declarations.length; i++) {\r\n            this.typeCheckDeclaration(module.declarations[i]);\r\n        }\r\n    }\r\n    typeCheckTypeDefinition(typeDefinition) {\r\n        for (let i = 0; i < typeDefinition.declarations.length; i++) {\r\n            this.typeCheckDeclaration(typeDefinition.declarations[i]);\r\n        }\r\n    }\r\n    typeCheckFunction(func) {\r\n        for (let i = 0; i < func.paramDeclaration.length; i++) {\r\n            this.typeCheckDeclaration(func.paramDeclaration[i]);\r\n        }\r\n        if (func.returnType) {\r\n            this.resolveConstExpression(func.returnType, func.block.scope);\r\n            if (this.isEqualToUncastedType(func.returnType.resolved, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.VOID_TYPE_TKN)) {\r\n                this.typeCheckBlock(func.block, undefined);\r\n            }\r\n        }\r\n        this.typeCheckBlock(func.block, func.returnType);\r\n        if (func.returnType && !this.isEqualToUncastedType(func.returnType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.VOID_TYPE_TKN)) {\r\n            if (!func.block.hasReturn) {\r\n                this.err.atWholeNode_PANIC(\"A function with a return type must return a value for all cases\", func.returnType);\r\n            }\r\n        }\r\n    }\r\n    typeCheckTypeConstruction(typeConstruct, scope) {\r\n        let typeConsAssignments = typeConstruct.assignments;\r\n        for (let i = this.typeCheckTypeConstructStack.length - 1; i >= 0; i--) {\r\n            if (typeConstruct.locToken.equals(this.typeCheckTypeConstructStack[i].locToken)) {\r\n                this.err.atNode(\"Recursive type definition found when type checking the following\", typeConstruct);\r\n                for (let j = i + 1; j < this.typeCheckTypeConstructStack.length; j++) {\r\n                    this.err.atNode(\"...which leads to the creation of the following\", this.typeCheckTypeConstructStack[j]);\r\n                }\r\n                this.err.panic();\r\n            }\r\n        }\r\n        this.typeCheckTypeConstructStack.push(typeConstruct);\r\n        this.typeCheckTypeConstructStack.push(typeConstruct.typeRef);\r\n        this.resolveConstExpression(typeConstruct.typeRef, scope);\r\n        let constTypeName = typeConstruct.typeRef.resolved;\r\n        if (constTypeName.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF) {\r\n            this.err\r\n                .atWholeNode(\"Type constuction does not refer to the creation of a type\", typeConstruct.typeRef)\r\n                .atWholeNode_PANIC(_Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(typeConstruct.typeRef) +\r\n                \" evaluates to \" +\r\n                _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(constTypeName) +\r\n                \" which is not a valid type\", constTypeName);\r\n        }\r\n        let typeDef = constTypeName;\r\n        this.typeCheckTypeConstructStack = [];\r\n        for (let i = 0; i < typeConsAssignments.length; i++) {\r\n            let resolvedAssignmentType = this.typeOfExpression(typeConsAssignments[i].rvalue, scope);\r\n            let assignmentVarName = typeConsAssignments[i].lvalue.refName;\r\n            let typeVarDecl = undefined;\r\n            for (let j = 0; j < typeDef.declarations.length; j++) {\r\n                if (typeDef.declarations[j].lvalue.refName === assignmentVarName) {\r\n                    typeVarDecl = typeDef.declarations[j];\r\n                    this.typeCheckDeclaration(typeVarDecl);\r\n                    if (typeVarDecl.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                        this.err\r\n                            .atWholeNode(\"Error in type construction\", typeConstruct)\r\n                            .atToken(\"Attempting to assign a new value to an already constant variable\", typeConsAssignments[i].locToken)\r\n                            .atNode_PANIC(\"Constant variable in type definition found here\", typeVarDecl);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if (typeVarDecl) {\r\n                if (typeVarDecl.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.MUTABLE_ASSIGNMENT_TKN) {\r\n                    if (this.checkAccessCast(resolvedAssignmentType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN)) {\r\n                        this.err\r\n                            .atWholeNode(\"Error in type construction\", typeConstruct)\r\n                            .atNode(\"Variable assignment with inferred type of \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(resolvedAssignmentType), typeConsAssignments[i].rvalue)\r\n                            .atNode(\"Immutable reference to a type instance can't be assigned to mutable variable found here\", typeVarDecl)\r\n                            .addNote_PANIC(\"Casting the reference to a mutable type would enable modification of the original immutable variable\");\r\n                    }\r\n                }\r\n                else if (typeVarDecl.accessAssignment.type === _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUTABLE_ASSIGNMENT_TKN) {\r\n                    resolvedAssignmentType = this.castAccess(resolvedAssignmentType, _Token__WEBPACK_IMPORTED_MODULE_3__.TokenType.IMMUT_CAST_TKN);\r\n                }\r\n                if (!this.isTypeEqual(resolvedAssignmentType, typeVarDecl.type, scope)) {\r\n                    this.err\r\n                        .atWholeNode(\"Error in type construction\", typeConstruct)\r\n                        .atToken(\"Variable assignment with inferred type of \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(resolvedAssignmentType), typeConsAssignments[i].locToken)\r\n                        .atNode_PANIC(\"...is incompatible with expected type of \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(typeVarDecl.type.resolved), typeVarDecl);\r\n                }\r\n            }\r\n            else {\r\n                this.err\r\n                    .atNode(\"Error in type construction\", typeConstruct)\r\n                    .atNode(\"Property name '\" + assignmentVarName + \"' does not exist in type\", typeConstruct.typeRef)\r\n                    .atToken_PANIC(\"Invalid assignment found here\", typeConsAssignments[i].locToken);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/TypeChecker.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/main.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;