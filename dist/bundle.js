/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scuft/test/5-ModuleTypeDefinitionTest.scft":
/*!********************************************************!*\
  !*** ./src/scuft/test/5-ModuleTypeDefinitionTest.scft ***!
  \********************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"Point.test = type {\\r\\n    x: num;\\r\\n    y: num;\\r\\n    z: num;\\r\\n}\\r\\nParticle = type {\\r\\n    point: Point;\\r\\n    existence: bool = true;\\r\\n    glowing: bool;\\r\\n    name: string;\\r\\n    message = \\\"facets\\\";\\r\\n}\\r\\n\\r\\ntest = module {\\r\\n    add = (a: num, b: num) -> num {\\r\\n        return a + b;\\r\\n    }\\r\\n    booolerrr: \\\\(bool, bool, num, num) -> bool = (a: bool, b: bool, x: Astrology.Star, y: num) -> bool {\\r\\n        return x > y $$ a && b || (a || b);\\r\\n\\r\\n        for i in #range [0, 10) {\\r\\n            //0...9\\r\\n            break;\\r\\n        }\\r\\n        for i in #range (0, 10) {\\r\\n            //1...9\\r\\n\\r\\n            continue;\\r\\n            break;\\r\\n        }\\r\\n        for i in #range (0, 10] {\\r\\n            //1...10\\r\\n        }\\r\\n        for i in #range [0, 10] {\\r\\n            //0...10\\r\\n            construct = 3 + Astrology.Star.Proton.{ intersting <- true, notInteresting <- false }; \\r\\n            test.thing.x = new * 3 - particle.pos.x + 2;\\r\\n            thingyVar.that.this.random.bar(cool, 3);\\r\\n        }\\r\\n        for list {\\r\\n\\r\\n        }\\r\\n        for item in Astrology.starArray {\\r\\n\\r\\n        }\\r\\n        for item, index in array {\\r\\n\\r\\n        }\\r\\n        return d;\\r\\n    }\\r\\n    Vector4 = type {\\r\\n        w: num;\\r\\n        x: num;\\r\\n        y: num;\\r\\n        z: num;\\r\\n    }\\r\\n    combine = (a: Vector4, b: Vector4) -> Vector4 {\\r\\n        return a + b;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nAstrology = module {\\r\\n    stars = 5000;\\r\\n    ageOfUniverse = 6000;\\r\\n    findDate = (a: num) -> num {\\r\\n        return ageOfUniverse;\\r\\n    }\\r\\n    Constellation = type {\\r\\n        name: string;\\r\\n        starsCount: num;\\r\\n        isItGood: bool;\\r\\n        interpretation: string;\\r\\n    }\\r\\n    meaning = (a: Constellation) -> Constellation {\\r\\n        nothing = Constellation.{\\r\\n            name       <- \\\"nothing\\\",\\r\\n            starsCount <- 3 + func(3, 4 + 5) + 5\\r\\n        };\\r\\n        while 3 < 2  {\\r\\n            if 3 < 4 {\\r\\n                return \\\"thisOrThat\\\";\\r\\n            } else if 3 != 4 {\\r\\n                d = 90;\\r\\n                return d;\\r\\n            } else {\\r\\n                return \\\"k\\\";\\r\\n            }\\r\\n        }\\r\\n        return nothing;\\r\\n    }\\r\\n}\\r\\n\\r\\nmain = () -> number {\\r\\n    with Astrology;\\r\\n    with test;\\r\\n    a: Point;\\r\\n    b: constellation;\\r\\n    q = meaning(b);\\r\\n    l: Vector4;\\r\\n    l': Vector4;\\r\\n    dl = combine(l, -l');\\r\\n    return;\\r\\n}\\r\\n\\r\\ntest2 = module {\\r\\n    with Astrology;\\r\\n    x = 3 + 5 - 6;\\r\\n    func = () {\\r\\n        do.stuff();\\r\\n    }\\r\\n    var = 3.2+ 4;\\r\\n}\\r\\n\\r\\ntestExpr = Math.test + Point.{x <- 3, y <- 2}.name.test().other * cool;\\r\\npoint = Point.{\\r\\n    x <- 3,\\r\\n    y <- 2\\r\\n};\\r\\n\\r\\nPoint = type {\\r\\n    with test;\\r\\n    x = 0;\\r\\n    y = 0;\\r\\n}\\r\\ntestParticle = Particle.{\\r\\n    point <- Point.{\\r\\n        x <- 3,\\r\\n        y <- 4\\r\\n    }\\r\\n};\\r\\n\\r\\nthing.thing = \\\\(num, num) -> thing().cool;\\r\\n\\r\\nfor test in #range [-2 + x, 345.6 + \\\"test\\\" * -5 - 6 - sin(cos(x), y) ^ 3) {\\r\\n\\r\\n}\\r\\nfor item in #range [3 + 35, strLength) {\\r\\n\\r\\n}\\r\\nfor item in array {\\r\\n    item = item + 1;\\r\\n}\\r\\ntester = 3 + test.(3 + 2).nice() + (\\\\x, y => x + y + 3) (4, 5); \\r\\ntest3 = 4 * 8 . x; \\r\\ntest53 = 3 + s.4 (3);\\r\\n\\r\\ntestOther = \\\\x,y => x ^ y;\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC90ZXN0LzUtTW9kdWxlVHlwZURlZmluaXRpb25UZXN0LnNjZnQ/ZmU5MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsb0JBQW9CLGVBQWUsZUFBZSxlQUFlLEtBQUsscUJBQXFCLHFCQUFxQiwrQkFBK0Isc0JBQXNCLHFCQUFxQiw2QkFBNkIsS0FBSyx1QkFBdUIsdUNBQXVDLHlCQUF5QixTQUFTLDZHQUE2RywrQ0FBK0MseUNBQXlDLDZDQUE2QyxhQUFhLHFDQUFxQyxvREFBb0Qsc0JBQXNCLGFBQWEscUNBQXFDLHFDQUFxQyxxQ0FBcUMsK0VBQStFLCtDQUErQyw2REFBNkQsd0RBQXdELGFBQWEsc0JBQXNCLGlCQUFpQiw2Q0FBNkMsaUJBQWlCLHNDQUFzQyxpQkFBaUIscUJBQXFCLFNBQVMsd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG1CQUFtQixTQUFTLHVEQUF1RCx5QkFBeUIsU0FBUyxLQUFLLGdDQUFnQyxxQkFBcUIsNkJBQTZCLG9DQUFvQyxpQ0FBaUMsU0FBUyw4QkFBOEIseUJBQXlCLDRCQUE0QiwyQkFBMkIsbUNBQW1DLFNBQVMsdURBQXVELHFDQUFxQyw0R0FBNEcsMEJBQTBCLDBCQUEwQiwwQ0FBMEMsaUJBQWlCLGlCQUFpQiwyQkFBMkIsNkJBQTZCLGlCQUFpQixPQUFPLGlDQUFpQyxpQkFBaUIsYUFBYSwyQkFBMkIsU0FBUyxLQUFLLDZCQUE2Qix1QkFBdUIsa0JBQWtCLGlCQUFpQix5QkFBeUIsdUJBQXVCLG1CQUFtQixvQkFBb0IsNkJBQTZCLGVBQWUsS0FBSyx3QkFBd0IsdUJBQXVCLHNCQUFzQixtQkFBbUIsdUJBQXVCLFNBQVMscUJBQXFCLEtBQUssc0NBQXNDLGVBQWUsMEJBQTBCLG1CQUFtQixtQ0FBbUMsc0JBQXNCLGtCQUFrQixjQUFjLGNBQWMsS0FBSyw2QkFBNkIsd0JBQXdCLDhDQUE4QyxNQUFNLG1EQUFtRCxxRkFBcUYsU0FBUyw0Q0FBNEMsU0FBUyx1QkFBdUIsd0JBQXdCLEtBQUssb0VBQW9FLHVCQUF1QiwwQkFBMEIsbUNBQW1DLENBQUMiLCJmaWxlIjoiLi9zcmMvc2N1ZnQvdGVzdC81LU1vZHVsZVR5cGVEZWZpbml0aW9uVGVzdC5zY2Z0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJQb2ludC50ZXN0ID0gdHlwZSB7XFxyXFxuICAgIHg6IG51bTtcXHJcXG4gICAgeTogbnVtO1xcclxcbiAgICB6OiBudW07XFxyXFxufVxcclxcblBhcnRpY2xlID0gdHlwZSB7XFxyXFxuICAgIHBvaW50OiBQb2ludDtcXHJcXG4gICAgZXhpc3RlbmNlOiBib29sID0gdHJ1ZTtcXHJcXG4gICAgZ2xvd2luZzogYm9vbDtcXHJcXG4gICAgbmFtZTogc3RyaW5nO1xcclxcbiAgICBtZXNzYWdlID0gXFxcImZhY2V0c1xcXCI7XFxyXFxufVxcclxcblxcclxcbnRlc3QgPSBtb2R1bGUge1xcclxcbiAgICBhZGQgPSAoYTogbnVtLCBiOiBudW0pIC0+IG51bSB7XFxyXFxuICAgICAgICByZXR1cm4gYSArIGI7XFxyXFxuICAgIH1cXHJcXG4gICAgYm9vb2xlcnJyOiBcXFxcKGJvb2wsIGJvb2wsIG51bSwgbnVtKSAtPiBib29sID0gKGE6IGJvb2wsIGI6IGJvb2wsIHg6IEFzdHJvbG9neS5TdGFyLCB5OiBudW0pIC0+IGJvb2wge1xcclxcbiAgICAgICAgcmV0dXJuIHggPiB5ICQkIGEgJiYgYiB8fCAoYSB8fCBiKTtcXHJcXG5cXHJcXG4gICAgICAgIGZvciBpIGluICNyYW5nZSBbMCwgMTApIHtcXHJcXG4gICAgICAgICAgICAvLzAuLi45XFxyXFxuICAgICAgICAgICAgYnJlYWs7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBmb3IgaSBpbiAjcmFuZ2UgKDAsIDEwKSB7XFxyXFxuICAgICAgICAgICAgLy8xLi4uOVxcclxcblxcclxcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcclxcbiAgICAgICAgICAgIGJyZWFrO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgZm9yIGkgaW4gI3JhbmdlICgwLCAxMF0ge1xcclxcbiAgICAgICAgICAgIC8vMS4uLjEwXFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBmb3IgaSBpbiAjcmFuZ2UgWzAsIDEwXSB7XFxyXFxuICAgICAgICAgICAgLy8wLi4uMTBcXHJcXG4gICAgICAgICAgICBjb25zdHJ1Y3QgPSAzICsgQXN0cm9sb2d5LlN0YXIuUHJvdG9uLnsgaW50ZXJzdGluZyA8LSB0cnVlLCBub3RJbnRlcmVzdGluZyA8LSBmYWxzZSB9OyBcXHJcXG4gICAgICAgICAgICB0ZXN0LnRoaW5nLnggPSBuZXcgKiAzIC0gcGFydGljbGUucG9zLnggKyAyO1xcclxcbiAgICAgICAgICAgIHRoaW5neVZhci50aGF0LnRoaXMucmFuZG9tLmJhcihjb29sLCAzKTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIGZvciBsaXN0IHtcXHJcXG5cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIGZvciBpdGVtIGluIEFzdHJvbG9neS5zdGFyQXJyYXkge1xcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgZm9yIGl0ZW0sIGluZGV4IGluIGFycmF5IHtcXHJcXG5cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIHJldHVybiBkO1xcclxcbiAgICB9XFxyXFxuICAgIFZlY3RvcjQgPSB0eXBlIHtcXHJcXG4gICAgICAgIHc6IG51bTtcXHJcXG4gICAgICAgIHg6IG51bTtcXHJcXG4gICAgICAgIHk6IG51bTtcXHJcXG4gICAgICAgIHo6IG51bTtcXHJcXG4gICAgfVxcclxcbiAgICBjb21iaW5lID0gKGE6IFZlY3RvcjQsIGI6IFZlY3RvcjQpIC0+IFZlY3RvcjQge1xcclxcbiAgICAgICAgcmV0dXJuIGEgKyBiO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcblxcclxcbkFzdHJvbG9neSA9IG1vZHVsZSB7XFxyXFxuICAgIHN0YXJzID0gNTAwMDtcXHJcXG4gICAgYWdlT2ZVbml2ZXJzZSA9IDYwMDA7XFxyXFxuICAgIGZpbmREYXRlID0gKGE6IG51bSkgLT4gbnVtIHtcXHJcXG4gICAgICAgIHJldHVybiBhZ2VPZlVuaXZlcnNlO1xcclxcbiAgICB9XFxyXFxuICAgIENvbnN0ZWxsYXRpb24gPSB0eXBlIHtcXHJcXG4gICAgICAgIG5hbWU6IHN0cmluZztcXHJcXG4gICAgICAgIHN0YXJzQ291bnQ6IG51bTtcXHJcXG4gICAgICAgIGlzSXRHb29kOiBib29sO1xcclxcbiAgICAgICAgaW50ZXJwcmV0YXRpb246IHN0cmluZztcXHJcXG4gICAgfVxcclxcbiAgICBtZWFuaW5nID0gKGE6IENvbnN0ZWxsYXRpb24pIC0+IENvbnN0ZWxsYXRpb24ge1xcclxcbiAgICAgICAgbm90aGluZyA9IENvbnN0ZWxsYXRpb24ue1xcclxcbiAgICAgICAgICAgIG5hbWUgICAgICAgPC0gXFxcIm5vdGhpbmdcXFwiLFxcclxcbiAgICAgICAgICAgIHN0YXJzQ291bnQgPC0gMyArIGZ1bmMoMywgNCArIDUpICsgNVxcclxcbiAgICAgICAgfTtcXHJcXG4gICAgICAgIHdoaWxlIDMgPCAyICB7XFxyXFxuICAgICAgICAgICAgaWYgMyA8IDQge1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRoaXNPclRoYXRcXFwiO1xcclxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAzICE9IDQge1xcclxcbiAgICAgICAgICAgICAgICBkID0gOTA7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xcclxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwia1xcXCI7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgcmV0dXJuIG5vdGhpbmc7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxubWFpbiA9ICgpIC0+IG51bWJlciB7XFxyXFxuICAgIHdpdGggQXN0cm9sb2d5O1xcclxcbiAgICB3aXRoIHRlc3Q7XFxyXFxuICAgIGE6IFBvaW50O1xcclxcbiAgICBiOiBjb25zdGVsbGF0aW9uO1xcclxcbiAgICBxID0gbWVhbmluZyhiKTtcXHJcXG4gICAgbDogVmVjdG9yNDtcXHJcXG4gICAgbCc6IFZlY3RvcjQ7XFxyXFxuICAgIGRsID0gY29tYmluZShsLCAtbCcpO1xcclxcbiAgICByZXR1cm47XFxyXFxufVxcclxcblxcclxcbnRlc3QyID0gbW9kdWxlIHtcXHJcXG4gICAgd2l0aCBBc3Ryb2xvZ3k7XFxyXFxuICAgIHggPSAzICsgNSAtIDY7XFxyXFxuICAgIGZ1bmMgPSAoKSB7XFxyXFxuICAgICAgICBkby5zdHVmZigpO1xcclxcbiAgICB9XFxyXFxuICAgIHZhciA9IDMuMisgNDtcXHJcXG59XFxyXFxuXFxyXFxudGVzdEV4cHIgPSBNYXRoLnRlc3QgKyBQb2ludC57eCA8LSAzLCB5IDwtIDJ9Lm5hbWUudGVzdCgpLm90aGVyICogY29vbDtcXHJcXG5wb2ludCA9IFBvaW50LntcXHJcXG4gICAgeCA8LSAzLFxcclxcbiAgICB5IDwtIDJcXHJcXG59O1xcclxcblxcclxcblBvaW50ID0gdHlwZSB7XFxyXFxuICAgIHdpdGggdGVzdDtcXHJcXG4gICAgeCA9IDA7XFxyXFxuICAgIHkgPSAwO1xcclxcbn1cXHJcXG50ZXN0UGFydGljbGUgPSBQYXJ0aWNsZS57XFxyXFxuICAgIHBvaW50IDwtIFBvaW50LntcXHJcXG4gICAgICAgIHggPC0gMyxcXHJcXG4gICAgICAgIHkgPC0gNFxcclxcbiAgICB9XFxyXFxufTtcXHJcXG5cXHJcXG50aGluZy50aGluZyA9IFxcXFwobnVtLCBudW0pIC0+IHRoaW5nKCkuY29vbDtcXHJcXG5cXHJcXG5mb3IgdGVzdCBpbiAjcmFuZ2UgWy0yICsgeCwgMzQ1LjYgKyBcXFwidGVzdFxcXCIgKiAtNSAtIDYgLSBzaW4oY29zKHgpLCB5KSBeIDMpIHtcXHJcXG5cXHJcXG59XFxyXFxuZm9yIGl0ZW0gaW4gI3JhbmdlIFszICsgMzUsIHN0ckxlbmd0aCkge1xcclxcblxcclxcbn1cXHJcXG5mb3IgaXRlbSBpbiBhcnJheSB7XFxyXFxuICAgIGl0ZW0gPSBpdGVtICsgMTtcXHJcXG59XFxyXFxudGVzdGVyID0gMyArIHRlc3QuKDMgKyAyKS5uaWNlKCkgKyAoXFxcXHgsIHkgPT4geCArIHkgKyAzKSAoNCwgNSk7IFxcclxcbnRlc3QzID0gNCAqIDggLiB4OyBcXHJcXG50ZXN0NTMgPSAzICsgcy40ICgzKTtcXHJcXG5cXHJcXG50ZXN0T3RoZXIgPSBcXFxceCx5ID0+IHggXiB5O1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scuft/test/5-ModuleTypeDefinitionTest.scft\n");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scuft_lang_ScuftTest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scuft/lang/ScuftTest */ \"./src/scuft/lang/ScuftTest.ts\");\n\r\n_scuft_lang_ScuftTest__WEBPACK_IMPORTED_MODULE_0__.default();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9tYWluLnRzP2NkNDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFbUQ7QUFFbkQsMERBQWlCLEVBQUUsQ0FBQyIsImZpbGUiOiIuL3NyYy9tYWluLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgKiBhcyBFQ1NEZW1vIGZyb20gXCIuL3NjdWZ0L2Vjcy9FQ1NEZW1vXCJcclxuXHJcbmltcG9ydCAqIGFzIFNjdWZ0VGVzdCBmcm9tIFwiLi9zY3VmdC9sYW5nL1NjdWZ0VGVzdFwiXHJcblxyXG5TY3VmdFRlc3QuZGVmYXVsdCgpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Ast.ts":
/*!*******************************!*\
  !*** ./src/scuft/lang/Ast.ts ***!
  \*******************************/
/*! namespace exports */
/*! export ASTBinaryOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTBlock [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTBreak [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTCall [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTContinue [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTDeclaration [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTDotOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFmt [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFor [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFunction [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFunctionType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTIf [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTLambda [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTLiteral [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTModule [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTName [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTNode [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTProgram [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTReturn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTSingleVarDeclaration [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeConstruction [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeDefinition [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeLiteral [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTUnaryOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTWhile [provided] [no usage info] [missing usage info prevents renaming] */
/*! export NodeType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export exprToStr [provided] [no usage info] [missing usage info prevents renaming] */
/*! export isExpressionEqual [provided] [no usage info] [missing usage info prevents renaming] */
/*! export printAST [provided] [no usage info] [missing usage info prevents renaming] */
/*! export recurse [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ASTFmt\": () => /* binding */ ASTFmt,\n/* harmony export */   \"exprToStr\": () => /* binding */ exprToStr,\n/* harmony export */   \"recurse\": () => /* binding */ recurse,\n/* harmony export */   \"printAST\": () => /* binding */ printAST,\n/* harmony export */   \"isExpressionEqual\": () => /* binding */ isExpressionEqual,\n/* harmony export */   \"NodeType\": () => /* binding */ NodeType,\n/* harmony export */   \"ASTNode\": () => /* binding */ ASTNode,\n/* harmony export */   \"ASTProgram\": () => /* binding */ ASTProgram,\n/* harmony export */   \"ASTBlock\": () => /* binding */ ASTBlock,\n/* harmony export */   \"ASTDeclaration\": () => /* binding */ ASTDeclaration,\n/* harmony export */   \"ASTSingleVarDeclaration\": () => /* binding */ ASTSingleVarDeclaration,\n/* harmony export */   \"ASTIf\": () => /* binding */ ASTIf,\n/* harmony export */   \"ASTWhile\": () => /* binding */ ASTWhile,\n/* harmony export */   \"ASTFor\": () => /* binding */ ASTFor,\n/* harmony export */   \"ASTBreak\": () => /* binding */ ASTBreak,\n/* harmony export */   \"ASTContinue\": () => /* binding */ ASTContinue,\n/* harmony export */   \"ASTReturn\": () => /* binding */ ASTReturn,\n/* harmony export */   \"ASTModule\": () => /* binding */ ASTModule,\n/* harmony export */   \"ASTTypeDefinition\": () => /* binding */ ASTTypeDefinition,\n/* harmony export */   \"ASTFunction\": () => /* binding */ ASTFunction,\n/* harmony export */   \"ASTTypeLiteral\": () => /* binding */ ASTTypeLiteral,\n/* harmony export */   \"ASTFunctionType\": () => /* binding */ ASTFunctionType,\n/* harmony export */   \"ASTLiteral\": () => /* binding */ ASTLiteral,\n/* harmony export */   \"ASTName\": () => /* binding */ ASTName,\n/* harmony export */   \"ASTTypeConstruction\": () => /* binding */ ASTTypeConstruction,\n/* harmony export */   \"ASTLambda\": () => /* binding */ ASTLambda,\n/* harmony export */   \"ASTCall\": () => /* binding */ ASTCall,\n/* harmony export */   \"ASTUnaryOperator\": () => /* binding */ ASTUnaryOperator,\n/* harmony export */   \"ASTBinaryOperator\": () => /* binding */ ASTBinaryOperator,\n/* harmony export */   \"ASTDotOperator\": () => /* binding */ ASTDotOperator\n/* harmony export */ });\n/* harmony import */ var _Log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log */ \"./src/scuft/lang/Log.ts\");\n\r\nvar ASTFmt;\r\n(function (ASTFmt) {\r\n    ASTFmt[\"NODE_FMT\"] = \"color: #C792DE\";\r\n    ASTFmt[\"TYPE_FMT\"] = \"color: #FFEB95\";\r\n    ASTFmt[\"IDENTIFIER_FMT\"] = \"color: #348DFF\";\r\n    ASTFmt[\"EXPRESSION_FMT\"] = \"color: #E98C6C\";\r\n    ASTFmt[\"FUNCTION_CALL_FMT\"] = \"color: #AD2836\";\r\n    ASTFmt[\"WITH_MODULE_FMT\"] = \"color: #259F80\";\r\n})(ASTFmt || (ASTFmt = {}));\r\nfunction list(astNodes, fmt) {\r\n    let lines = [];\r\n    for (let i = 0; i < astNodes.length; i++) {\r\n        lines.push(\" \" + i + \": \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(astNodes[i].constructor.name, fmt, ASTFmt.NODE_FMT));\r\n        (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(lines, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.bar)(recurse(astNodes[i], fmt)));\r\n    }\r\n    return lines;\r\n}\r\nfunction exprToStr(astExpr) {\r\n    switch (astExpr.nodeName) {\r\n        case NodeType.MODULE:\r\n            return \"[MODULE_DEF]\";\r\n        case NodeType.TYPE_DEF:\r\n            return \"[TYPE_DEF]\";\r\n        case NodeType.FUNCTION:\r\n            return \"[FUNCTION]\";\r\n        case NodeType.TYPE_LITERAL:\r\n            return astExpr.type.stringValue + \"\";\r\n        case NodeType.FUNCTION_TYPE:\r\n            let astType = astExpr;\r\n            let out = \"(\";\r\n            for (let i = 0; i < astType.inputType.length; i++) {\r\n                out += exprToStr(astType.inputType[i]);\r\n                if (i + 1 < astType.inputType.length) {\r\n                    out += \", \";\r\n                }\r\n            }\r\n            out += \") -> \" + exprToStr(astType.outType);\r\n            return out;\r\n        case NodeType.LITERAL:\r\n            return astExpr.value.stringValue + \"\";\r\n        case NodeType.NAME:\r\n            return astExpr.refName + \"\";\r\n        case NodeType.TYPE_CONSTRUCT:\r\n            let astConstruction = astExpr;\r\n            let constructVal = \"\";\r\n            for (let i = 0; i < astConstruction.assignments.length; i++) {\r\n                constructVal +=\r\n                    exprToStr(astConstruction.assignments[i].lvalue) +\r\n                        \" <- \" +\r\n                        exprToStr(astConstruction.assignments[i].rvalue);\r\n                if (i + 1 < astConstruction.assignments.length) {\r\n                    constructVal += \", \";\r\n                }\r\n            }\r\n            return exprToStr(astConstruction.typeRef) + \"{\" + constructVal + \"}\";\r\n        case NodeType.LAMBDA:\r\n            let astLambda = astExpr;\r\n            let lambdaVal = \"\\\\\";\r\n            for (let i = 0; i < astLambda.parameters.length; i++) {\r\n                lambdaVal += astLambda.parameters[i].refName;\r\n                if (i + 1 < astLambda.parameters.length) {\r\n                    lambdaVal += \",\";\r\n                }\r\n            }\r\n            return lambdaVal + \"=>\" + exprToStr(astLambda.expression);\r\n        case NodeType.CALL:\r\n            let astCall = astExpr;\r\n            let callVal = exprToStr(astCall.functionNameRef) + \"(\";\r\n            for (let i = 0; i < astCall.givenParams.length; i++) {\r\n                callVal += exprToStr(astCall.givenParams[i]);\r\n                if (i + 1 < astCall.givenParams.length) {\r\n                    callVal += \", \";\r\n                }\r\n            }\r\n            return callVal + \")\";\r\n        case NodeType.UNARY_OP:\r\n            return (astExpr.operation.stringValue +\r\n                \"(\" +\r\n                exprToStr(astExpr.value) +\r\n                \")\");\r\n        case NodeType.BINARY_OP:\r\n            let astBinOp = astExpr;\r\n            return (\"(\" +\r\n                exprToStr(astBinOp.lvalue) +\r\n                \" \" +\r\n                astBinOp.operation.stringValue +\r\n                \" \" +\r\n                exprToStr(astBinOp.rvalue) +\r\n                \")\");\r\n        case NodeType.DOT_OP:\r\n            let astDotOp = astExpr;\r\n            return \"(\" + exprToStr(astDotOp.rootValue) + \".\" + exprToStr(astDotOp.memberValue) + \")\";\r\n        default:\r\n            throw (\"Can't recursively print expression because given node is not an AST expression: \" +\r\n                astExpr.constructor.name);\r\n    }\r\n}\r\nfunction recurse(astNode, fmt) {\r\n    switch (astNode.nodeName) {\r\n        case NodeType.PROGRAM:\r\n            let linesPrgm = [];\r\n            let astPrgm = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesPrgm, [\"statements:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesPrgm, list(astPrgm.statements, fmt));\r\n            return linesPrgm;\r\n        case NodeType.BLOCK:\r\n            let linesBlock = [];\r\n            let astBlock = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesBlock, [\"withModules: \"]);\r\n            let withModules = [];\r\n            for (let i = 0; i < astBlock.withModules.length; i++) {\r\n                withModules.push((0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astBlock.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesBlock, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.space)(4, withModules));\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesBlock, [\"statements:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesBlock, list(astBlock.statements, fmt));\r\n            return linesBlock;\r\n        case NodeType.DECLARATION:\r\n            let linesDec = [];\r\n            let astDec = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesDec, [\"lvalue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astDec.lvalue), fmt, ASTFmt.IDENTIFIER_FMT)]);\r\n            if (astDec.type) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesDec, [\"type:   \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astDec.type), fmt, ASTFmt.TYPE_FMT)]);\r\n            }\r\n            if (astDec.rvalue) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesDec, [\"rvalue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(astDec.rvalue.constructor.name, fmt, ASTFmt.NODE_FMT)]);\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesDec, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_0__.space)(4, recurse(astDec.rvalue, fmt))));\r\n            }\r\n            return linesDec;\r\n        case NodeType.IF:\r\n            let linesIf = [];\r\n            let astIf = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesIf, [\"condition: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astIf.condition), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesIf, [\"consequence: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(astIf.consequence.constructor.name, fmt, ASTFmt.NODE_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesIf, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_0__.space)(9, recurse(astIf.consequence, fmt))));\r\n            if (astIf.alternative) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesIf, [\"alternative: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(astIf.alternative.constructor.name, fmt, ASTFmt.NODE_FMT)]);\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesIf, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_0__.space)(9, recurse(astIf.alternative, fmt))));\r\n            }\r\n            return linesIf;\r\n        case NodeType.WHILE:\r\n            let linesWhile = [];\r\n            let astWhile = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesWhile, [\"condition: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astWhile.condition), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesWhile, [\"block: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(astWhile.block.constructor.name, fmt, ASTFmt.NODE_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesWhile, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_0__.space)(3, recurse(astWhile.block, fmt))));\r\n            return linesWhile;\r\n        case NodeType.FOR:\r\n            let linesFor = [];\r\n            let astFor = astNode;\r\n            if (astFor.itemParamDec) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFor, [\r\n                    \"itemParamDec:  \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astFor.itemParamDec), fmt, ASTFmt.IDENTIFIER_FMT),\r\n                ]);\r\n            }\r\n            if (astFor.indexParamDec) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFor, [\r\n                    \"indexParamDec: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astFor.indexParamDec), fmt, ASTFmt.IDENTIFIER_FMT),\r\n                ]);\r\n            }\r\n            if (astFor.iterableName) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFor, [\r\n                    \"iterableName:  \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astFor.iterableName), fmt, ASTFmt.IDENTIFIER_FMT),\r\n                ]);\r\n            }\r\n            if (astFor.lowerBound !== undefined) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFor, [\r\n                    \"bounds: \" +\r\n                        (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astFor.lowerBound) + \"...\" + exprToStr(astFor.upperBound), fmt, ASTFmt.EXPRESSION_FMT),\r\n                ]);\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFor, [\"block: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(astFor.block.constructor.name, fmt, ASTFmt.NODE_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFor, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_0__.space)(3, recurse(astFor.block, fmt))));\r\n            return linesFor;\r\n        case NodeType.BREAK:\r\n        case NodeType.CONTINUE:\r\n            return [];\r\n        case NodeType.RETURN:\r\n            let astRet = astNode;\r\n            if (astRet.returnValue) {\r\n                return [\"returnValue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astRet.returnValue), fmt, ASTFmt.EXPRESSION_FMT)];\r\n            }\r\n            return [];\r\n        case NodeType.MODULE:\r\n            let linesMod = [];\r\n            let astMod = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesMod, [\"withModules: \"]);\r\n            let withModInMod = [];\r\n            for (let i = 0; i < astMod.withModules.length; i++) {\r\n                withModInMod.push((0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astMod.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesMod, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.space)(4, withModInMod));\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesMod, [\"declarations:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesMod, list(astMod.declarations, fmt));\r\n            return linesMod;\r\n        case NodeType.TYPE_DEF:\r\n            let linesTypeDef = [];\r\n            let astTypeDef = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesTypeDef, [\"withModules: \"]);\r\n            let withModInType = [];\r\n            for (let i = 0; i < astTypeDef.withModules.length; i++) {\r\n                withModInType.push((0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astTypeDef.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesTypeDef, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.space)(4, withModInType));\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesTypeDef, [\"declarations:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesTypeDef, list(astTypeDef.declarations, fmt));\r\n            return linesTypeDef;\r\n        case NodeType.FUNCTION:\r\n            let linesFunc = [];\r\n            let astFunc = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFunc, [\"paramDeclaration:\"]);\r\n            if (astFunc.paramDeclaration) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFunc, list(astFunc.paramDeclaration, fmt));\r\n            }\r\n            if (astFunc.returnType) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFunc, [\"returnType: \" + recurse(astFunc.returnType, fmt)]);\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFunc, [\"block: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(astFunc.block.constructor.name, fmt, ASTFmt.NODE_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(linesFunc, (0,_Log__WEBPACK_IMPORTED_MODULE_0__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_0__.space)(3, recurse(astFunc.block, fmt))));\r\n            return linesFunc;\r\n        case NodeType.TYPE_LITERAL:\r\n        case NodeType.FUNCTION_TYPE:\r\n        case NodeType.LITERAL:\r\n        case NodeType.NAME:\r\n        case NodeType.TYPE_CONSTRUCT:\r\n        case NodeType.LAMBDA:\r\n        case NodeType.CALL:\r\n        case NodeType.UNARY_OP:\r\n        case NodeType.BINARY_OP:\r\n        case NodeType.DOT_OP:\r\n            return [(0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(exprToStr(astNode), fmt, ASTFmt.EXPRESSION_FMT)];\r\n        default:\r\n            throw \"Can't recursively print tree because given node is not an AST node: \" + astNode.constructor.name;\r\n    }\r\n}\r\nfunction printAST(astNode) {\r\n    let fmt = [];\r\n    let outA = [];\r\n    (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(outA, [(0,_Log__WEBPACK_IMPORTED_MODULE_0__.applyFmt)(astNode.constructor.name, fmt, ASTFmt.NODE_FMT)]);\r\n    (0,_Log__WEBPACK_IMPORTED_MODULE_0__.merge)(outA, recurse(astNode, fmt));\r\n    let str = [outA.join(\"\\n\")];\r\n    for (let i = 0; i < fmt.length; i++) {\r\n        str.push(fmt[i]);\r\n    }\r\n    console.log.apply(printAST, str);\r\n}\r\nfunction isExpressionEqual(e0, e1) {\r\n    if (e0.nodeName !== e1.nodeName)\r\n        return false;\r\n    switch (e0.nodeName) {\r\n        case NodeType.TYPE_LITERAL:\r\n            let typeLit0 = e0;\r\n            let typeLit1 = e1;\r\n            return typeLit0.type.typeEquals(typeLit1.type);\r\n        case NodeType.FUNCTION_TYPE:\r\n            let func0 = e0;\r\n            let func1 = e1;\r\n            if (!isExpressionEqual(func0.outType, func1.outType))\r\n                return false;\r\n            for (let i = 0; i < func0.inputType.length; i++) {\r\n                if (!isExpressionEqual(func0.inputType[i], func1.inputType[i]))\r\n                    return false;\r\n            }\r\n            return true;\r\n        case NodeType.NAME:\r\n            let name0 = e0;\r\n            let name1 = e1;\r\n            return name0.refName === name1.refName;\r\n    }\r\n    return false;\r\n}\r\nvar NodeType;\r\n(function (NodeType) {\r\n    NodeType[NodeType[\"PROGRAM\"] = 0] = \"PROGRAM\";\r\n    NodeType[NodeType[\"BLOCK\"] = 1] = \"BLOCK\";\r\n    NodeType[NodeType[\"DECLARATION\"] = 2] = \"DECLARATION\";\r\n    NodeType[NodeType[\"SINGLE_DECLARATION\"] = 3] = \"SINGLE_DECLARATION\";\r\n    NodeType[NodeType[\"IF\"] = 4] = \"IF\";\r\n    NodeType[NodeType[\"WHILE\"] = 5] = \"WHILE\";\r\n    NodeType[NodeType[\"FOR\"] = 6] = \"FOR\";\r\n    NodeType[NodeType[\"BREAK\"] = 7] = \"BREAK\";\r\n    NodeType[NodeType[\"CONTINUE\"] = 8] = \"CONTINUE\";\r\n    NodeType[NodeType[\"RETURN\"] = 9] = \"RETURN\";\r\n    NodeType[NodeType[\"MODULE\"] = 10] = \"MODULE\";\r\n    NodeType[NodeType[\"TYPE_DEF\"] = 11] = \"TYPE_DEF\";\r\n    NodeType[NodeType[\"FUNCTION\"] = 12] = \"FUNCTION\";\r\n    NodeType[NodeType[\"TYPE_LITERAL\"] = 13] = \"TYPE_LITERAL\";\r\n    NodeType[NodeType[\"FUNCTION_TYPE\"] = 14] = \"FUNCTION_TYPE\";\r\n    NodeType[NodeType[\"LITERAL\"] = 15] = \"LITERAL\";\r\n    NodeType[NodeType[\"NAME\"] = 16] = \"NAME\";\r\n    NodeType[NodeType[\"TYPE_CONSTRUCT\"] = 17] = \"TYPE_CONSTRUCT\";\r\n    NodeType[NodeType[\"LAMBDA\"] = 18] = \"LAMBDA\";\r\n    NodeType[NodeType[\"CALL\"] = 19] = \"CALL\";\r\n    NodeType[NodeType[\"UNARY_OP\"] = 20] = \"UNARY_OP\";\r\n    NodeType[NodeType[\"BINARY_OP\"] = 21] = \"BINARY_OP\";\r\n    NodeType[NodeType[\"DOT_OP\"] = 22] = \"DOT_OP\";\r\n})(NodeType || (NodeType = {}));\r\nclass ASTNode {\r\n    constructor(locToken) {\r\n        this.locToken = locToken;\r\n    }\r\n}\r\nclass ASTProgram extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.PROGRAM;\r\n    }\r\n}\r\nclass ASTBlock extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.BLOCK;\r\n    }\r\n}\r\nclass ASTDeclaration extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.DECLARATION;\r\n    }\r\n}\r\nclass ASTSingleVarDeclaration extends ASTDeclaration {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.SINGLE_DECLARATION;\r\n    }\r\n}\r\nclass ASTIf extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.IF;\r\n    }\r\n}\r\nclass ASTWhile extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.WHILE;\r\n    }\r\n}\r\nclass ASTFor extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.FOR;\r\n    }\r\n}\r\nclass ASTBreak extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.BREAK;\r\n    }\r\n}\r\nclass ASTContinue extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.CONTINUE;\r\n    }\r\n}\r\nclass ASTReturn extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.RETURN;\r\n    }\r\n}\r\nclass ASTModule extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.MODULE;\r\n    }\r\n}\r\nclass ASTTypeDefinition extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.TYPE_DEF;\r\n    }\r\n}\r\nclass ASTFunction extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.FUNCTION;\r\n    }\r\n}\r\nclass ASTTypeLiteral extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.TYPE_LITERAL;\r\n    }\r\n}\r\nclass ASTFunctionType extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.FUNCTION_TYPE;\r\n    }\r\n}\r\nclass ASTLiteral extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.LITERAL;\r\n    }\r\n}\r\nclass ASTName extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.NAME;\r\n    }\r\n}\r\nclass ASTTypeConstruction extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.TYPE_CONSTRUCT;\r\n    }\r\n}\r\nclass ASTLambda extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.LAMBDA;\r\n    }\r\n}\r\nclass ASTCall extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.CALL;\r\n    }\r\n}\r\nclass ASTUnaryOperator extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.UNARY_OP;\r\n    }\r\n}\r\nclass ASTBinaryOperator extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.BINARY_OP;\r\n    }\r\n}\r\nclass ASTDotOperator extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.DOT_OP;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Ast.ts\n");

/***/ }),

/***/ "./src/scuft/lang/ErrorHandler.ts":
/*!****************************************!*\
  !*** ./src/scuft/lang/ErrorHandler.ts ***!
  \****************************************/
/*! namespace exports */
/*! export ErrorHandler [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ErrorHandler\": () => /* binding */ ErrorHandler\n/* harmony export */ });\n/* harmony import */ var _Lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lexer */ \"./src/scuft/lang/Lexer.ts\");\n\r\nclass ErrorHandler {\r\n    constructor(header) {\r\n        this.lines = [];\r\n        this.errorQueue = [];\r\n        this.header = header;\r\n    }\r\n    static fromHandler(header, errorHandler) {\r\n        let handler = new ErrorHandler(header);\r\n        handler.lines = errorHandler.lines;\r\n        return handler;\r\n    }\r\n    static fromSource(header, sourceCode) {\r\n        let handler = new ErrorHandler(header);\r\n        let begin = 0;\r\n        let lineCount = 1;\r\n        for (let i = 0; i < sourceCode.length; i++) {\r\n            if (sourceCode.charAt(i) === \"\\n\") {\r\n                handler.lines[lineCount++] = sourceCode.slice(begin, i);\r\n                begin = i + 1;\r\n            }\r\n        }\r\n        handler.lines[lineCount] = sourceCode.slice(begin, sourceCode.length);\r\n        return handler;\r\n    }\r\n    panic() {\r\n        let err = this.header;\r\n        for (let i = 0; i < this.errorQueue.length; i++) {\r\n            err += this.errorQueue[i];\r\n        }\r\n        throw err;\r\n    }\r\n    warn() {\r\n        let err = this.header;\r\n        for (let i = 0; i < this.errorQueue.length; i++) {\r\n            err += this.errorQueue[i];\r\n        }\r\n        console.warn(err);\r\n        this.errorQueue = [];\r\n    }\r\n    errorHeader(msg, line, c) {\r\n        let optionalCol = \"\";\r\n        if (c !== undefined) {\r\n            let str = this.lines[line].slice(0, c);\r\n            let col = 0;\r\n            for (let i = 0; i < str.length; i++) {\r\n                if (str.charAt(i) === \"\\t\") {\r\n                    col += ErrorHandler.TAB_WIDTH;\r\n                }\r\n                else {\r\n                    col++;\r\n                }\r\n            }\r\n            optionalCol = \", col:\" + (col + 1);\r\n        }\r\n        return \"(line:\" + line + optionalCol + \"): \" + msg + \"\\n\";\r\n    }\r\n    formatLine(leftIndentSpace, line, fileLine) {\r\n        if (line < 1)\r\n            return \"\";\r\n        let strNumber = line + \"\";\r\n        for (let i = 0; i < leftIndentSpace - strNumber.length; i++) {\r\n            strNumber = \" \" + strNumber;\r\n        }\r\n        return \"\\t\" + strNumber + \"\\t\" + fileLine + \"\\n\";\r\n    }\r\n    getLineFromSource(line) {\r\n        return this.lines[line].trimLeft().split(\"\\t\").join(\" \");\r\n    }\r\n    makeIndicator(line, c0, c1) {\r\n        console.assert(c0 >= 0, \"c0=%s must be non-negative\", c0);\r\n        console.assert(c1 > c0, \"c1=%s must be larger than c0=%s\", c1, c0);\r\n        let indentLen = this.lines[line].length - this.lines[line].trimLeft().length;\r\n        return \" \".repeat(c0 - indentLen) + \"^\".repeat(c1 - c0);\r\n    }\r\n    insert(msg) {\r\n        this.errorQueue.push(msg);\r\n        return this;\r\n    }\r\n    atPoint(msg, line, c) {\r\n        let error = this.errorHeader(msg, line, c);\r\n        let len = Math.floor(Math.log10(line + 1)) + 1;\r\n        error += this.formatLine(len, line - 1, \"\");\r\n        error += this.formatLine(len, line, this.getLineFromSource(line));\r\n        error += this.formatLine(len, line + 1, this.makeIndicator(line, c, c + 1));\r\n        this.errorQueue.push(error);\r\n        return this;\r\n    }\r\n    atPoint_PANIC(msg, line, c) {\r\n        this.atPoint(msg, line, c);\r\n        this.panic();\r\n    }\r\n    atToken(msg, token) {\r\n        return this.atPoint(msg, token.line, token.c);\r\n    }\r\n    atToken_PANIC(msg, token) {\r\n        this.atPoint(msg, token.line, token.c);\r\n        this.panic();\r\n    }\r\n    atAfterLastToken(msg, curToken) {\r\n        let curLine = curToken.line;\r\n        let curLineStr = this.lines[curLine];\r\n        let cur = curToken.c;\r\n        do {\r\n            if (cur <= 0 && curLine > 1) {\r\n                curLine--;\r\n                curLineStr = this.lines[curLine];\r\n                cur = curLineStr.length;\r\n            }\r\n            cur--;\r\n        } while ((cur > 0 || curLine >= 1) && _Lexer__WEBPACK_IMPORTED_MODULE_0__.default.isWhitespace(curLineStr.charAt(cur)));\r\n        return this.atPoint(msg, curLine, cur + 1);\r\n    }\r\n    atAfterLastToken_PANIC(msg, curToken) {\r\n        this.atAfterLastToken(msg, curToken);\r\n        this.panic();\r\n    }\r\n}\r\nErrorHandler.TAB_WIDTH = 4;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/ErrorHandler.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Lexer.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Lexer.ts ***!
  \*********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Lexer\n/* harmony export */ });\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n\r\n\r\nclass Lexer {\r\n    constructor(sourceCode, errHandler) {\r\n        this.curIndex = 0;\r\n        this.curLine = 1;\r\n        this.curC = 0;\r\n        this.sourceCode = sourceCode;\r\n        this.err = _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler.fromHandler(\"----Lexer----\\n\", errHandler);\r\n    }\r\n    lex() {\r\n        let tokens = [];\r\n        let token = this.nextToken();\r\n        while (token.type !== _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN) {\r\n            tokens.push(token);\r\n            token = this.nextToken();\r\n        }\r\n        tokens.push(token);\r\n        return tokens;\r\n    }\r\n    getChar(index) {\r\n        return this.sourceCode.charAt(index);\r\n    }\r\n    getCurChar() {\r\n        return this.getChar(this.curIndex);\r\n    }\r\n    getNextChar() {\r\n        return this.getChar(this.curIndex + 1);\r\n    }\r\n    incrementCurIndex(amount) {\r\n        if (this.getCurChar() === \"\\n\") {\r\n            this.curLine++;\r\n            this.curC = -1;\r\n        }\r\n        this.curIndex += amount;\r\n        this.curC += amount;\r\n    }\r\n    nextToken() {\r\n        while (Lexer.isWhitespace(this.getCurChar())) {\r\n            this.incrementCurIndex(1);\r\n        }\r\n        if (this.curIndex >= this.sourceCode.length) {\r\n            return this.grabToken(\"' '\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN);\r\n        }\r\n        switch (this.getCurChar()) {\r\n            case \">\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\">=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_EQUAL_TKN);\r\n                }\r\n                else if (this.getNextChar() === \">\" && this.getChar(this.curIndex + 2) === \">\") {\r\n                    return this.grabToken(\">>>\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n                }\r\n                else if (this.getNextChar() === \">\") {\r\n                    return this.grabToken(\">>\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\">\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_TKN);\r\n                }\r\n            case \"<\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"<=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_EQUAL_TKN);\r\n                    case \"<\":\r\n                        return this.grabToken(\"<<\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_LEFT_TKN);\r\n                    case \"-\":\r\n                        return this.grabToken(\"<-\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.REVERSE_ARROW_TKN);\r\n                    default:\r\n                        return this.grabToken(\"<\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_TKN);\r\n                }\r\n            case \":\":\r\n                return this.grabToken(\":\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN);\r\n            case \"=\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"==\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_EQUALS_TKN);\r\n                    case \">\":\r\n                        return this.grabToken(\"=>\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN);\r\n                    default:\r\n                        return this.grabToken(\"=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN);\r\n                }\r\n            case \"{\":\r\n                return this.grabToken(\"{\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN);\r\n            case \"}\":\r\n                return this.grabToken(\"}\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN);\r\n            case \"[\":\r\n                return this.grabToken(\"[\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_SQUARE_TKN);\r\n            case \"]\":\r\n                return this.grabToken(\"]\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_SQUARE_TKN);\r\n            case \"(\":\r\n                return this.grabToken(\"(\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN);\r\n            case \")\":\r\n                return this.grabToken(\")\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN);\r\n            case \"|\":\r\n                if (this.getNextChar() === \"|\") {\r\n                    return this.grabToken(\"||\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_OR_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"|\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_BAR_TKN);\r\n                }\r\n            case \"&\":\r\n                if (this.getNextChar() === \"&\") {\r\n                    return this.grabToken(\"&&\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_AND_TKN);\r\n                }\r\n                else {\r\n                    let ampersand = this.grabToken(\"&\" + this.getNextChar(), _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n                    ampersand.value = \"&\";\r\n                    return ampersand;\r\n                }\r\n            case \"$\":\r\n                if (this.getNextChar() === \"$\") {\r\n                    return this.grabToken(\"$$\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_XOR_TKN);\r\n                }\r\n                else {\r\n                    let dollar = this.grabToken(\"$\" + this.getNextChar(), _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n                    dollar.value = \"$\";\r\n                    return this.grabToken(\"$\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n                }\r\n            case \"!\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\"!=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_EQUALS_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"!\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_TKN);\r\n                }\r\n            case \"+\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"+=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_EQUALS_TKN);\r\n                    case \"+\":\r\n                        return this.grabToken(\"++\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_ADD_TKN);\r\n                    default:\r\n                        return this.grabToken(\"+\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_TKN);\r\n                }\r\n            case \"-\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"-=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_EQUALS_TKN);\r\n                    case \"-\":\r\n                        return this.grabToken(\"--\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_SUBTR_TKN);\r\n                    case \">\":\r\n                        return this.grabToken(\"->\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN);\r\n                    default:\r\n                        return this.grabToken(\"-\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN);\r\n                }\r\n            case \"*\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"*=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MULT_EQUALS_TKN);\r\n                    case \"/\":\r\n                        this.err.atPoint_PANIC(\"Unclosed block comment\", this.curLine, this.curC);\r\n                    default:\r\n                        return this.grabToken(\"*\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MULT_TKN);\r\n                }\r\n            case \"/\":\r\n                switch (this.getNextChar()) {\r\n                    case \"/\":\r\n                        this.consumeSingleLineComment();\r\n                        return this.nextToken();\r\n                    case \"*\":\r\n                        this.consumeBlockComment();\r\n                        return this.nextToken();\r\n                    case \"=\":\r\n                        return this.grabToken(\"/=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_DIV_EQUALS_TKN);\r\n                    default:\r\n                        return this.grabToken(\"/\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_DIVIDE_TKN);\r\n                }\r\n            case \"^\":\r\n                return this.grabToken(\"^\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_CARROT_TKN);\r\n            case \"%\":\r\n                return this.grabToken(\"%\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MODULUS_TKN);\r\n            case \"~\":\r\n                if (this.getNextChar() == \"=\") {\r\n                    return this.grabToken(\"~=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"~\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_NOT_TKN);\r\n                }\r\n            case \".\":\r\n                if (this.getNextChar() === \".\" && this.getChar(this.curIndex + 2) === \".\") {\r\n                    return this.grabToken(\"...\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\".\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN);\r\n                }\r\n            case \"\\\\\":\r\n                return this.grabToken(\"\\\\\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN);\r\n            case \",\":\r\n                return this.grabToken(\",\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN);\r\n            case \";\":\r\n                return this.grabToken(\";\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN);\r\n            case '\"':\r\n                return this.grabStringLiteral();\r\n            default:\r\n                if (Lexer.isLetter(this.getCurChar())) {\r\n                    return this.grabIdentifier();\r\n                }\r\n                else if (Lexer.isNumber(this.getCurChar())) {\r\n                    return this.grabNumericLiteral();\r\n                }\r\n                else if (this.getCurChar() === \"#\") {\r\n                    return this.grabDirective();\r\n                }\r\n                else {\r\n                    let unknown = this.grabToken(this.getCurChar(), _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n                    unknown.value = this.getCurChar();\r\n                    return unknown;\r\n                }\r\n        }\r\n    }\r\n    grabToken(str, type) {\r\n        this.incrementCurIndex(str.length);\r\n        return this.makeToken(str, type);\r\n    }\r\n    makeToken(str, type) {\r\n        let tkn = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(str, this.curLine, this.curC - str.length, type);\r\n        return tkn;\r\n    }\r\n    grabNumericLiteral() {\r\n        let stringValue = \"\";\r\n        let number = 0;\r\n        let ch = this.getCurChar();\r\n        let point = false;\r\n        let divideBy = 1;\r\n        while (Lexer.isNumber(ch) || ch === \".\") {\r\n            stringValue += ch;\r\n            if (ch !== \"_\") {\r\n                if (ch === \".\") {\r\n                    if (point === false) {\r\n                        point = true;\r\n                        this.incrementCurIndex(1);\r\n                        ch = this.getCurChar();\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        this.err.atPoint_PANIC('Number has too many decimal points \"' + number / divideBy + '.\"', this.curLine, this.curC);\r\n                    }\r\n                }\r\n                number = 10 * number + parseInt(ch);\r\n                if (point)\r\n                    divideBy *= 10;\r\n            }\r\n            this.incrementCurIndex(1);\r\n            ch = this.getCurChar();\r\n        }\r\n        let value = number / divideBy;\r\n        let tkn = this.makeToken(stringValue, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN);\r\n        tkn.value = value;\r\n        return tkn;\r\n    }\r\n    grabStringLiteral() {\r\n        this.grabToken('\"', _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOUBLE_QUOTE_TKN);\r\n        let str = \"\";\r\n        let ch = this.getCurChar();\r\n        let escapeChar = false;\r\n        while (escapeChar || ch !== '\"') {\r\n            if (!escapeChar || ch === '\"') {\r\n                str += ch;\r\n            }\r\n            if (ch === \"\\\\\") {\r\n                escapeChar = true;\r\n            }\r\n            else {\r\n                escapeChar = false;\r\n            }\r\n            this.incrementCurIndex(1);\r\n            ch = this.getCurChar();\r\n        }\r\n        this.grabToken('\"', _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOUBLE_QUOTE_TKN);\r\n        let tkn = this.makeToken('\"' + str + '\"', _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN);\r\n        tkn.value = str;\r\n        return tkn;\r\n    }\r\n    grabDirective() {\r\n        console.assert(this.getCurChar() === \"#\", \"Directives must start with #\");\r\n        this.incrementCurIndex(1);\r\n        let str = \"#\";\r\n        let ch = this.getCurChar();\r\n        while (Lexer.isLetter(ch) || Lexer.isNumber(ch)) {\r\n            this.incrementCurIndex(1);\r\n            str = str + ch;\r\n            ch = this.getCurChar();\r\n        }\r\n        switch (str) {\r\n            case \"#range\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.HASH_RANGE_TKN);\r\n            default:\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n        }\r\n    }\r\n    grabIdentifier() {\r\n        let str = \"\";\r\n        let ch = this.getCurChar();\r\n        while (Lexer.isLetter(ch) || Lexer.isNumber(ch)) {\r\n            this.incrementCurIndex(1);\r\n            str = str + ch;\r\n            ch = this.getCurChar();\r\n        }\r\n        switch (str) {\r\n            case \"type\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN);\r\n            case \"module\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN);\r\n            case \"with\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN);\r\n            case \"if\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN);\r\n            case \"else\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELSE_TKN);\r\n            case \"while\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WHILE_TKN);\r\n            case \"for\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.FOR_TKN);\r\n            case \"in\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IN_TKN);\r\n            case \"break\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BREAK_TKN);\r\n            case \"continue\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONTINUE_TKN);\r\n            case \"or\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_OR_TKN);\r\n            case \"and\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_AND_TKN);\r\n            case \"xor\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_XOR_TKN);\r\n            case \"true\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN);\r\n            case \"false\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN);\r\n            case \"void\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.VOID_TYPE_TKN);\r\n            case \"num\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN);\r\n            case \"string\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_TYPE_TKN);\r\n            case \"bool\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BOOL_TYPE_TKN);\r\n            case \"return\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RETURN_TKN);\r\n            default:\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN);\r\n        }\r\n    }\r\n    consumeSingleLineComment() {\r\n        this.incrementCurIndex(2);\r\n        while (this.curIndex < this.sourceCode.length && this.getCurChar() !== \"\\n\") {\r\n            this.incrementCurIndex(1);\r\n        }\r\n    }\r\n    consumeBlockComment() {\r\n        let beginLine = this.curLine;\r\n        let beginC = this.curC;\r\n        this.incrementCurIndex(2);\r\n        while (this.curIndex < this.sourceCode.length && !(this.getCurChar() === \"*\" && this.getNextChar() === \"/\")) {\r\n            this.incrementCurIndex(1);\r\n        }\r\n        if (this.curIndex >= this.sourceCode.length) {\r\n            this.err\r\n                .atPoint(\"Beginning of the block comment is as follows\", beginLine, beginC)\r\n                .atPoint_PANIC(\"Unterminated block comment at the end of the file. Expected */\", this.curLine, this.curC);\r\n        }\r\n        this.incrementCurIndex(2);\r\n    }\r\n    static isWhitespace(ch) {\r\n        return ch === \" \" || ch === \"\\t\" || ch === \"\\r\" || ch === \"\\n\";\r\n    }\r\n    static isLetter(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 65 && n < 91) || (n >= 97 && n < 123) || ch === \"'\" || ch === \"_\";\r\n    }\r\n    static isNumber(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 48 && n <= 57) || ch === \"_\";\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL0xleGVyLnRzP2E3ZTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ0g7QUFFNUIsTUFBTSxLQUFLO0lBTXRCLFlBQVksVUFBa0IsRUFBRSxVQUF3QjtRQUhoRCxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsWUFBTyxHQUFHLENBQUMsQ0FBQztRQUNaLFNBQUksR0FBRyxDQUFDLENBQUM7UUFFYixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsR0FBRyxHQUFHLG1FQUF3QixDQUFDLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFDRCxHQUFHO1FBQ0MsSUFBSSxNQUFNLEdBQVksRUFBRSxDQUFDO1FBQ3pCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM3QixPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUsscURBQWlCLEVBQUU7WUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQixLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQzVCO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ08sT0FBTyxDQUFDLEtBQWE7UUFDekIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ08sVUFBVTtRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNPLFdBQVc7UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ08saUJBQWlCLENBQUMs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cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gXCIuL0Vycm9ySGFuZGxlclwiO1xyXG5pbXBvcnQgeyBUb2tlbiwgVG9rZW5UeXBlIH0gZnJvbSBcIi4vVG9rZW5cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExleGVyIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXJyOiBFcnJvckhhbmRsZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNvdXJjZUNvZGU6IHN0cmluZztcclxuICAgIHByaXZhdGUgY3VySW5kZXggPSAwO1xyXG4gICAgcHJpdmF0ZSBjdXJMaW5lID0gMTtcclxuICAgIHByaXZhdGUgY3VyQyA9IDA7XHJcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2VDb2RlOiBzdHJpbmcsIGVyckhhbmRsZXI6IEVycm9ySGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuc291cmNlQ29kZSA9IHNvdXJjZUNvZGU7XHJcbiAgICAgICAgdGhpcy5lcnIgPSBFcnJvckhhbmRsZXIuZnJvbUhhbmRsZXIoXCItLS0tTGV4ZXItLS0tXFxuXCIsIGVyckhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgbGV4KCk6IFRva2VuW10ge1xyXG4gICAgICAgIGxldCB0b2tlbnM6IFRva2VuW10gPSBbXTtcclxuICAgICAgICBsZXQgdG9rZW4gPSB0aGlzLm5leHRUb2tlbigpO1xyXG4gICAgICAgIHdoaWxlICh0b2tlbi50eXBlICE9PSBUb2tlblR5cGUuRU5EX1RLTikge1xyXG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xyXG4gICAgICAgIHJldHVybiB0b2tlbnM7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGdldENoYXIoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlQ29kZS5jaGFyQXQoaW5kZXgpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZXRDdXJDaGFyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hhcih0aGlzLmN1ckluZGV4KTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ2V0TmV4dENoYXIoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaGFyKHRoaXMuY3VySW5kZXggKyAxKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgaW5jcmVtZW50Q3VySW5kZXgoYW1vdW50OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRDdXJDaGFyKCkgPT09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJMaW5lKys7XHJcbiAgICAgICAgICAgIHRoaXMuY3VyQyA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1ckluZGV4ICs9IGFtb3VudDtcclxuICAgICAgICB0aGlzLmN1ckMgKz0gYW1vdW50O1xyXG4gICAgfVxyXG4gICAgbmV4dFRva2VuKCk6IFRva2VuIHtcclxuICAgICAgICAvL0NsZWFyIFdoaXRlc3BhY2VcclxuICAgICAgICB3aGlsZSAoTGV4ZXIuaXNXaGl0ZXNwYWNlKHRoaXMuZ2V0Q3VyQ2hhcigpKSkge1xyXG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9SZXR1cm4gZW5kIHRva2VuIGlmIGVuZCBvZiBzdHJpbmcgaW5wdXQgcmVhY2hlZFxyXG4gICAgICAgIGlmICh0aGlzLmN1ckluZGV4ID49IHRoaXMuc291cmNlQ29kZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiJyAnXCIsIFRva2VuVHlwZS5FTkRfVEtOKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5nZXRDdXJDaGFyKCkpIHtcclxuICAgICAgICAgICAgLy9TdGF0ZW1lbnRzXHJcbiAgICAgICAgICAgIGNhc2UgXCI+XCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09PSBcIj1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIj49XCIsIFRva2VuVHlwZS5DT05EX0dSRUFURVJfVEhBTl9FUVVBTF9US04pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdldE5leHRDaGFyKCkgPT09IFwiPlwiICYmIHRoaXMuZ2V0Q2hhcih0aGlzLmN1ckluZGV4ICsgMikgPT09IFwiPlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiPj4+XCIsIFRva2VuVHlwZS5CSU5fU0hJRlRfQVJJVEhNRVRJQ19SSUdIVF9US04pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdldE5leHRDaGFyKCkgPT09IFwiPlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiPj5cIiwgVG9rZW5UeXBlLkJJTl9TSElGVF9BUklUSE1FVElDX1JJR0hUX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIj5cIiwgVG9rZW5UeXBlLkNPTkRfR1JFQVRFUl9USEFOX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCI8XCI6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZ2V0TmV4dENoYXIoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI9XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIjw9XCIsIFRva2VuVHlwZS5DT05EX0xFU1NfVEhBTl9FUVVBTF9US04pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI8XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIjw8XCIsIFRva2VuVHlwZS5CSU5fU0hJRlRfTEVGVF9US04pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCItXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIjwtXCIsIFRva2VuVHlwZS5SRVZFUlNFX0FSUk9XX1RLTik7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiPFwiLCBUb2tlblR5cGUuQ09ORF9MRVNTX1RIQU5fVEtOKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIjpcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIjpcIiwgVG9rZW5UeXBlLkNPTE9OX1RLTik7XHJcblxyXG4gICAgICAgICAgICAvLyBBc3NpZ25tZW50XHJcbiAgICAgICAgICAgIGNhc2UgXCI9XCI6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZ2V0TmV4dENoYXIoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI9XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIj09XCIsIFRva2VuVHlwZS5DT05EX0VRVUFMU19US04pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI+XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIj0+XCIsIFRva2VuVHlwZS5DT05TVF9BU1NJR05NRU5UX1RLTik7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiPVwiLCBUb2tlblR5cGUuQVNTSUdOTUVOVF9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQmxvY2tzXHJcbiAgICAgICAgICAgIGNhc2UgXCJ7XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCJ7XCIsIFRva2VuVHlwZS5MRUZUX0NVUkxZX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ9XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCJ9XCIsIFRva2VuVHlwZS5SSUdIVF9DVVJMWV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiW1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiW1wiLCBUb2tlblR5cGUuTEVGVF9TUVVBUkVfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcIl1cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIl1cIiwgVG9rZW5UeXBlLlJJR0hUX1NRVUFSRV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiKFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiKFwiLCBUb2tlblR5cGUuTEVGVF9QQVJFTlNfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcIilcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIilcIiwgVG9rZW5UeXBlLlJJR0hUX1BBUkVOU19US04pO1xyXG5cclxuICAgICAgICAgICAgLy9Db25kaXRpb25hbHNcclxuICAgICAgICAgICAgY2FzZSBcInxcIjpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldE5leHRDaGFyKCkgPT09IFwifFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwifHxcIiwgVG9rZW5UeXBlLkNPTkRfT1JfVEtOKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwifFwiLCBUb2tlblR5cGUuT1BfQkFSX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCImXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09PSBcIiZcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIiYmXCIsIFRva2VuVHlwZS5DT05EX0FORF9US04pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYW1wZXJzYW5kID0gdGhpcy5ncmFiVG9rZW4oXCImXCIgKyB0aGlzLmdldE5leHRDaGFyKCksIFRva2VuVHlwZS5VTktOT1dOX1RLTik7XHJcbiAgICAgICAgICAgICAgICAgICAgYW1wZXJzYW5kLnZhbHVlID0gXCImXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFtcGVyc2FuZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIiRcIjpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldE5leHRDaGFyKCkgPT09IFwiJFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiJCRcIiwgVG9rZW5UeXBlLkNPTkRfWE9SX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkb2xsYXIgPSB0aGlzLmdyYWJUb2tlbihcIiRcIiArIHRoaXMuZ2V0TmV4dENoYXIoKSwgVG9rZW5UeXBlLlVOS05PV05fVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICBkb2xsYXIudmFsdWUgPSBcIiRcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIkXCIsIFRva2VuVHlwZS5VTktOT1dOX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCIhXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09PSBcIj1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIiE9XCIsIFRva2VuVHlwZS5DT05EX05PVF9FUVVBTFNfVEtOKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiIVwiLCBUb2tlblR5cGUuQ09ORF9OT1RfVEtOKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE9wZXJhdG9yc1xyXG4gICAgICAgICAgICBjYXNlIFwiK1wiOlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmdldE5leHRDaGFyKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiPVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIrPVwiLCBUb2tlblR5cGUuT1BfQUREX0VRVUFMU19US04pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCIrXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIisrXCIsIFRva2VuVHlwZS5PUF9BRERfQUREX1RLTik7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiK1wiLCBUb2tlblR5cGUuT1BfQUREX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCItXCI6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZ2V0TmV4dENoYXIoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI9XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIi09XCIsIFRva2VuVHlwZS5PUF9TVUJUUl9FUVVBTFNfVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiLVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCItLVwiLCBUb2tlblR5cGUuT1BfU1VCVFJfU1VCVFJfVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiPlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCItPlwiLCBUb2tlblR5cGUuQVJST1dfVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCItXCIsIFRva2VuVHlwZS5PUF9TVUJUUl9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiKlwiOlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmdldE5leHRDaGFyKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiPVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIqPVwiLCBUb2tlblR5cGUuT1BfTVVMVF9FUVVBTFNfVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiL1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVyci5hdFBvaW50X1BBTklDKFwiVW5jbG9zZWQgYmxvY2sgY29tbWVudFwiLCB0aGlzLmN1ckxpbmUsIHRoaXMuY3VyQyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiKlwiLCBUb2tlblR5cGUuT1BfTVVMVF9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiL1wiOlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmdldE5leHRDaGFyKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiL1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVTaW5nbGVMaW5lQ29tbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0VG9rZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiKlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVCbG9ja0NvbW1lbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dFRva2VuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIj1cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiLz1cIiwgVG9rZW5UeXBlLk9QX0RJVl9FUVVBTFNfVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIvXCIsIFRva2VuVHlwZS5PUF9ESVZJREVfVEtOKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIl5cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIl5cIiwgVG9rZW5UeXBlLk9QX0NBUlJPVF9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiJVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiJVwiLCBUb2tlblR5cGUuT1BfTU9EVUxVU19US04pO1xyXG5cclxuICAgICAgICAgICAgLy9NaXNjZWxsYW5lb3VzXHJcbiAgICAgICAgICAgIGNhc2UgXCJ+XCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09IFwiPVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwifj1cIiwgVG9rZW5UeXBlLk1VVEFCTEVfQVNTSUdOTUVOVF9US04pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCJ+XCIsIFRva2VuVHlwZS5CSU5fTk9UX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCIuXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09PSBcIi5cIiAmJiB0aGlzLmdldENoYXIodGhpcy5jdXJJbmRleCArIDIpID09PSBcIi5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIi4uLlwiLCBUb2tlblR5cGUuRUxMSVBTSVNfVEtOKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiLlwiLCBUb2tlblR5cGUuRE9UX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJcXFxcXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCJcXFxcXCIsIFRva2VuVHlwZS5CQUNLU0xBU0hfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcIixcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIixcIiwgVG9rZW5UeXBlLkNPTU1BX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCI7XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCI7XCIsIFRva2VuVHlwZS5TRU1JX0NPTE9OX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgJ1wiJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJTdHJpbmdMaXRlcmFsKCk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoTGV4ZXIuaXNMZXR0ZXIodGhpcy5nZXRDdXJDaGFyKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYklkZW50aWZpZXIoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoTGV4ZXIuaXNOdW1iZXIodGhpcy5nZXRDdXJDaGFyKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYk51bWVyaWNMaXRlcmFsKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0Q3VyQ2hhcigpID09PSBcIiNcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJEaXJlY3RpdmUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVua25vd24gPSB0aGlzLmdyYWJUb2tlbih0aGlzLmdldEN1ckNoYXIoKSwgVG9rZW5UeXBlLlVOS05PV05fVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICB1bmtub3duLnZhbHVlID0gdGhpcy5nZXRDdXJDaGFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVua25vd247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBncmFiVG9rZW4oc3RyOiBzdHJpbmcsIHR5cGU6IFRva2VuVHlwZSk6IFRva2VuIHtcclxuICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KHN0ci5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIHR5cGUpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBtYWtlVG9rZW4oc3RyOiBzdHJpbmcsIHR5cGU6IFRva2VuVHlwZSk6IFRva2VuIHtcclxuICAgICAgICBsZXQgdGtuID0gbmV3IFRva2VuKHN0ciwgdGhpcy5jdXJMaW5lLCB0aGlzLmN1ckMgLSBzdHIubGVuZ3RoLCB0eXBlKTtcclxuICAgICAgICByZXR1cm4gdGtuO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBncmFiTnVtZXJpY0xpdGVyYWwoKTogVG9rZW4ge1xyXG4gICAgICAgIGxldCBzdHJpbmdWYWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgbGV0IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IGNoID0gdGhpcy5nZXRDdXJDaGFyKCk7XHJcbiAgICAgICAgbGV0IHBvaW50ID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGRpdmlkZUJ5ID0gMTtcclxuICAgICAgICB3aGlsZSAoTGV4ZXIuaXNOdW1iZXIoY2gpIHx8IGNoID09PSBcIi5cIikge1xyXG4gICAgICAgICAgICBzdHJpbmdWYWx1ZSArPSBjaDtcclxuICAgICAgICAgICAgaWYgKGNoICE9PSBcIl9cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSBcIi5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2ludCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaCA9IHRoaXMuZ2V0Q3VyQ2hhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVyci5hdFBvaW50X1BBTklDKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ051bWJlciBoYXMgdG9vIG1hbnkgZGVjaW1hbCBwb2ludHMgXCInICsgbnVtYmVyIC8gZGl2aWRlQnkgKyAnLlwiJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VyTGluZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VyQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG51bWJlciA9IDEwICogbnVtYmVyICsgcGFyc2VJbnQoY2gpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvaW50KSBkaXZpZGVCeSAqPSAxMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgICAgICBjaCA9IHRoaXMuZ2V0Q3VyQ2hhcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gbnVtYmVyIC8gZGl2aWRlQnk7XHJcbiAgICAgICAgbGV0IHRrbiA9IHRoaXMubWFrZVRva2VuKHN0cmluZ1ZhbHVlLCBUb2tlblR5cGUuTlVNRVJJQ19MSVRFUkFMX1RLTik7XHJcbiAgICAgICAgdGtuLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHRrbjtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ3JhYlN0cmluZ0xpdGVyYWwoKTogVG9rZW4ge1xyXG4gICAgICAgIHRoaXMuZ3JhYlRva2VuKCdcIicsIFRva2VuVHlwZS5ET1VCTEVfUVVPVEVfVEtOKTtcclxuICAgICAgICBsZXQgc3RyID0gXCJcIjtcclxuICAgICAgICBsZXQgY2ggPSB0aGlzLmdldEN1ckNoYXIoKTtcclxuICAgICAgICBsZXQgZXNjYXBlQ2hhciA9IGZhbHNlO1xyXG4gICAgICAgIHdoaWxlIChlc2NhcGVDaGFyIHx8IGNoICE9PSAnXCInKSB7XHJcbiAgICAgICAgICAgIGlmICghZXNjYXBlQ2hhciB8fCBjaCA9PT0gJ1wiJykge1xyXG4gICAgICAgICAgICAgICAgc3RyICs9IGNoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaCA9PT0gXCJcXFxcXCIpIHtcclxuICAgICAgICAgICAgICAgIGVzY2FwZUNoYXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXNjYXBlQ2hhciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW5jcmVtZW50Q3VySW5kZXgoMSk7XHJcbiAgICAgICAgICAgIGNoID0gdGhpcy5nZXRDdXJDaGFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ3JhYlRva2VuKCdcIicsIFRva2VuVHlwZS5ET1VCTEVfUVVPVEVfVEtOKTtcclxuICAgICAgICBsZXQgdGtuID0gdGhpcy5tYWtlVG9rZW4oJ1wiJyArIHN0ciArICdcIicsIFRva2VuVHlwZS5TVFJJTkdfTElURVJBTF9US04pO1xyXG4gICAgICAgIHRrbi52YWx1ZSA9IHN0cjtcclxuICAgICAgICByZXR1cm4gdGtuO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBncmFiRGlyZWN0aXZlKCk6IFRva2VuIHtcclxuICAgICAgICBjb25zb2xlLmFzc2VydCh0aGlzLmdldEN1ckNoYXIoKSA9PT0gXCIjXCIsIFwiRGlyZWN0aXZlcyBtdXN0IHN0YXJ0IHdpdGggI1wiKTtcclxuICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgIGxldCBzdHIgPSBcIiNcIjtcclxuICAgICAgICBsZXQgY2ggPSB0aGlzLmdldEN1ckNoYXIoKTtcclxuICAgICAgICB3aGlsZSAoTGV4ZXIuaXNMZXR0ZXIoY2gpIHx8IExleGVyLmlzTnVtYmVyKGNoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgICAgICBzdHIgPSBzdHIgKyBjaDtcclxuICAgICAgICAgICAgY2ggPSB0aGlzLmdldEN1ckNoYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChzdHIpIHtcclxuICAgICAgICAgICAgY2FzZSBcIiNyYW5nZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKHN0ciwgVG9rZW5UeXBlLkhBU0hfUkFOR0VfVEtOKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIFRva2VuVHlwZS5VTktOT1dOX1RLTik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBncmFiSWRlbnRpZmllcigpOiBUb2tlbiB7XHJcbiAgICAgICAgbGV0IHN0ciA9IFwiXCI7XHJcbiAgICAgICAgbGV0IGNoID0gdGhpcy5nZXRDdXJDaGFyKCk7XHJcbiAgICAgICAgd2hpbGUgKExleGVyLmlzTGV0dGVyKGNoKSB8fCBMZXhlci5pc051bWJlcihjaCkpIHtcclxuICAgICAgICAgICAgdGhpcy5pbmNyZW1lbnRDdXJJbmRleCgxKTtcclxuICAgICAgICAgICAgc3RyID0gc3RyICsgY2g7XHJcbiAgICAgICAgICAgIGNoID0gdGhpcy5nZXRDdXJDaGFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoc3RyKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oc3RyLCBUb2tlblR5cGUuVFlQRV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwibW9kdWxlXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oc3RyLCBUb2tlblR5cGUuTU9EVUxFX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ3aXRoXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oc3RyLCBUb2tlblR5cGUuV0lUSF9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiaWZcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIFRva2VuVHlwZS5JRl9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiZWxzZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKHN0ciwgVG9rZW5UeXBlLkVMU0VfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcIndoaWxlXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oc3RyLCBUb2tlblR5cGUuV0hJTEVfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcImZvclwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKHN0ciwgVG9rZW5UeXBlLkZPUl9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiaW5cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIFRva2VuVHlwZS5JTl9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiYnJlYWtcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIFRva2VuVHlwZS5CUkVBS19US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiY29udGludWVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIFRva2VuVHlwZS5DT05USU5VRV9US04pO1xyXG5cclxuICAgICAgICAgICAgLy9CaXR3aXNlIE9wZXJhdG9yc1xyXG4gICAgICAgICAgICBjYXNlIFwib3JcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIFRva2VuVHlwZS5CSU5fT1JfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcImFuZFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKHN0ciwgVG9rZW5UeXBlLkJJTl9BTkRfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcInhvclwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKHN0ciwgVG9rZW5UeXBlLkJJTl9YT1JfVEtOKTtcclxuXHJcbiAgICAgICAgICAgIC8vQ29uZGl0aW9uYWxzXHJcbiAgICAgICAgICAgIGNhc2UgXCJ0cnVlXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oc3RyLCBUb2tlblR5cGUuQ09ORF9UUlVFX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCJmYWxzZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKHN0ciwgVG9rZW5UeXBlLkNPTkRfRkFMU0VfVEtOKTtcclxuXHJcbiAgICAgICAgICAgIC8vVHlwZXNcclxuICAgICAgICAgICAgY2FzZSBcInZvaWRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIFRva2VuVHlwZS5WT0lEX1RZUEVfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcIm51bVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKHN0ciwgVG9rZW5UeXBlLk5VTV9UWVBFX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIFRva2VuVHlwZS5TVFJJTkdfVFlQRV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiYm9vbFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKHN0ciwgVG9rZW5UeXBlLkJPT0xfVFlQRV9US04pO1xyXG5cclxuICAgICAgICAgICAgLy8gRnVuY3Rpb25zXHJcbiAgICAgICAgICAgIGNhc2UgXCJyZXR1cm5cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihzdHIsIFRva2VuVHlwZS5SRVRVUk5fVEtOKTtcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oc3RyLCBUb2tlblR5cGUuSURFTlRJRklFUl9US04pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgY29uc3VtZVNpbmdsZUxpbmVDb21tZW50KCkge1xyXG4gICAgICAgIHRoaXMuaW5jcmVtZW50Q3VySW5kZXgoMik7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuY3VySW5kZXggPCB0aGlzLnNvdXJjZUNvZGUubGVuZ3RoICYmIHRoaXMuZ2V0Q3VyQ2hhcigpICE9PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5jcmVtZW50Q3VySW5kZXgoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjb25zdW1lQmxvY2tDb21tZW50KCkge1xyXG4gICAgICAgIGxldCBiZWdpbkxpbmUgPSB0aGlzLmN1ckxpbmU7XHJcbiAgICAgICAgbGV0IGJlZ2luQyA9IHRoaXMuY3VyQztcclxuICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDIpO1xyXG4gICAgICAgIHdoaWxlICh0aGlzLmN1ckluZGV4IDwgdGhpcy5zb3VyY2VDb2RlLmxlbmd0aCAmJiAhKHRoaXMuZ2V0Q3VyQ2hhcigpID09PSBcIipcIiAmJiB0aGlzLmdldE5leHRDaGFyKCkgPT09IFwiL1wiKSkge1xyXG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jdXJJbmRleCA+PSB0aGlzLnNvdXJjZUNvZGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyXHJcbiAgICAgICAgICAgICAgICAuYXRQb2ludChcIkJlZ2lubmluZyBvZiB0aGUgYmxvY2sgY29tbWVudCBpcyBhcyBmb2xsb3dzXCIsIGJlZ2luTGluZSwgYmVnaW5DKVxyXG4gICAgICAgICAgICAgICAgLmF0UG9pbnRfUEFOSUMoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJVbnRlcm1pbmF0ZWQgYmxvY2sgY29tbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBmaWxlLiBFeHBlY3RlZCAqL1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VyTGluZSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1ckNcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5jcmVtZW50Q3VySW5kZXgoMik7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNXaGl0ZXNwYWNlKGNoOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gY2ggPT09IFwiIFwiIHx8IGNoID09PSBcIlxcdFwiIHx8IGNoID09PSBcIlxcclwiIHx8IGNoID09PSBcIlxcblwiO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGlzTGV0dGVyKGNoOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgbiA9IGNoLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgcmV0dXJuIChuID49IDY1ICYmIG4gPCA5MSkgfHwgKG4gPj0gOTcgJiYgbiA8IDEyMykgfHwgY2ggPT09IFwiJ1wiIHx8IGNoID09PSBcIl9cIjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBpc051bWJlcihjaDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IG4gPSBjaC5jaGFyQ29kZUF0KDApO1xyXG4gICAgICAgIHJldHVybiAobiA+PSA0OCAmJiBuIDw9IDU3KSB8fCBjaCA9PT0gXCJfXCI7XHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scuft/lang/Lexer.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Log.ts":
/*!*******************************!*\
  !*** ./src/scuft/lang/Log.ts ***!
  \*******************************/
/*! namespace exports */
/*! export applyFmt [provided] [no usage info] [missing usage info prevents renaming] */
/*! export bar [provided] [no usage info] [missing usage info prevents renaming] */
/*! export merge [provided] [no usage info] [missing usage info prevents renaming] */
/*! export space [provided] [no usage info] [missing usage info prevents renaming] */
/*! export tab [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyFmt\": () => /* binding */ applyFmt,\n/* harmony export */   \"merge\": () => /* binding */ merge,\n/* harmony export */   \"space\": () => /* binding */ space,\n/* harmony export */   \"tab\": () => /* binding */ tab,\n/* harmony export */   \"bar\": () => /* binding */ bar\n/* harmony export */ });\nconst DEFAULT_FMT = \"color: #777;\";\r\nfunction applyFmt(str, fmt, format = DEFAULT_FMT) {\r\n    fmt.push(format);\r\n    fmt.push(DEFAULT_FMT);\r\n    return \"%c\" + str + \"%c\";\r\n}\r\nfunction merge(firstStr, secondStr) {\r\n    for (let i = 0; i < secondStr.length; i++) {\r\n        firstStr.push(secondStr[i]);\r\n    }\r\n    return firstStr;\r\n}\r\nfunction space(amount, strA) {\r\n    const prefix = \" \".repeat(amount);\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = prefix + strA[i];\r\n    }\r\n    return strA;\r\n}\r\nfunction tab(strA) {\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = \"    \" + strA[i];\r\n    }\r\n    return strA;\r\n}\r\nfunction bar(strA) {\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = \" |  \" + strA[i];\r\n    }\r\n    return strA;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL0xvZy50cz9hNjIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDO0FBRTVCLFNBQVMsUUFBUSxDQUFDLEdBQVcsRUFBRSxHQUFhLEVBQUUsTUFBTSxHQUFHLFdBQVc7SUFDckUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQixHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFDN0IsQ0FBQztBQUVNLFNBQVMsS0FBSyxDQUFDLFFBQWtCLEVBQUUsU0FBbUI7SUFDekQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdkMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMvQjtJQUNELE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFFTSxTQUFTLEtBQUssQ0FBQyxNQUFjLEVBQUUsSUFBYztJQUNoRCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzlCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVNLFNBQVMsR0FBRyxDQUFDLElBQWM7SUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRU0sU0FBUyxHQUFHLENBQUMsSUFBYztJQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNsQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUMiLCJmaWxlIjoiLi9zcmMvc2N1ZnQvbGFuZy9Mb2cudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERUZBVUxUX0ZNVCA9IFwiY29sb3I6ICM3Nzc7XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlGbXQoc3RyOiBzdHJpbmcsIGZtdDogc3RyaW5nW10sIGZvcm1hdCA9IERFRkFVTFRfRk1UKTogc3RyaW5nIHtcclxuICAgIGZtdC5wdXNoKGZvcm1hdCk7XHJcbiAgICBmbXQucHVzaChERUZBVUxUX0ZNVCk7XHJcbiAgICByZXR1cm4gXCIlY1wiICsgc3RyICsgXCIlY1wiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoZmlyc3RTdHI6IHN0cmluZ1tdLCBzZWNvbmRTdHI6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWNvbmRTdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBmaXJzdFN0ci5wdXNoKHNlY29uZFN0cltpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmlyc3RTdHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzcGFjZShhbW91bnQ6IG51bWJlciwgc3RyQTogc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBwcmVmaXggPSBcIiBcIi5yZXBlYXQoYW1vdW50KTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyQS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHN0ckFbaV0gPSBwcmVmaXggKyBzdHJBW2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0ckE7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0YWIoc3RyQTogc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ckEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBzdHJBW2ldID0gXCIgICAgXCIgKyBzdHJBW2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0ckE7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiYXIoc3RyQTogc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ckEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBzdHJBW2ldID0gXCIgfCAgXCIgKyBzdHJBW2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0ckE7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scuft/lang/Log.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Parser.ts":
/*!**********************************!*\
  !*** ./src/scuft/lang/Parser.ts ***!
  \**********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Parser\n/* harmony export */ });\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Scope */ \"./src/scuft/lang/Scope.ts\");\n\r\n\r\n\r\n\r\nclass Parser {\r\n    constructor(lexer, errHandler) {\r\n        this.tokenQueue = [];\r\n        this.precedence = new Map();\r\n        this.LOWEST_PRECEDENCE = 0;\r\n        this.HIGHEST_PRECEDENCE = 10;\r\n        this.lexer = lexer;\r\n        this.err = _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler.fromHandler(\"----Parser----\\n\", errHandler);\r\n        this.initPrecedenceMap();\r\n    }\r\n    assertToken(type, expectedTkn, msg) {\r\n        let tkn = this.peekToken();\r\n        if (tkn.type !== type) {\r\n            let res = \"Expected \";\r\n            if (expectedTkn) {\r\n                res += expectedTkn;\r\n            }\r\n            else {\r\n                res += _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType[type];\r\n            }\r\n            if (tkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN) {\r\n                res += \" but got '\" + tkn.stringValue + \"' instead\";\r\n            }\r\n            else {\r\n                res += \" but got \" + tkn.stringValue + \" instead\";\r\n            }\r\n            if (msg) {\r\n                res += \": \" + msg;\r\n            }\r\n            this.err.atAfterLastToken_PANIC(res, tkn);\r\n        }\r\n    }\r\n    lookAheadToken(amount) {\r\n        console.assert(amount > 0, \"Must only look ahead by amount greater than 0. Instead got %s\", amount);\r\n        for (let i = this.tokenQueue.length; i < amount; i++) {\r\n            this.tokenQueue.push(this.lexer.nextToken());\r\n        }\r\n        return this.tokenQueue[amount - 1];\r\n    }\r\n    peekToken() {\r\n        return this.lookAheadToken(1);\r\n    }\r\n    checkToken(type) {\r\n        return this.peekToken().type === type;\r\n    }\r\n    nextToken() {\r\n        if (this.tokenQueue.length > 0) {\r\n            return this.tokenQueue.shift();\r\n        }\r\n        else {\r\n            return this.lexer.nextToken();\r\n        }\r\n    }\r\n    parseProgram() {\r\n        this.globalScope = _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope.newGlobalScope();\r\n        let program = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTProgram(this.peekToken());\r\n        program.statements = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            switch (this.peekToken().type) {\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN:\r\n                    this.err.atToken_PANIC(\"Must declare a module in the format [moduleName] = module {...}\", this.peekToken());\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                    this.err.atToken_PANIC(\"Must declare a type definition in the format [typeName] = type {...}\", this.peekToken());\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN:\r\n                    this.err.atToken_PANIC(\"Can't use 'with' statement in global scope\", this.peekToken());\r\n                default:\r\n                    program.statements.push(this.parseStatement(this.globalScope));\r\n            }\r\n        }\r\n        return program;\r\n    }\r\n    parseBlock(blockScope) {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN, \"{\", \"Block must start wth {\");\r\n        let block = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBlock(this.nextToken());\r\n        block.withModules = [];\r\n        block.statements = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            switch (this.peekToken().type) {\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN:\r\n                    this.err.atToken_PANIC(\"Must declare a module in the format [moduleName] = module {...}\", this.peekToken());\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                    this.err.atToken_PANIC(\"Must declare a type definition in the format [typeName] = type {...}\", this.peekToken());\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN:\r\n                    block.withModules.push(this.parseWith(blockScope));\r\n                    break;\r\n                default:\r\n                    block.statements.push(this.parseStatement(blockScope));\r\n                    break;\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atToken(\"Error in block\", block.locToken)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected closing }\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        return block;\r\n    }\r\n    parseStatement(scope) {\r\n        switch (this.peekToken().type) {\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN:\r\n                return this.parseIf(scope);\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WHILE_TKN:\r\n                return this.parseWhile(scope);\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.FOR_TKN:\r\n                return this.parseFor(scope);\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BREAK_TKN:\r\n                let breakStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBreak(this.nextToken());\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of break statements\");\r\n                this.nextToken();\r\n                return breakStatement;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONTINUE_TKN:\r\n                let continueStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTContinue(this.nextToken());\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of continue statements\");\r\n                this.nextToken();\r\n                return continueStatement;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RETURN_TKN:\r\n                let returnStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTReturn(this.nextToken());\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                    returnStatement.returnValue = this.parseExpression();\r\n                }\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of return statements\");\r\n                this.nextToken();\r\n                return returnStatement;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN:\r\n                let refName = this.parseReference();\r\n                if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                    this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of statements\");\r\n                    this.nextToken();\r\n                    return refName;\r\n                }\r\n                else {\r\n                    let dec = this.parseDeclarationFromName(scope, refName);\r\n                    this.assertSemiColonAfterDeclaration(dec);\r\n                    return dec;\r\n                }\r\n            default:\r\n                this.err.atToken_PANIC(\"Declaration or expression must start with a reference to a name\", this.peekToken());\r\n        }\r\n    }\r\n    parseDeclaration(scope) {\r\n        if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n            this.err.atToken_PANIC(\"The expected declaration must start with a variable name\", this.peekToken());\r\n        }\r\n        return this.parseDeclarationFromName(scope, this.parseReference());\r\n    }\r\n    parseDeclarationFromName(scope, identifier) {\r\n        let declaration = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(identifier.locToken);\r\n        declaration.lvalue = identifier;\r\n        if (declaration.lvalue.nodeName == _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.NAME) {\r\n            let name = declaration.lvalue;\r\n            let attemptAdded = scope.attemptAdd(name.refName, declaration);\r\n            if (!attemptAdded.locToken.equals(declaration.locToken)) {\r\n                this.err\r\n                    .atToken(\"Found duplicate name declaration here\", attemptAdded.locToken)\r\n                    .atToken_PANIC(\"Other duplicate name declaration here \", declaration.locToken);\r\n            }\r\n        }\r\n        else {\r\n            this.err.atToken(\"Handle complex declaration names\", declaration.locToken).warn();\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN)) {\r\n            this.nextToken();\r\n            declaration.type = this.parseType();\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN)) {\r\n            this.nextToken();\r\n            switch (this.peekToken().type) {\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                    declaration.rvalue = this.parseTypeDefinition(scope);\r\n                    break;\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN:\r\n                    declaration.rvalue = this.parseModule(scope);\r\n                    break;\r\n                default:\r\n                    if ((this.lookAheadToken(1).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN &&\r\n                        this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN &&\r\n                        this.lookAheadToken(3).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN) ||\r\n                        (this.lookAheadToken(1).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN &&\r\n                            this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN &&\r\n                            (this.lookAheadToken(3).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN ||\r\n                                this.lookAheadToken(3).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN))) {\r\n                        declaration.rvalue = this.parseFunction(scope);\r\n                    }\r\n                    else {\r\n                        declaration.rvalue = this.parseExpression();\r\n                    }\r\n            }\r\n        }\r\n        if (!declaration.type && !declaration.rvalue) {\r\n            this.err\r\n                .atToken(\"Error in declaration\", declaration.locToken)\r\n                .atToken_PANIC(this.peekToken().stringValue +\r\n                \" is not allowed here. Declaration must either assign a value using = or specify a type using :\", this.peekToken());\r\n        }\r\n        return declaration;\r\n    }\r\n    assertSemiColonAfterDeclaration(declaration) {\r\n        if (declaration.rvalue &&\r\n            (declaration.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.FUNCTION ||\r\n                declaration.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.MODULE ||\r\n                declaration.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.TYPE_DEF)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                switch (declaration.rvalue.nodeName) {\r\n                    case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.MODULE:\r\n                        this.err\r\n                            .atToken(\"Error in module declaration\", declaration.locToken)\r\n                            .atToken_PANIC(\"Semi-colons are not accepted after a module declaration\", this.peekToken());\r\n                    case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.TYPE_DEF:\r\n                        this.err\r\n                            .atToken(\"Error in type definition\", declaration.locToken)\r\n                            .atToken_PANIC(\"Semi-colons are not accepted after a type definition\", this.peekToken());\r\n                    case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.FUNCTION:\r\n                        this.err\r\n                            .atToken(\"Error in function declaration\", declaration.locToken)\r\n                            .atToken_PANIC(\"Semi-colons are not accepted after a function declaration\", this.peekToken());\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                this.err.atToken_PANIC(\"Unbalanced parenthesis. Expected a semi-colon\", this.peekToken());\r\n            }\r\n            if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                this.err\r\n                    .atToken(\"Error in declaration\", declaration.lvalue.locToken)\r\n                    .atAfterLastToken_PANIC(\"Expected a semi-colon at the end of the variable declaration but got \" +\r\n                    this.peekToken().stringValue +\r\n                    \" instead\", this.peekToken());\r\n            }\r\n            this.nextToken();\r\n        }\r\n    }\r\n    parseWith(scope) {\r\n        this.nextToken();\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN, \"a module name\", \"With keyword must be followed by a name reference to a module\");\r\n        let withModuleReference = this.parseReference();\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of with statements\");\r\n        this.nextToken();\r\n        return withModuleReference;\r\n    }\r\n    parseReference() {\r\n        return this.recurseReference(this.peekToken());\r\n    }\r\n    recurseReference(sourceToken) {\r\n        let reference;\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            let tkn = this.peekToken();\r\n            if (reference) {\r\n                switch (tkn.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN:\r\n                        this.err\r\n                            .atToken(\"Error in reference starting with\", sourceToken)\r\n                            .atToken_PANIC(\"A dot must be used to separate a name from the reference to the left of it\", tkn);\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN:\r\n                        reference = this.parseCall(reference, sourceToken);\r\n                        continue;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN:\r\n                        let dotOp = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDotOperator(reference.locToken);\r\n                        dotOp.rootValue = reference;\r\n                        this.nextToken();\r\n                        dotOp.memberValue = this.recurseReference(sourceToken);\r\n                        reference = dotOp;\r\n                        continue;\r\n                    default:\r\n                        return reference;\r\n                }\r\n            }\r\n            else {\r\n                switch (tkn.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN:\r\n                        reference = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.nextToken());\r\n                        reference.refName = reference.locToken.stringValue;\r\n                        continue;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN:\r\n                        this.err\r\n                            .atToken(\"Error in reference starting with\", sourceToken)\r\n                            .atToken_PANIC(\"Can't start a reference with a dot or have two dots in a row\", this.peekToken());\r\n                    default:\r\n                        this.err\r\n                            .atToken(\"Error in reference starting with\", sourceToken)\r\n                            .atToken_PANIC(\"Reference access must only contain names, dots and calls\", this.peekToken());\r\n                }\r\n            }\r\n        }\r\n        this.err\r\n            .atToken(\"Error in reference starting with\", sourceToken)\r\n            .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected another name, dot or terminating token like semi-colon\", this.peekToken());\r\n        return reference;\r\n    }\r\n    parseIf(scope) {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN, \"if\", \"If statement must start with if keyword\");\r\n        let ifStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTIf(this.nextToken());\r\n        ifStatement.condition = this.parseExpression();\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN))\r\n            this.err.atToken_PANIC(\"Unbalanced parenthesis. Expected {\", this.peekToken());\r\n        ifStatement.consequence = this.parseBlock(_Scope__WEBPACK_IMPORTED_MODULE_3__.Scope.newScopeFrom(scope));\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELSE_TKN)) {\r\n            this.nextToken();\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN)) {\r\n                ifStatement.alternative = this.parseIf(scope);\r\n            }\r\n            else if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN)) {\r\n                ifStatement.alternative = this.parseBlock(_Scope__WEBPACK_IMPORTED_MODULE_3__.Scope.newScopeFrom(scope));\r\n            }\r\n            else if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n                this.err\r\n                    .atToken(\"Error in if statement\", ifStatement.locToken)\r\n                    .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected if keyword or {\", this.peekToken());\r\n            }\r\n            else {\r\n                this.err.atToken_PANIC(this.peekToken().stringValue +\r\n                    \" is not allowed here. Expected either an if keyword to create an else if or a { to declare a block\", this.peekToken());\r\n            }\r\n        }\r\n        return ifStatement;\r\n    }\r\n    parseWhile(scope) {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WHILE_TKN, \"while\", \"While loop must start with while keyword\");\r\n        let whileStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTWhile(this.nextToken());\r\n        whileStatement.condition = this.parseExpression();\r\n        whileStatement.block = this.parseBlock(_Scope__WEBPACK_IMPORTED_MODULE_3__.Scope.newScopeFrom(scope));\r\n        return whileStatement;\r\n    }\r\n    parseFor(scope) {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.FOR_TKN, \"for\", \"For loop must start with for keyword\");\r\n        let forStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTFor(this.nextToken());\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN)) {\r\n            this.err.atToken_PANIC(\"For loops don't require encapsulating parenthesis in this language\", this.peekToken());\r\n        }\r\n        switch (this.lookAheadToken(2).type) {\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN:\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN, \"a variable reference to an iterable\");\r\n                forStatement.iterableName = this.parseExpression();\r\n                break;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN:\r\n                forStatement.itemParamDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN, \"an 'item' variable declaration\");\r\n                forStatement.itemParamDec.refName = this.nextToken().stringValue;\r\n                this.nextToken();\r\n                forStatement.indexParamDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN, \"an 'index' variable declaration\");\r\n                forStatement.indexParamDec.refName = this.nextToken().stringValue;\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IN_TKN, \"in\");\r\n                this.nextToken();\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN, \"a variable reference to an iterable\");\r\n                forStatement.iterableName = this.parseExpression();\r\n                break;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IN_TKN:\r\n                forStatement.itemParamDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN, \"an 'item' variable declaration\");\r\n                forStatement.itemParamDec.refName = this.nextToken().stringValue;\r\n                this.nextToken();\r\n                if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.HASH_RANGE_TKN)) {\r\n                    this.nextToken();\r\n                    let isLowerBoundExclusive = false;\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN)) {\r\n                        isLowerBoundExclusive = true;\r\n                    }\r\n                    else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_SQUARE_TKN)) {\r\n                        this.err.atToken_PANIC(\"Expected either a [ or a (\", this.peekToken());\r\n                    }\r\n                    this.nextToken();\r\n                    forStatement.lowerBound = this.parseExpression();\r\n                    if (isLowerBoundExclusive) {\r\n                        let expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(forStatement.lowerBound.locToken);\r\n                        expression.lvalue = forStatement.lowerBound;\r\n                        expression.operation = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(\"+\", forStatement.lowerBound.locToken.line, forStatement.lowerBound.locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_TKN);\r\n                        expression.rvalue = this.makeNewLiteralNode(forStatement.lowerBound.locToken, 1);\r\n                        forStatement.lowerBound = expression;\r\n                    }\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_SQUARE_TKN) || this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                        this.err.atToken_PANIC(\"For loop range requires two expressions separated by a comma\", this.peekToken());\r\n                    }\r\n                    this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN, \",\", \"Invalid declaration of a for loop range\");\r\n                    this.nextToken();\r\n                    forStatement.upperBound = this.parseExpression();\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                        let expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(forStatement.upperBound.locToken);\r\n                        expression.lvalue = forStatement.upperBound;\r\n                        expression.operation = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(\"-\", forStatement.upperBound.locToken.line, forStatement.upperBound.locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN);\r\n                        expression.rvalue = this.makeNewLiteralNode(forStatement.upperBound.locToken, 1);\r\n                        forStatement.upperBound = expression;\r\n                    }\r\n                    else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_SQUARE_TKN)) {\r\n                        this.err.atToken_PANIC(\"Expected either a ] or a )\", this.peekToken());\r\n                    }\r\n                    this.nextToken();\r\n                    break;\r\n                }\r\n                else {\r\n                    this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN, \"a variable reference to an iterable\", \"A potential fix is to use #range after the in keyword to denote iteration over a range\");\r\n                    forStatement.iterableName = this.parseExpression();\r\n                    break;\r\n                }\r\n            default:\r\n                this.err.atToken_PANIC(\"Invalid for loop. Expected a variable name but got \" + this.peekToken().stringValue + \" instead\", this.peekToken());\r\n        }\r\n        forStatement.block = this.parseBlock(_Scope__WEBPACK_IMPORTED_MODULE_3__.Scope.newScopeFrom(scope));\r\n        return forStatement;\r\n    }\r\n    parseModule(scope) {\r\n        let moduleScope = _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope.newScopeFrom(scope);\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN, \"module\", \"Module must start with module keyword\");\r\n        let module = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTModule(this.nextToken());\r\n        module.withModules = [];\r\n        module.declarations = [];\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN, \"{\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN)) {\r\n                module.withModules.push(this.parseWith(scope));\r\n            }\r\n            else {\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err\r\n                        .atToken(\"Error in module\", module.locToken)\r\n                        .atToken_PANIC(\"Module must only contain variable declarations\", this.peekToken());\r\n                }\r\n                let declaration = this.parseDeclaration(moduleScope);\r\n                if (declaration.rvalue && declaration.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.MODULE) {\r\n                    this.err.atToken_PANIC(\"Module declaration must be declared in global scope\", this.peekToken());\r\n                }\r\n                module.declarations.push(declaration);\r\n                this.assertSemiColonAfterDeclaration(declaration);\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atToken(\"Error in module\", module.locToken)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected closing {\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        return module;\r\n    }\r\n    parseTypeDefinition(scope) {\r\n        let typeDefScope = _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope.newTypeDefScopeFrom(scope);\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN, \"type\", \"Type definition must start with type keyword\");\r\n        let typeDef = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeDefinition(this.nextToken());\r\n        typeDef.withModules = [];\r\n        typeDef.declarations = [];\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN, \"{\", \"Type definition must be enclosed in curly brackets\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN)) {\r\n                typeDef.withModules.push(this.parseWith(typeDefScope));\r\n            }\r\n            else {\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err\r\n                        .atToken(\"Error in type definition\", typeDef.locToken)\r\n                        .atToken_PANIC(\"Type definition must only contain variable declarations\", this.peekToken());\r\n                }\r\n                let declaration = this.parseDeclaration(typeDefScope);\r\n                if (declaration.lvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.NAME) {\r\n                    this.err.atToken_PANIC(\"The variable name declaration of a type definition can't have dots\", declaration.locToken);\r\n                }\r\n                typeDef.declarations.push(declaration);\r\n                if (declaration.rvalue) {\r\n                    if (declaration.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.MODULE) {\r\n                        this.err\r\n                            .atToken(\"Error in type definition\", typeDef.locToken)\r\n                            .atToken_PANIC(\"Modules are not allowed within type definitions\", declaration.locToken);\r\n                    }\r\n                    if (declaration.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.TYPE_DEF) {\r\n                        this.err\r\n                            .atToken(\"Error in type definition\", typeDef.locToken)\r\n                            .atToken_PANIC(\"Type definitions are not allowed within type definitions\", declaration.locToken);\r\n                    }\r\n                }\r\n                this.assertSemiColonAfterDeclaration(declaration);\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atToken(\"Error in type definition\", typeDef.locToken)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected closing {\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        return typeDef;\r\n    }\r\n    parseFunction(scope) {\r\n        let functionScope = _Scope__WEBPACK_IMPORTED_MODULE_3__.Scope.newScopeFrom(scope);\r\n        let func = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTFunction(this.peekToken());\r\n        func.paramDeclaration = [];\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN, \"(\", \"Function declaration must specify parameters or use ()\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            let declaration = this.parseDeclaration(functionScope);\r\n            if (declaration.lvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.NAME)\r\n                this.err.atToken_PANIC(\"The variable name declaration of a function parameter can't have dots\", declaration.locToken);\r\n            func.paramDeclaration.push(declaration);\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN) {\r\n                    this.err.atAfterLastToken_PANIC(\"Expected another parameter definition after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                this.err.atAfterLastToken_PANIC(\"Invalid function parameter definition. Expected either a comma or )\", this.peekToken());\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err.atAfterLastToken_PANIC(\"Unterminated parameter declaration at end of file\", this.peekToken());\r\n        }\r\n        this.nextToken();\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN)) {\r\n            this.nextToken();\r\n            func.returnType = this.parseExpression();\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN)) {\r\n            func.block = this.parseBlock(functionScope);\r\n        }\r\n        else {\r\n            this.err.atToken_PANIC(this.peekToken().stringValue +\r\n                \" is not allowed here. Function must either declare a return type using -> or omit completely\", this.peekToken());\r\n        }\r\n        return func;\r\n    }\r\n    parseType() {\r\n        let expression = this.parseExpression();\r\n        switch (expression.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.NAME:\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.DOT_OP:\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.CALL:\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.TYPE_LITERAL:\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.FUNCTION_TYPE:\r\n                return expression;\r\n        }\r\n        this.err.atToken_PANIC(\"Invalid type expression\", expression.locToken);\r\n    }\r\n    setPrecedence(precedence, ...types) {\r\n        for (let i = 0; i < types.length; i++) {\r\n            this.precedence.set(types[i], precedence);\r\n        }\r\n    }\r\n    initPrecedenceMap() {\r\n        this.setPrecedence(1, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_OR_TKN);\r\n        this.setPrecedence(2, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_XOR_TKN);\r\n        this.setPrecedence(3, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_AND_TKN);\r\n        this.setPrecedence(4, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_OR_TKN);\r\n        this.setPrecedence(5, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_XOR_TKN);\r\n        this.setPrecedence(6, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_AND_TKN);\r\n        this.setPrecedence(7, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_EQUALS_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_EQUALS_TKN);\r\n        this.setPrecedence(8, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_EQUAL_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_EQUAL_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_TKN);\r\n        this.setPrecedence(9, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_LEFT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_RIGHT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n        this.setPrecedence(10, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN);\r\n        this.setPrecedence(11, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MULT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_DIVIDE_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MODULUS_TKN);\r\n        this.setPrecedence(12, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_CARROT_TKN);\r\n        this.setPrecedence(13, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN);\r\n    }\r\n    makeNewLiteralNode(locToken, value) {\r\n        let tkn;\r\n        switch (typeof value) {\r\n            case \"number\":\r\n                tkn = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(value + \"\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN);\r\n                tkn.value = value;\r\n                break;\r\n            case \"string\":\r\n                tkn = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(value + \"\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN);\r\n                tkn.value = value;\r\n                break;\r\n            case \"boolean\":\r\n                if (value) {\r\n                    tkn = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(value + \"\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN);\r\n                }\r\n                else {\r\n                    tkn = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(value + \"\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN);\r\n                }\r\n        }\r\n        let literal = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTLiteral(tkn);\r\n        literal.value = tkn;\r\n        return literal;\r\n    }\r\n    parseExpression() {\r\n        return this.recurseExpression(this.LOWEST_PRECEDENCE, 0, this.peekToken());\r\n    }\r\n    recurseExpression(precedence, depthCount, sourceToken) {\r\n        let expression;\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            let tkn = this.peekToken();\r\n            switch (tkn.type) {\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN:\r\n                    this.err\r\n                        .atToken(\"Error in expression starting with\", sourceToken)\r\n                        .atToken_PANIC(\"Operations on a module declaration are illegal. Modules should strictly be assigned to a variable\", tkn);\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                    this.err\r\n                        .atToken(\"Error in expression starting with\", sourceToken)\r\n                        .atToken_PANIC(\"Operations on a type definition are illegal. Type definitions should strictly be assigned to a variable\", tkn);\r\n            }\r\n            if (expression) {\r\n                switch (tkn.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BOOL_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.VOID_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_NOT_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN:\r\n                        if (depthCount !== 0) {\r\n                            this.err\r\n                                .insert(\"First potential error:\\n\")\r\n                                .atToken(\"Operand token (ex: 3, true, etc.) or prefix operator (ex: !, ~, etc.) can only appear after an operator (ex: +, *, etc.)\", tkn)\r\n                                .insert(\"Second potential error:\\n\")\r\n                                .atAfterLastToken_PANIC(\"Unbalanced parenthesis. Expected \" + depthCount + \" more )\", tkn);\r\n                        }\r\n                        return expression;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN:\r\n                        return expression;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN:\r\n                        if (this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN) {\r\n                            expression = this.parseTypeConstruction(expression);\r\n                        }\r\n                        else {\r\n                            this.err\r\n                                .atToken(\"Error in expression starting with\", sourceToken)\r\n                                .atToken_PANIC(\"Dot operator can only be used between two references\", tkn);\r\n                        }\r\n                    default:\r\n                        let curPrecedence = this.precedence.get(tkn.type);\r\n                        if (curPrecedence !== undefined) {\r\n                            if (curPrecedence > precedence) {\r\n                                if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN)) {\r\n                                    expression = this.parseCall(expression, sourceToken);\r\n                                }\r\n                                else {\r\n                                    let binOp = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(expression.locToken);\r\n                                    binOp.lvalue = expression;\r\n                                    binOp.operation = this.nextToken();\r\n                                    binOp.rvalue = this.recurseExpression(curPrecedence, depthCount, sourceToken);\r\n                                    expression = binOp;\r\n                                }\r\n                            }\r\n                            else {\r\n                                return expression;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.peekToken().type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN) {\r\n                                this.err.atToken_PANIC(\"Expression contains unknown operator \" + this.peekToken().stringValue, this.peekToken());\r\n                            }\r\n                            else if (depthCount !== 0) {\r\n                                this.err\r\n                                    .atToken(\"Error in expression starting with\", sourceToken)\r\n                                    .atToken_PANIC(\"Unbalanced parenthesis. Expected \" + depthCount + \" more )\", tkn);\r\n                            }\r\n                            else {\r\n                                return expression;\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            else {\r\n                switch (tkn.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BOOL_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.VOID_TYPE_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeLiteral(tkn);\r\n                        expression.type = this.nextToken();\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTLiteral(tkn);\r\n                        expression.value = this.nextToken();\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_NOT_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTUnaryOperator(tkn);\r\n                        expression.operation = this.nextToken();\r\n                        expression.value = this.recurseExpression(precedence, depthCount, sourceToken);\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN:\r\n                        if (this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN) {\r\n                            expression = this.parseFunctionType();\r\n                        }\r\n                        else {\r\n                            expression = this.parseLambda();\r\n                        }\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(tkn);\r\n                        expression.refName = tkn.stringValue;\r\n                        this.nextToken();\r\n                        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN) || this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN)) {\r\n                            this.err.atToken_PANIC(\"Too many dots in a row. Note that an ellipsis has three dots: ...\", this.peekToken());\r\n                        }\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN:\r\n                        expression = this.recurseReference(sourceToken);\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN:\r\n                        this.nextToken();\r\n                        expression = this.recurseExpression(this.LOWEST_PRECEDENCE, depthCount + 1, sourceToken);\r\n                        this.nextToken();\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(tkn);\r\n                        expression.lvalue = this.makeNewLiteralNode(tkn, 0);\r\n                        expression.operation = this.nextToken();\r\n                        expression.rvalue = this.recurseExpression(this.HIGHEST_PRECEDENCE, depthCount, sourceToken);\r\n                        break;\r\n                    default:\r\n                        this.err.atAfterLastToken_PANIC(\"Expected an expression but got nothing\", tkn);\r\n                }\r\n            }\r\n        }\r\n        this.err\r\n            .atToken(\"Error in expression starting with\", sourceToken)\r\n            .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected an operator, operand, or terminating token like semi-colon\", this.peekToken());\r\n        return expression;\r\n    }\r\n    parseCall(prevExpression, sourceToken) {\r\n        let call = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTCall(prevExpression.locToken);\r\n        call.functionNameRef = prevExpression;\r\n        call.givenParams = [];\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN || expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN) {\r\n                    this.err.atAfterLastToken_PANIC(\"Expected another expression after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else {\r\n                call.givenParams.push(this.recurseExpression(this.LOWEST_PRECEDENCE, 0, sourceToken));\r\n            }\r\n        }\r\n        this.nextToken();\r\n        return call;\r\n    }\r\n    parseTypeConstruction(prevExpression) {\r\n        let typeConstruct = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeConstruction(prevExpression.locToken);\r\n        typeConstruct.typeRef = prevExpression;\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN, \".\", \"dot '.' is required after the type name in a type construction\");\r\n        this.nextToken();\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN, \"{\", \"Type construction must be enclosed in curly brackets\");\r\n        this.nextToken();\r\n        typeConstruct.assignments = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN)) {\r\n            let declaration = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n            declaration.lvalue = this.parseReference();\r\n            if (declaration.lvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.NAME) {\r\n                this.err\r\n                    .atToken(\"Error in type constructor\", typeConstruct.locToken)\r\n                    .atToken_PANIC(\"Type constructor assignments need to be single variable names\", declaration.lvalue.locToken);\r\n            }\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN)) {\r\n                this.err\r\n                    .atToken(\"Error in type constructor\", typeConstruct.locToken)\r\n                    .atToken_PANIC(\"Assignment in a type constructor must use <- instead of =\", this.peekToken());\r\n            }\r\n            this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.REVERSE_ARROW_TKN, \"<-\", \"Assignment in a type constructor must assign a value using <-\");\r\n            this.nextToken();\r\n            declaration.rvalue = this.parseExpression();\r\n            typeConstruct.assignments.push(declaration);\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) {\r\n                    this.err.atAfterLastToken_PANIC(\"Expected another assignment after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN)) {\r\n                this.err.atAfterLastToken_PANIC(\"Invalid type construction. Expected either a comma or }\", this.peekToken());\r\n            }\r\n        }\r\n        this.nextToken();\r\n        return typeConstruct;\r\n    }\r\n    parseFunctionType() {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN, \"\\\\\", \"Function type must start with a backslash\");\r\n        this.nextToken();\r\n        let type = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTFunctionType(this.peekToken());\r\n        this.nextToken();\r\n        type.inputType = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            type.inputType.push(this.parseType());\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                this.nextToken();\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                this.err.atAfterLastToken_PANIC(\"Invalid type definition. Expected either a comma or )\", this.peekToken());\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atToken(\"Error in type specifier\", type.locToken)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected another type\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN, \"->\", \"Function type declarations must declare a return type.\");\r\n        this.nextToken();\r\n        type.outType = this.parseType();\r\n        return type;\r\n    }\r\n    parseLambda() {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN, \"\\\\\", \"Lambda expression must start with \\\\\");\r\n        let lambda = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTLambda(this.nextToken());\r\n        lambda.parameters = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            let param = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n            this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN, \"a name parameter to a lambda expression\", \"Lambda parameters must be variable names\");\r\n            param.refName = this.nextToken().stringValue;\r\n            lambda.parameters.push(param);\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                this.nextToken();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atToken(\"Error in lambda expression\", lambda.locToken)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected another parameter\", this.peekToken());\r\n        }\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN, \"=>\", \"Lambdas require => after the parameters\");\r\n        this.nextToken();\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RETURN_TKN)) {\r\n            this.err.atToken_PANIC(\"Return keyword is not accepted in a lambda definition\", this.peekToken());\r\n        }\r\n        lambda.expression = this.parseExpression();\r\n        return lambda;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Parser.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Scope.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Scope.ts ***!
  \*********************************/
/*! namespace exports */
/*! export Scope [provided] [no usage info] [missing usage info prevents renaming] */
/*! export printScope [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Scope\": () => /* binding */ Scope,\n/* harmony export */   \"printScope\": () => /* binding */ printScope\n/* harmony export */ });\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _Log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Log */ \"./src/scuft/lang/Log.ts\");\n\r\n\r\nclass Scope {\r\n    constructor() {\r\n        this.table = new Map();\r\n        this.inwardScoping = false;\r\n    }\r\n    static newGlobalScope() {\r\n        return new Scope();\r\n    }\r\n    static newScopeFrom(parentScope) {\r\n        let scope = new Scope();\r\n        scope.parent = parentScope;\r\n        if (!parentScope.children)\r\n            parentScope.children = [];\r\n        parentScope.children.push(scope);\r\n        return scope;\r\n    }\r\n    static newTypeDefScopeFrom(parentScope) {\r\n        let scope = this.newScopeFrom(parentScope);\r\n        scope.inwardScoping = true;\r\n        return scope;\r\n    }\r\n    attemptAdd(identifierName, declaration) {\r\n        let otherDec = this.getDeclarationFromName(identifierName);\r\n        if (otherDec)\r\n            return otherDec;\r\n        this.table.set(identifierName, declaration);\r\n        return declaration;\r\n    }\r\n    with(moduleName) {\r\n    }\r\n    getDeclarationFromName(identifierName) {\r\n        if (this.table.has(identifierName))\r\n            return this.table.get(identifierName);\r\n        if (!this.parent || this.inwardScoping) {\r\n            return undefined;\r\n        }\r\n        else {\r\n            return this.parent.getDeclarationFromName(identifierName);\r\n        }\r\n    }\r\n    getDeclarationFromRef(astRef) {\r\n        switch (astRef.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME:\r\n                let astName = astRef;\r\n                return this.getDeclarationFromName(astName.refName);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.DOT_OP:\r\n                return undefined;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.CALL:\r\n                return undefined;\r\n        }\r\n    }\r\n}\r\nfunction recurseScope(scope, fmt) {\r\n    let lines = [(0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(\"Scope\", fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.NODE_FMT)];\r\n    lines.push(\"   Table:\");\r\n    let maxKeyLength = 0;\r\n    let maxTypeLength = 0;\r\n    for (const [key, value] of scope.table.entries()) {\r\n        if (key.length > maxKeyLength)\r\n            maxKeyLength = key.length;\r\n        if (value.type) {\r\n            let typeName = _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value.type);\r\n            if (typeName.length > maxTypeLength)\r\n                maxTypeLength = typeName.length;\r\n        }\r\n    }\r\n    for (const [key, value] of scope.table.entries()) {\r\n        let line = \"      | \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(key, fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.IDENTIFIER_FMT) + \" \".repeat(maxKeyLength - key.length) + \" : \";\r\n        let typeName = \"\";\r\n        if (value.type) {\r\n            typeName = _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value.type);\r\n            line += (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(typeName, fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.TYPE_FMT);\r\n        }\r\n        if (value.rvalue) {\r\n            line +=\r\n                \" \".repeat(maxTypeLength - typeName.length) +\r\n                    \" = \" +\r\n                    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(_Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value.rvalue), fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.EXPRESSION_FMT);\r\n        }\r\n        lines.push(line);\r\n    }\r\n    if (scope.children) {\r\n        for (let i = 0; i < scope.children.length; i++) {\r\n            lines.push(\"   Children:\");\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, recurseScope(scope.children[i], fmt)));\r\n        }\r\n    }\r\n    return (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, lines);\r\n}\r\nfunction printScope(scope) {\r\n    let fmt = [];\r\n    let lines = [];\r\n    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, recurseScope(scope, fmt));\r\n    let str = [lines.join(\"\\n\")];\r\n    for (let i = 0; i < fmt.length; i++) {\r\n        str.push(fmt[i]);\r\n    }\r\n    console.log.apply(lines, str);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Scope.ts\n");

/***/ }),

/***/ "./src/scuft/lang/ScuftTest.ts":
/*!*************************************!*\
  !*** ./src/scuft/lang/ScuftTest.ts ***!
  \*************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* export default binding */ __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _Lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lexer */ \"./src/scuft/lang/Lexer.ts\");\n/* harmony import */ var _Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Parser */ \"./src/scuft/lang/Parser.ts\");\n/* harmony import */ var _test_5_ModuleTypeDefinitionTest_scft__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../test/5-ModuleTypeDefinitionTest.scft */ \"./src/scuft/test/5-ModuleTypeDefinitionTest.scft\");\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Scope */ \"./src/scuft/lang/Scope.ts\");\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\r\n    function testString(input) {\r\n        let errHandler = _ErrorHandler__WEBPACK_IMPORTED_MODULE_5__.ErrorHandler.fromSource(\"\", input);\r\n        let parser = new _Parser__WEBPACK_IMPORTED_MODULE_1__.default(new _Lexer__WEBPACK_IMPORTED_MODULE_0__.default(input, errHandler), errHandler);\r\n        let prgm = parser.parseProgram();\r\n        (0,_Ast__WEBPACK_IMPORTED_MODULE_3__.printAST)(prgm);\r\n        (0,_Scope__WEBPACK_IMPORTED_MODULE_4__.printScope)(parser.globalScope);\r\n        console.log(\"---------------------\");\r\n    }\r\n    testString(_test_5_ModuleTypeDefinitionTest_scft__WEBPACK_IMPORTED_MODULE_2__.default);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL1NjdWZ0VGVzdC50cz8wYjQ4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBNEI7QUFDRTtBQUkwQztBQUd2QztBQUNJO0FBR1M7QUFDOUMsNkJBQWUsc0NBQVk7SUFDdkIsU0FBUyxVQUFVLENBQUMsS0FBYTtRQUk3QixJQUFJLFVBQVUsR0FBRyxrRUFBdUIsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEQsSUFBSSxNQUFNLEdBQUcsSUFBSSw0Q0FBTSxDQUFDLElBQUksMkNBQUssQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbEUsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWpDLDhDQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFJZixrREFBVSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUUvQixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDekMsQ0FBQztJQUtELFVBQVUsQ0FBQywwRUFBaUIsQ0FBQyxDQUFDO0FBWWxDLENBQUMiLCJmaWxlIjoiLi9zcmMvc2N1ZnQvbGFuZy9TY3VmdFRlc3QudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGV4ZXIgZnJvbSBcIi4vTGV4ZXJcIjtcclxuaW1wb3J0IFBhcnNlciBmcm9tIFwiLi9QYXJzZXJcIjtcclxuXHJcbmltcG9ydCBzaW1wbGVUZXN0IGZyb20gXCIuLi90ZXN0LzEtU2ltcGxlVGVzdC5zY2Z0XCI7XHJcbmltcG9ydCBleHByZXNzaW9uVGVzdCBmcm9tIFwiLi4vdGVzdC80LUV4cHJlc3Npb25UZXN0LnNjZnRcIjtcclxuaW1wb3J0IG1vZHVsZVR5cGVEZWZUZXN0IGZyb20gXCIuLi90ZXN0LzUtTW9kdWxlVHlwZURlZmluaXRpb25UZXN0LnNjZnRcIjtcclxuaW1wb3J0IGRlY2xhcmVUeXBlVGVzdCBmcm9tIFwiLi4vdGVzdC82LURlY2xhcmF0aW9uVHlwZUluZmVyLnNjZnRcIjtcclxuXHJcbmltcG9ydCB7IHByaW50QVNUIH0gZnJvbSBcIi4vQXN0XCI7XHJcbmltcG9ydCB7IHByaW50U2NvcGUgfSBmcm9tIFwiLi9TY29wZVwiO1xyXG5pbXBvcnQgVHlwZUNoZWNrZXIgZnJvbSBcIi4vVHlwZUNoZWNrZXJcIjtcclxuaW1wb3J0IHsgU2NvcGUgfSBmcm9tIFwiLi9TY29wZVwiO1xyXG5pbXBvcnQgeyBFcnJvckhhbmRsZXIgfSBmcm9tIFwiLi9FcnJvckhhbmRsZXJcIjtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gdGVzdFN0cmluZyhpbnB1dDogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gbGV0IGxleGVyID0gbmV3IExleGVyKGlucHV0KTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhsZXhlci5sZXgoKSk7XHJcblxyXG4gICAgICAgIGxldCBlcnJIYW5kbGVyID0gRXJyb3JIYW5kbGVyLmZyb21Tb3VyY2UoXCJcIiwgaW5wdXQpO1xyXG4gICAgICAgIGxldCBwYXJzZXIgPSBuZXcgUGFyc2VyKG5ldyBMZXhlcihpbnB1dCwgZXJySGFuZGxlciksIGVyckhhbmRsZXIpO1xyXG4gICAgICAgIGxldCBwcmdtID0gcGFyc2VyLnBhcnNlUHJvZ3JhbSgpO1xyXG5cclxuICAgICAgICBwcmludEFTVChwcmdtKTtcclxuXHJcbiAgICAgICAgLy8gbGV0IHR5cGVDaGVjayA9IG5ldyBUeXBlQ2hlY2tlcihwYXJzZXIuZ2xvYmFsU2NvcGUsIGVyckhhbmRsZXIpO1xyXG4gICAgICAgIC8vIHR5cGVDaGVjay50eXBlSW5mZXJQcm9ncmFtKHByZ20pO1xyXG4gICAgICAgIHByaW50U2NvcGUocGFyc2VyLmdsb2JhbFNjb3BlKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS0tLS0tLS0tLS1cIik7XHJcbiAgICB9XHJcbiAgICAvLyB0ZXN0U3RyaW5nKHNpbXBsZVRlc3QpO1xyXG4gICAgLy8gdGVzdFN0cmluZyhsaXRlcmFsVGVzdCk7XHJcbiAgICAvLyB0ZXN0U3RyaW5nKHR5cGVUZXN0KTtcclxuICAgIC8vIHRlc3RTdHJpbmcoZXhwcmVzc2lvblRlc3QpO1xyXG4gICAgdGVzdFN0cmluZyhtb2R1bGVUeXBlRGVmVGVzdCk7XHJcblxyXG4gICAgLy8gdGVzdFN0cmluZyhkZWNsYXJlVHlwZVRlc3QpO1xyXG5cclxuICAgIC8vIGxldCBwYXJzZXIgPSBuZXcgUGFyc2VyKG5ldyBMZXhlcihkZWNsYXJlVHlwZVRlc3QpKTtcclxuICAgIC8vIGxldCBwcmdtID0gcGFyc2VyLnBhcnNlUHJvZ3JhbSgpO1xyXG4gICAgLy8gcHJpbnRBU1QocHJnbSk7XHJcbiAgICAvLyBsZXQgdHlwZUNoZWNrID0gbmV3IFR5cGVDaGVja2VyKCk7XHJcbiAgICAvLyB0eXBlQ2hlY2sudHlwZUluZmVyUHJvZ3JhbShwcmdtKTtcclxuICAgIC8vIHByaW50U2NvcGUodHlwZUNoZWNrLmdsb2JhbFNjb3BlKTtcclxuXHJcbiAgICAvLyB0ZXN0U3RyaW5nKFwiYjIgPSAoYTogbnVtLCBiOiBudW0pIC0+IG51bSB7fTtcIik7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scuft/lang/ScuftTest.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Token.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Token.ts ***!
  \*********************************/
/*! namespace exports */
/*! export Token [provided] [no usage info] [missing usage info prevents renaming] */
/*! export TokenType [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Token\": () => /* binding */ Token,\n/* harmony export */   \"TokenType\": () => /* binding */ TokenType\n/* harmony export */ });\nclass Token {\r\n    constructor(stringValue, line, c, type) {\r\n        this.stringValue = stringValue;\r\n        this.line = line;\r\n        this.c = c;\r\n        this.type = type;\r\n        this.typeName = TokenType[type];\r\n    }\r\n    equals(other) {\r\n        return other.line === this.line && other.c === this.c && this.typeEquals(other) && other.value === this.value;\r\n    }\r\n    typeEquals(other) {\r\n        return other.type === this.type;\r\n    }\r\n}\r\nvar TokenType;\r\n(function (TokenType) {\r\n    TokenType[TokenType[\"IDENTIFIER_TKN\"] = 0] = \"IDENTIFIER_TKN\";\r\n    TokenType[TokenType[\"COLON_TKN\"] = 1] = \"COLON_TKN\";\r\n    TokenType[TokenType[\"NUMERIC_LITERAL_TKN\"] = 2] = \"NUMERIC_LITERAL_TKN\";\r\n    TokenType[TokenType[\"STRING_LITERAL_TKN\"] = 3] = \"STRING_LITERAL_TKN\";\r\n    TokenType[TokenType[\"ASSIGNMENT_TKN\"] = 4] = \"ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"CONST_ASSIGNMENT_TKN\"] = 5] = \"CONST_ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"MUTABLE_ASSIGNMENT_TKN\"] = 6] = \"MUTABLE_ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"LEFT_CURLY_TKN\"] = 7] = \"LEFT_CURLY_TKN\";\r\n    TokenType[TokenType[\"RIGHT_CURLY_TKN\"] = 8] = \"RIGHT_CURLY_TKN\";\r\n    TokenType[TokenType[\"LEFT_SQUARE_TKN\"] = 9] = \"LEFT_SQUARE_TKN\";\r\n    TokenType[TokenType[\"RIGHT_SQUARE_TKN\"] = 10] = \"RIGHT_SQUARE_TKN\";\r\n    TokenType[TokenType[\"LEFT_PARENS_TKN\"] = 11] = \"LEFT_PARENS_TKN\";\r\n    TokenType[TokenType[\"RIGHT_PARENS_TKN\"] = 12] = \"RIGHT_PARENS_TKN\";\r\n    TokenType[TokenType[\"TYPE_TKN\"] = 13] = \"TYPE_TKN\";\r\n    TokenType[TokenType[\"MODULE_TKN\"] = 14] = \"MODULE_TKN\";\r\n    TokenType[TokenType[\"WITH_TKN\"] = 15] = \"WITH_TKN\";\r\n    TokenType[TokenType[\"IF_TKN\"] = 16] = \"IF_TKN\";\r\n    TokenType[TokenType[\"ELSE_TKN\"] = 17] = \"ELSE_TKN\";\r\n    TokenType[TokenType[\"WHILE_TKN\"] = 18] = \"WHILE_TKN\";\r\n    TokenType[TokenType[\"FOR_TKN\"] = 19] = \"FOR_TKN\";\r\n    TokenType[TokenType[\"IN_TKN\"] = 20] = \"IN_TKN\";\r\n    TokenType[TokenType[\"BREAK_TKN\"] = 21] = \"BREAK_TKN\";\r\n    TokenType[TokenType[\"CONTINUE_TKN\"] = 22] = \"CONTINUE_TKN\";\r\n    TokenType[TokenType[\"COND_OR_TKN\"] = 23] = \"COND_OR_TKN\";\r\n    TokenType[TokenType[\"COND_AND_TKN\"] = 24] = \"COND_AND_TKN\";\r\n    TokenType[TokenType[\"COND_XOR_TKN\"] = 25] = \"COND_XOR_TKN\";\r\n    TokenType[TokenType[\"COND_NOT_TKN\"] = 26] = \"COND_NOT_TKN\";\r\n    TokenType[TokenType[\"COND_EQUALS_TKN\"] = 27] = \"COND_EQUALS_TKN\";\r\n    TokenType[TokenType[\"COND_NOT_EQUALS_TKN\"] = 28] = \"COND_NOT_EQUALS_TKN\";\r\n    TokenType[TokenType[\"COND_LESS_THAN_TKN\"] = 29] = \"COND_LESS_THAN_TKN\";\r\n    TokenType[TokenType[\"COND_LESS_THAN_EQUAL_TKN\"] = 30] = \"COND_LESS_THAN_EQUAL_TKN\";\r\n    TokenType[TokenType[\"COND_GREATER_THAN_TKN\"] = 31] = \"COND_GREATER_THAN_TKN\";\r\n    TokenType[TokenType[\"COND_GREATER_THAN_EQUAL_TKN\"] = 32] = \"COND_GREATER_THAN_EQUAL_TKN\";\r\n    TokenType[TokenType[\"COND_TRUE_TKN\"] = 33] = \"COND_TRUE_TKN\";\r\n    TokenType[TokenType[\"COND_FALSE_TKN\"] = 34] = \"COND_FALSE_TKN\";\r\n    TokenType[TokenType[\"VOID_TYPE_TKN\"] = 35] = \"VOID_TYPE_TKN\";\r\n    TokenType[TokenType[\"NUM_TYPE_TKN\"] = 36] = \"NUM_TYPE_TKN\";\r\n    TokenType[TokenType[\"STRING_TYPE_TKN\"] = 37] = \"STRING_TYPE_TKN\";\r\n    TokenType[TokenType[\"BOOL_TYPE_TKN\"] = 38] = \"BOOL_TYPE_TKN\";\r\n    TokenType[TokenType[\"BIN_OR_TKN\"] = 39] = \"BIN_OR_TKN\";\r\n    TokenType[TokenType[\"BIN_AND_TKN\"] = 40] = \"BIN_AND_TKN\";\r\n    TokenType[TokenType[\"BIN_XOR_TKN\"] = 41] = \"BIN_XOR_TKN\";\r\n    TokenType[TokenType[\"BIN_NOT_TKN\"] = 42] = \"BIN_NOT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_RIGHT_TKN\"] = 43] = \"BIN_SHIFT_RIGHT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_ARITHMETIC_RIGHT_TKN\"] = 44] = \"BIN_SHIFT_ARITHMETIC_RIGHT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_LEFT_TKN\"] = 45] = \"BIN_SHIFT_LEFT_TKN\";\r\n    TokenType[TokenType[\"ARROW_TKN\"] = 46] = \"ARROW_TKN\";\r\n    TokenType[TokenType[\"RETURN_TKN\"] = 47] = \"RETURN_TKN\";\r\n    TokenType[TokenType[\"BACKSLASH_TKN\"] = 48] = \"BACKSLASH_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_TKN\"] = 49] = \"OP_ADD_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_TKN\"] = 50] = \"OP_SUBTR_TKN\";\r\n    TokenType[TokenType[\"OP_MULT_TKN\"] = 51] = \"OP_MULT_TKN\";\r\n    TokenType[TokenType[\"OP_DIVIDE_TKN\"] = 52] = \"OP_DIVIDE_TKN\";\r\n    TokenType[TokenType[\"OP_CARROT_TKN\"] = 53] = \"OP_CARROT_TKN\";\r\n    TokenType[TokenType[\"OP_MODULUS_TKN\"] = 54] = \"OP_MODULUS_TKN\";\r\n    TokenType[TokenType[\"OP_BAR_TKN\"] = 55] = \"OP_BAR_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_ADD_TKN\"] = 56] = \"OP_ADD_ADD_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_EQUALS_TKN\"] = 57] = \"OP_ADD_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_SUBTR_TKN\"] = 58] = \"OP_SUBTR_SUBTR_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_EQUALS_TKN\"] = 59] = \"OP_SUBTR_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_MULT_EQUALS_TKN\"] = 60] = \"OP_MULT_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_DIV_EQUALS_TKN\"] = 61] = \"OP_DIV_EQUALS_TKN\";\r\n    TokenType[TokenType[\"HASH_RANGE_TKN\"] = 62] = \"HASH_RANGE_TKN\";\r\n    TokenType[TokenType[\"DOUBLE_QUOTE_TKN\"] = 63] = \"DOUBLE_QUOTE_TKN\";\r\n    TokenType[TokenType[\"DOT_TKN\"] = 64] = \"DOT_TKN\";\r\n    TokenType[TokenType[\"ELLIPSIS_TKN\"] = 65] = \"ELLIPSIS_TKN\";\r\n    TokenType[TokenType[\"REVERSE_ARROW_TKN\"] = 66] = \"REVERSE_ARROW_TKN\";\r\n    TokenType[TokenType[\"COMMA_TKN\"] = 67] = \"COMMA_TKN\";\r\n    TokenType[TokenType[\"SEMI_COLON_TKN\"] = 68] = \"SEMI_COLON_TKN\";\r\n    TokenType[TokenType[\"UNKNOWN_TKN\"] = 69] = \"UNKNOWN_TKN\";\r\n    TokenType[TokenType[\"END_TKN\"] = 70] = \"END_TKN\";\r\n})(TokenType || (TokenType = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL1Rva2VuLnRzP2NiNDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxNQUFNLEtBQUs7SUFXZCxZQUFZLFdBQW1CLEVBQUUsSUFBWSxFQUFFLENBQVMsRUFBRSxJQUFlO1FBQ3JFLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBRS9CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVgsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFZO1FBQ2YsT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ2xILENBQUM7SUFDRCxVQUFVLENBQUMsS0FBWTtRQUNuQixPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQztJQUNwQyxDQUFDO0NBQ0o7QUFFRCxJQUFZLFNBK0ZYO0FBL0ZELFdBQVksU0FBUztJQUVqQiw2REFBYztJQUNkLG1EQUFTO0lBQ1QsdUVBQW1CO0lBQ25CLHFFQUFrQjtJQUdsQiw2REFBYztJQUNkLHlFQUFvQjtJQUNwQiw2RUFBc0I7SUFHdEIsNkRBQWM7SUFDZCwrREFBZTtJQUNmLCtEQUFlO0lBQ2Ysa0VBQWdCO0lBQ2hCLGdFQUFlO0lBQ2Ysa0VBQWdCO0lBR2hCLGtEQUFRO0lBQ1Isc0RBQVU7SUFDVixrREFBUTtJQUNSLDhDQUFNO0lBQ04sa0RBQVE7SUFDUixvREFBUztJQUNULGdEQUFPO0lBQ1AsOENBQU07SUFDTixvREFBUztJQUNULDBEQUFZO0lBR1osd0RBQVc7SUFDWCwwREFBWTtJQUNaLDBEQUFZO0lBQ1osMERBQVk7SUFDWixnRUFBZTtJQUNmLHdFQUFtQjtJQUNuQixzRUFBa0I7SUFDbEIsa0ZBQXdCO0lBQ3hCLDRFQUFxQjtJQUNyQix3RkFBMkI7SUFDM0IsNERBQWE7SUFDYiw4REFBYztJQUdkLDREQUFhO0lBQ2IsMERBQVk7SUFDWixnRUFBZTtJQUNmLDREQUFhO0lBR2Isc0RBQVU7SUFDVix3REFBVztJQUNYLHdEQUFXO0lBQ1gsd0RBQVc7SUFDWCx3RUFBbUI7SUFDbkIsOEZBQThCO0lBQzlCLHNFQUFrQjtJQUdsQixvREFBUztJQUNULHNEQUFVO0lBR1YsNERBQWE7SUFHYixzREFBVTtJQUNWLDBEQUFZO0lBQ1osd0RBQVc7SUFDWCw0REFBYTtJQUNiLDREQUFhO0lBQ2IsOERBQWM7SUFDZCxzREFBVTtJQUNWLDhEQUFjO0lBQ2Qsb0VBQWlCO0lBQ2pCLHNFQUFrQjtJQUNsQix3RUFBbUI7SUFDbkIsc0VBQWtCO0lBQ2xCLG9FQUFpQjtJQUdqQiw4REFBYztJQUdkLGtFQUFnQjtJQUNoQixnREFBTztJQUNQLDBEQUFZO0lBQ1osb0VBQWlCO0lBQ2pCLG9EQUFTO0lBQ1QsOERBQWM7SUFDZCx3REFBVztJQUNYLGdEQUFPO0FBQ1gsQ0FBQyxFQS9GVyxTQUFTLEtBQVQsU0FBUyxRQStGcEIiLCJmaWxlIjoiLi9zcmMvc2N1ZnQvbGFuZy9Ub2tlbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUb2tlbiB7XHJcbiAgICBzdHJpbmdWYWx1ZTogc3RyaW5nOyAvLyBzdHJpbmcgb2YgdG9rZW4gaW4gd3JpdHRlbiBwcm9ncmFtXHJcblxyXG4gICAgbGluZTogbnVtYmVyO1xyXG4gICAgYzogbnVtYmVyOyAvLyBob3Jpem9udGFsIHBveml0aW9uYWwgYWNjcm9zcyBsaW5lXHJcblxyXG4gICAgdHlwZTogVG9rZW5UeXBlO1xyXG4gICAgdHlwZU5hbWU6IHN0cmluZztcclxuXHJcbiAgICB2YWx1ZSE6IG51bWJlciB8IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdHJpbmdWYWx1ZTogc3RyaW5nLCBsaW5lOiBudW1iZXIsIGM6IG51bWJlciwgdHlwZTogVG9rZW5UeXBlKSB7XHJcbiAgICAgICAgdGhpcy5zdHJpbmdWYWx1ZSA9IHN0cmluZ1ZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLmxpbmUgPSBsaW5lO1xyXG4gICAgICAgIHRoaXMuYyA9IGM7XHJcblxyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy50eXBlTmFtZSA9IFRva2VuVHlwZVt0eXBlXTtcclxuICAgIH1cclxuICAgIGVxdWFscyhvdGhlcjogVG9rZW4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gb3RoZXIubGluZSA9PT0gdGhpcy5saW5lICYmIG90aGVyLmMgPT09IHRoaXMuYyAmJiB0aGlzLnR5cGVFcXVhbHMob3RoZXIpICYmIG90aGVyLnZhbHVlID09PSB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgdHlwZUVxdWFscyhvdGhlcjogVG9rZW4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gb3RoZXIudHlwZSA9PT0gdGhpcy50eXBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZW51bSBUb2tlblR5cGUge1xyXG4gICAgLy8gU3RhdGVtZW50c1xyXG4gICAgSURFTlRJRklFUl9US04sXHJcbiAgICBDT0xPTl9US04sXHJcbiAgICBOVU1FUklDX0xJVEVSQUxfVEtOLFxyXG4gICAgU1RSSU5HX0xJVEVSQUxfVEtOLFxyXG5cclxuICAgIC8vQXNzaWdubWVudHNcclxuICAgIEFTU0lHTk1FTlRfVEtOLFxyXG4gICAgQ09OU1RfQVNTSUdOTUVOVF9US04sXHJcbiAgICBNVVRBQkxFX0FTU0lHTk1FTlRfVEtOLFxyXG5cclxuICAgIC8vIEJsb2Nrc1xyXG4gICAgTEVGVF9DVVJMWV9US04sXHJcbiAgICBSSUdIVF9DVVJMWV9US04sXHJcbiAgICBMRUZUX1NRVUFSRV9US04sXHJcbiAgICBSSUdIVF9TUVVBUkVfVEtOLFxyXG4gICAgTEVGVF9QQVJFTlNfVEtOLFxyXG4gICAgUklHSFRfUEFSRU5TX1RLTixcclxuXHJcbiAgICAvLyBTdGF0ZW1lbnQgS2V5d29yZHNcclxuICAgIFRZUEVfVEtOLCAvLyBwYXJ0aWNsZSA9IHR5cGUge30gb3IgdHlwZW9mKHBhcnRpY2xlKSA9PSB0eXBlO1xyXG4gICAgTU9EVUxFX1RLTixcclxuICAgIFdJVEhfVEtOLFxyXG4gICAgSUZfVEtOLFxyXG4gICAgRUxTRV9US04sXHJcbiAgICBXSElMRV9US04sXHJcbiAgICBGT1JfVEtOLFxyXG4gICAgSU5fVEtOLFxyXG4gICAgQlJFQUtfVEtOLFxyXG4gICAgQ09OVElOVUVfVEtOLFxyXG5cclxuICAgIC8vIENvbmRpdGlvbmFsc1xyXG4gICAgQ09ORF9PUl9US04sIC8vIHx8XHJcbiAgICBDT05EX0FORF9US04sIC8vICYmXHJcbiAgICBDT05EX1hPUl9US04sIC8vICQkXHJcbiAgICBDT05EX05PVF9US04sIC8vICFcclxuICAgIENPTkRfRVFVQUxTX1RLTixcclxuICAgIENPTkRfTk9UX0VRVUFMU19US04sXHJcbiAgICBDT05EX0xFU1NfVEhBTl9US04sXHJcbiAgICBDT05EX0xFU1NfVEhBTl9FUVVBTF9US04sXHJcbiAgICBDT05EX0dSRUFURVJfVEhBTl9US04sXHJcbiAgICBDT05EX0dSRUFURVJfVEhBTl9FUVVBTF9US04sXHJcbiAgICBDT05EX1RSVUVfVEtOLFxyXG4gICAgQ09ORF9GQUxTRV9US04sXHJcblxyXG4gICAgLy8gVHlwZXNcclxuICAgIFZPSURfVFlQRV9US04sXHJcbiAgICBOVU1fVFlQRV9US04sXHJcbiAgICBTVFJJTkdfVFlQRV9US04sXHJcbiAgICBCT09MX1RZUEVfVEtOLFxyXG5cclxuICAgIC8vIEJpdHdpc2UgT3BlcmF0b3JzXHJcbiAgICBCSU5fT1JfVEtOLCAvLyBvclxyXG4gICAgQklOX0FORF9US04sIC8vIGFuZFxyXG4gICAgQklOX1hPUl9US04sIC8vIHhvclxyXG4gICAgQklOX05PVF9US04sIC8vIH5cclxuICAgIEJJTl9TSElGVF9SSUdIVF9US04sIC8vID4+XHJcbiAgICBCSU5fU0hJRlRfQVJJVEhNRVRJQ19SSUdIVF9US04sIC8vID4+PlxyXG4gICAgQklOX1NISUZUX0xFRlRfVEtOLCAvLyA8PFxyXG5cclxuICAgIC8vIEZ1bmN0aW9uIERlZnNcclxuICAgIEFSUk9XX1RLTiwgLy8gKCkgXCItPlwiIHZvaWRcclxuICAgIFJFVFVSTl9US04sXHJcblxyXG4gICAgLy8gTGFtYmRhIERlZiBhbmQgZnVuY3Rpb24gdHlwZVxyXG4gICAgQkFDS1NMQVNIX1RLTixcclxuXHJcbiAgICAvLyBPcGVyYXRvcnNcclxuICAgIE9QX0FERF9US04sXHJcbiAgICBPUF9TVUJUUl9US04sXHJcbiAgICBPUF9NVUxUX1RLTixcclxuICAgIE9QX0RJVklERV9US04sXHJcbiAgICBPUF9DQVJST1RfVEtOLFxyXG4gICAgT1BfTU9EVUxVU19US04sXHJcbiAgICBPUF9CQVJfVEtOLFxyXG4gICAgT1BfQUREX0FERF9US04sXHJcbiAgICBPUF9BRERfRVFVQUxTX1RLTixcclxuICAgIE9QX1NVQlRSX1NVQlRSX1RLTixcclxuICAgIE9QX1NVQlRSX0VRVUFMU19US04sXHJcbiAgICBPUF9NVUxUX0VRVUFMU19US04sXHJcbiAgICBPUF9ESVZfRVFVQUxTX1RLTixcclxuXHJcbiAgICAvLyBEaXJlY3RpdmVzXHJcbiAgICBIQVNIX1JBTkdFX1RLTixcclxuXHJcbiAgICAvLyBNaXNjZWxsYW5lb3VzXHJcbiAgICBET1VCTEVfUVVPVEVfVEtOLFxyXG4gICAgRE9UX1RLTixcclxuICAgIEVMTElQU0lTX1RLTiwgLy8gZm9yIFthcnJheV0gZG9Tb21ldGhpbmcoLi4uKVxyXG4gICAgUkVWRVJTRV9BUlJPV19US04sIC8vIFBhcnRpY2xlLnsgeCA8LSA0LCB5IDwtIDN9XHJcbiAgICBDT01NQV9US04sXHJcbiAgICBTRU1JX0NPTE9OX1RLTixcclxuICAgIFVOS05PV05fVEtOLFxyXG4gICAgRU5EX1RLTixcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scuft/lang/Token.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/main.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;