12/28/20 (Monday)
    Tasks
    - Fix all the errors in parsing (the one's Calvin made after his glorious revision)
    - Parse lambdas
    - Parse for loop with range: for i in #range (-3, 40] {}
    - Parse type construction with w/: Particle w/ { x = 3, y = 4 }
    - Start typechecking
    - Discuss constant and mutable types and MAKE RULES: a: |num => 3, b: ~num ~= otherVal;

    Small Tasks
    - Fixed the errors in the parser and did major revisions to parseExpression to make things cleaner.
    - Implemented lambdas
    - Dot operator and function calls now work as expected

    Done
    - Type construction is now: Particle <- {x = 3, y = 5};
    - Types are now declarations: Particle = type {x: num; y: num;}
    - Fixed lamdba notion, is now : \x,y => x + y
    - Started work on typechecking
        a = 3; //knows type of a is num
        b: string = "test"; // b is string with matching declaration type
        c: string = 4 // detects error case
        // works for bools
    - Store "NodeType" in all ASTNode

12/29/20 (Tuesday)
    Tasks
    - Fix the multiple copies of parseDeclaration
    - Change module definition to be a declaration
    - Add with module stuff to type definitions and modules
    - Make a new binary operator expression for dot operators: ASTDotOperator
    - Make AST utilities like nodeEquals
    - Create tools to nicely display scope tree
    - Recheck all the error messages and try to think of a way to fix the multitude of error msg helper functions in the parser
    - Move certain parser errors into the type checker: "Particle <- { "errorInTypeChecker".x <- 3, y <- 4}"
        - The validity of declaration.lvalue expressions should be checked in the type checker, not the parser

    Issues
    - Consider how to deal with loose statements in modules:
        testModule = module {
            // According to how modules are defined, these statements may never be called
            if true {} 
            while 3 < 5 {}
            for i in array {}
            a.doStuff();
        }
    - Consider recursive type definitions:
        Particle = type {
            x = 2;
            other = Particle <- {}; //Type construction will try to get default values => recursive type definition
        }
    - Circumventing the parenthesis flag for types
        // This currently throws an error because parenthesis are not allowed around Astrology
        a: (num, (Astrology).getType()) -> string; 

    Ideas
        Passing parameters by value vs reference
            otherNumber: num;
            p: Point
            (\x,y => x)(p, otherNumber) = Point.{};

            identity = (x: Point) -> Point {
                return x;
            }

            identity(p).x = 3

            doStuff(p);
            doStuff = (p2: &Point) {
                p2.x = 10;
            }
            p.x; //10

    Small Tasks
    - Implemented module definitions as declarations
    - Type construction is now implemented as Particle.{x <- 3, y <- 4}
    - Make ASTName.refName into a string instead of a token
    - Made better functions for checking expressions against each other (checking types against each other)
    - Cleaned up ordering and function names in AST
    - Fix the multitude of error msg helper functions in the parser
    - Merged ASTModule and ASTTypeDefinition into ASTExpression
    - Created ASTSingleVarDeclaration for type definitions, type construction and function parameters

    Done
    - Type definition mostly typechecked
    - Type construction typechecked EXCEPT for function components
    - Figured out what getDeclaration does in typechecking
    - Fixed getTypeOfExpression in typechecking

12/30/20 (Wednesday)
    Tasks
    - Create tools to nicely display scope tree
    - Organize AST to generalize to a certain extent (ASTSingleVarDeclaration vs ASTDeclaration)
    - Typecheck binary operators
    - Finish typecheck for type construction
    - Fully convert modules and types into real expressions. Note that functions are harder to implement in this way
    - Turn function types into expressions by using new notation: (Finally delete "ignoreParenthesis" directive)
        a:  \(string, ~Particle, @num) -> string + 3;
        a: @\(string,  Particle, @num) -> string

        Polynomial = type {
            fx: \(num) -> num;
        }
        Polynomial.{
            fx <- (x: num) { return x + x; }
        }
        fx = \x -> x + x;
    
    Issues
        Run time type construction 
            // Consider the following (very dumb case)
            Point => type {
                x = 0;
                y = 0;
            }
            Factory => type {
                typeOfObject: \() -> type;
            }
            randomObj = Factory.{ typeOfObject <- () -> type { return Point; } }.typeOfObject().{ x <- 3, y <- 4 };
            // The value of "typeOfObject" needs to be evaluated in order to type check the type construction { x <- 3...

    Ideas
        Null Value
            List = type {
                nextList: List; // check against null to see if finished 
                value: num = null;
            }

            ListItem = type {
                value: something
                nextItem: ListItem;
            }
        Constant Variable
            a: @num => 3; //a is a variable known at compile time
            b => (first: num, second: num) -> num { //b is a pure function?
                return first + second;
            }
        Other function notation
            testFunction = (first: num, second: num) -> num { 
                return first + second;
            }
        Polymorphism
            +: \(t, t) -> t
            operator + => (a0: num, a1: num) -> num { //Note that operator overloads are pure

            }

            multiply = (scalar: t, vec: u!) -> u {
                
            }

            add = (a0: that!, a1: thathjhk()) -> that {

            }

    Small Tasks
    - Fully convert modules and types into real expressions. Note that functions are harder to implement in this way
    - Turned function types into expressions by using new notation: (Finally delete "ignoreParenthesis" directive)
    - Generate preliminary scope tree in the parser before type checking. 
        - There are still nuances regarding modules and complex declaration lvalues (thing.other = 3);

12/31/20 (Thursday)
    Tasks
    - Fully generate the preliminary scope tree in the parser before type checking (include complex lvalues)
    - Implement single line if, while, for: if 3 < 4 doStuff(); for i in array randomVar += 4;
    - Implement nested modules: thing = module { otherModule = module{} }
    - Do a full scan of the lexer to check for unclosed block comments. Catch errors faster and smarter
    - Allow parenthesis around references: (Astrology).stars.(stuff.function()).x
        - The advantages of this is more clear when considering casting: (<thing>Astrology).stars.(<otherThing>stuff.function())
    - Think of a way to change "typeRef" in ASTTypeConstruction into an ASTReference
    - Decide whether or not declarations should store the scope they're contained in
    - Make dot operator reference errors more helpful.
        - Instead of this: thing.other.stuff = 3;
                           ^
        - Output something like this: thing.other.stuff = 3;
                                            ^     

    Notes 
        All functions are either immutable or constant but both immutable and constant functions can be pure or impure
            testVar = 3;
            constantPure => (a: num, b: num) -> num {
                return a + b;
            }       
            constantImpure => (a: num, b: num) -> num {
                testVar++;
                return a + b;
            }
            immutablePure: \(num, num) -> num;
            immutablePure = (a: num, b: num) -> num {
                return a + b;
            } 
            immutableImpure: \(num, num) -> num;      
            immutableImpure = (a: num, b: num) -> num {
                testVar++;
                return a + b;
            }
        Scope Rule
            // Variables from outside the current scope can be unordered:
            test => module {
                x = 3;
                doStuff => () {
                    x = 5;
                    y = -3; // value of y in module is set to -3 when doStuff is called
                }
                y = 4; // this line will initialize y to be 4
            }

            // This excludes special scopes: if/elseif/else, while and for:
            test => module {
                doStuff => () {
                    if true {
                        x = 6; // this line will initialize a new variable and set it to 6
                    }
                    x = 2; // this line will initialize a new variable and set it to 2
                }
            }

            // Also note the following two cases. The behavior of "doStuff" depends on the block in which it is in
            testMod => module {
                doStuff => () {
                    x = 3; // assigment of 3 to testMod.x
                    // y = 20; This line will throw an error because y is defined as constant in testMod 
                }
                x = 0; // after calling doStuff(), x will be 3
                
                y => 10; //Constants are unordered
            }
            testFunc => () {
                doStuff => () {
                    x = 3; // initialization of 3 with no sideffects
                    // y = 20; This line will throw an error because y is defined as constant in testFunc
                }
                x = 0; // after calling doStuff(), x will still be 0
                
                y => 10; //Constants are unordered 
            }

    Small Tasks
    - Removed ASTReference because it was too complicated
    - Split ASTDeclaration and ASTSingleVarDeclaration into ASTDeclaration and ASTAssignment
    - Nested modules: test = module { test2 = module {} }  main = () { with test.test2; }
    - Reverted separation of ASTDeclaration. Both assignments and declarations are stored in one node: ASTDeclaration
    - Scope now stores an "ordered" and "unordered" list of declarations 

1/1/21 (Friday)
    Tasks
    - Defer scope checking (distinguishing assignments from declarations) until type checking phase
        - Certain declarations like "test.thing = 3;" are for sure known to be assignments
    - The "index" variable in "for index in array {}" should be a declaration
    - Eventually merge lambdas and functions into a single type

    Ideas
        Only pure functions can be denoted as constant
            // Scrap the idea in 12/31/20. Constant means that the function is pure
            Particle = type {
                x: num;
                y: num;
            }
            doRandom = () {}
            pureAdd => (a: num, b: num) -> num {
                return a + b;
            }
            add => (a: @Particle, b: @Particle) -> Particle { //Note that parameters need to be marked as constant
                a.x = 3; // This line will throw an error since a is a constant Particle
                doRandom(); //This line will throw an error since doRandom is not constant

                thing = pureAdd(3, 2); //This line is valid because pureAdd is constant and can be ran at compile time
                return Particle.{ x <- a.x + b.x, y <- a.y + b.y }; // Only variable access is used so there are no errors
            }
        Type expressions can only contain constants
            a: num = 3; //This is valid because num is known at compile time

            randVar ~= 0;
            getType = () -> type { //getType is not constant because it is not a pure function
                randVar++;
                return num;
            }
            a: getType() = 7; //This is not valid because getType is not a constant function

            getConstType => () -> type {
                return num;
            }
            a: getConstType() = 18; //This line is perfectly valid because getConstType is a constant function
        Return short hand for single line functions
            add => (a: num, b: num) -> num return a + b; //Standard way
            add => (a: num, b: num) <- a + b; // Short hand, similar to lambdas

    Small Tasks
    - Re-did scope system (AGAIN): deferred complete scope checking until the type checking phase
    - Changed color pallete of the print tools for AST and Scope
    - For loops now store the indexing and item variable in ASTDeclaration nodes
    - Implemented single line if/else/while/for statements: if 3 < 4 doStuff(); for i in array randomVar += 4;
    - Implemented hexadecimal, octal and binary conversions for numeric literals

1/2/21 (Saturday)
    Tasks
    - Detect valid functions by tracking return statements (May require control flow checking)
        - Create a "doesReturn" flag in ASTBlock to track whether the block fully returns in all cases 
    - Change bitwise operators to "|", "&" and "$" for bitwise "or", "and" and "xor" respectively 
    - Work on cleaning up the type checking and merging the scope stuff with it

    Small Tasks
    - Refactored some type checking functions to make more sense in the context of the algorithms
    - Checked for cyclic type dependencies

1/3/21 (Sunday)
    Tasks
    - Refactor more stuff as usually
    - Develop better understanding of how type checking should work
    - Establish some preliminary ideas about run-time evaluation: a: test.getSomeConstType() = doAConstThing(3, 4);
    - Look over and discuss whether or not "with" statements should be allowed in global scope
    - Throw error if there is code after a break, continue or return statement 
    - Remove absolute value stuff => make built-in function instead
    - Function overloading and operator overloading stuff
    - Make scope print output functions in addition to variables

    Issues
        Consider these "with" module cases
            test => module {
                test2 => module {
                    x = 5;
                    func = () {
                        x = 4;
                    }
                } 
                with test2;
            }

            test => module {
                test2 => module {
                    with test;
                    x = 5;
                    func = () {
                        x = 4;
                    }
                } 
            }

            test3 => module {
                x = 3;
                with test3;  
                test4 => module {}
            }
    Ideas
        With statements are allowed in global scope
            Astrology = module {
                Star = type {
                    x: num;
                }
                gravity ~= 9.8;
            }

            with Astrology;
            main = () {
                mainStar = Star.{ x <- 3 };
            }
            doStuff = () {
                gravity ~= 10;
            }
        ADD_ADD, and related operators can be embedded in expressions 
            x = 4;
            thing = 3 + x++; //thing is 7;
            //x is 5;

        Function parameter defaults need to be mutable variables
            add = (a: num, b ~= 3) -> num {
                return a + b;
            }

            // This means that function parameters can't have default values because function variables can't be mutable
            doStuff = (a: num, b: num, func ~= add) -> num {
                return func(a, b);
            }

    Small Tasks
    - ASTProgram can only contain declarations
    - Refactored scope and parser a lot 
        - Trying to come up with a cleaner way to differentiate 
    
    Done
    - Discussed function overloading and operator overloading: began work on integration
    - Type inference of binary operators, unary operators and type literal
    