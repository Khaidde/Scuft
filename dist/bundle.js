/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scuft/test/6-DeclarationTypeInfer.scft":
/*!****************************************************!*\
  !*** ./src/scuft/test/6-DeclarationTypeInfer.scft ***!
  \****************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"a1 = \\\"test\\\";\\r\\nb1 = true;\\r\\nc1: bool; \\r\\n\\r\\n/*\\r\\nparticleA => Particle.{\\r\\n    a <- 20,\\r\\n    otherParticle <- Particle.{ a <- 1 }\\r\\n};*/\\r\\n\\r\\ntest: num;\\r\\n\\r\\nadd = (a: string, b: string) -> string {\\r\\n    \\r\\n}\\r\\nadd = (a: num, b: num) -> num {\\r\\n\\r\\n}\\r\\n\\r\\noperator + => (a = \\\"thing\\\", b: string) -> void {\\r\\n    \\r\\n}\\r\\n\\r\\nthing = \\\"yes\\\" - \\\"no\\\";\\r\\n\\r\\n/*\\r\\nadd = (a = 3, b = 6) -> num {\\r\\n    test2 => 2;\\r\\n}\\r\\n\\r\\nadd = (a: string, b: string) -> string {\\r\\n\\r\\n}\\r\\n\\r\\nadd = (a: Particle, b: Particle) -> num {\\r\\n\\r\\n}*/\\r\\n\\r\\n/*\\r\\nrand => num;\\r\\nrand2 => rand;\\r\\nper: rand2 = 5;\\r\\n*/\\r\\n\\r\\n/*\\r\\nParticle => type {\\r\\n    a = 30;\\r\\n    otherParticle: Particle;\\r\\n    funcTest: \\\\(num, num) -> num;\\r\\n}\\r\\n\\r\\n\\r\\nt = fgh;\\r\\nfgh: num = 4;\\r\\ng = fgh + 2;\\r\\nd: num = 6 + 3 * g;\\r\\n*/\\r\\n\\r\\n// operator + => (a: num, b: num) -> num { ... }\\r\\n\\r\\n// operator + => (a: string, b: string) -> string { return ... }\\r\\n// operator + => (a: Point, b: Point) -> Point { return Point.{x <- a.x + b.x, y <- a.y + b.y}; }\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC90ZXN0LzYtRGVjbGFyYXRpb25UeXBlSW5mZXIuc2NmdD9kYTdkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxlQUFlLGNBQWMsYUFBYSxzQ0FBc0MsbURBQW1ELFNBQVMsTUFBTSxvQkFBb0IsZ0RBQWdELGFBQWEsbUNBQW1DLFNBQVMsMERBQTBELGFBQWEsaUNBQWlDLDJDQUEyQyxtQkFBbUIsS0FBSyxnREFBZ0QsU0FBUyxpREFBaUQsU0FBUyw0QkFBNEIsa0JBQWtCLG1CQUFtQixzQ0FBc0MsZUFBZSxnQ0FBZ0Msc0NBQXNDLEtBQUssb0JBQW9CLGlCQUFpQixnQkFBZ0IsdUJBQXVCLHdEQUF3RCxNQUFNLDJEQUEyRCxhQUFhLG9EQUFvRCxlQUFlLGdDQUFnQyxFQUFFLENBQUMiLCJmaWxlIjoiLi9zcmMvc2N1ZnQvdGVzdC82LURlY2xhcmF0aW9uVHlwZUluZmVyLnNjZnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImExID0gXFxcInRlc3RcXFwiO1xcclxcbmIxID0gdHJ1ZTtcXHJcXG5jMTogYm9vbDsgXFxyXFxuXFxyXFxuLypcXHJcXG5wYXJ0aWNsZUEgPT4gUGFydGljbGUue1xcclxcbiAgICBhIDwtIDIwLFxcclxcbiAgICBvdGhlclBhcnRpY2xlIDwtIFBhcnRpY2xlLnsgYSA8LSAxIH1cXHJcXG59OyovXFxyXFxuXFxyXFxudGVzdDogbnVtO1xcclxcblxcclxcbmFkZCA9IChhOiBzdHJpbmcsIGI6IHN0cmluZykgLT4gc3RyaW5nIHtcXHJcXG4gICAgXFxyXFxufVxcclxcbmFkZCA9IChhOiBudW0sIGI6IG51bSkgLT4gbnVtIHtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxub3BlcmF0b3IgKyA9PiAoYSA9IFxcXCJ0aGluZ1xcXCIsIGI6IHN0cmluZykgLT4gdm9pZCB7XFxyXFxuICAgIFxcclxcbn1cXHJcXG5cXHJcXG50aGluZyA9IFxcXCJ5ZXNcXFwiIC0gXFxcIm5vXFxcIjtcXHJcXG5cXHJcXG4vKlxcclxcbmFkZCA9IChhID0gMywgYiA9IDYpIC0+IG51bSB7XFxyXFxuICAgIHRlc3QyID0+IDI7XFxyXFxufVxcclxcblxcclxcbmFkZCA9IChhOiBzdHJpbmcsIGI6IHN0cmluZykgLT4gc3RyaW5nIHtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuYWRkID0gKGE6IFBhcnRpY2xlLCBiOiBQYXJ0aWNsZSkgLT4gbnVtIHtcXHJcXG5cXHJcXG59Ki9cXHJcXG5cXHJcXG4vKlxcclxcbnJhbmQgPT4gbnVtO1xcclxcbnJhbmQyID0+IHJhbmQ7XFxyXFxucGVyOiByYW5kMiA9IDU7XFxyXFxuKi9cXHJcXG5cXHJcXG4vKlxcclxcblBhcnRpY2xlID0+IHR5cGUge1xcclxcbiAgICBhID0gMzA7XFxyXFxuICAgIG90aGVyUGFydGljbGU6IFBhcnRpY2xlO1xcclxcbiAgICBmdW5jVGVzdDogXFxcXChudW0sIG51bSkgLT4gbnVtO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG50ID0gZmdoO1xcclxcbmZnaDogbnVtID0gNDtcXHJcXG5nID0gZmdoICsgMjtcXHJcXG5kOiBudW0gPSA2ICsgMyAqIGc7XFxyXFxuKi9cXHJcXG5cXHJcXG4vLyBvcGVyYXRvciArID0+IChhOiBudW0sIGI6IG51bSkgLT4gbnVtIHsgLi4uIH1cXHJcXG5cXHJcXG4vLyBvcGVyYXRvciArID0+IChhOiBzdHJpbmcsIGI6IHN0cmluZykgLT4gc3RyaW5nIHsgcmV0dXJuIC4uLiB9XFxyXFxuLy8gb3BlcmF0b3IgKyA9PiAoYTogUG9pbnQsIGI6IFBvaW50KSAtPiBQb2ludCB7IHJldHVybiBQb2ludC57eCA8LSBhLnggKyBiLngsIHkgPC0gYS55ICsgYi55fTsgfVwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scuft/test/6-DeclarationTypeInfer.scft\n");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scuft_lang_ScuftTest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scuft/lang/ScuftTest */ \"./src/scuft/lang/ScuftTest.ts\");\n\r\n_scuft_lang_ScuftTest__WEBPACK_IMPORTED_MODULE_0__.default();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9tYWluLnRzP2NkNDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFbUQ7QUFFbkQsMERBQWlCLEVBQUUsQ0FBQyIsImZpbGUiOiIuL3NyYy9tYWluLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgKiBhcyBFQ1NEZW1vIGZyb20gXCIuL3NjdWZ0L2Vjcy9FQ1NEZW1vXCJcclxuXHJcbmltcG9ydCAqIGFzIFNjdWZ0VGVzdCBmcm9tIFwiLi9zY3VmdC9sYW5nL1NjdWZ0VGVzdFwiXHJcblxyXG5TY3VmdFRlc3QuZGVmYXVsdCgpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Ast.ts":
/*!*******************************!*\
  !*** ./src/scuft/lang/Ast.ts ***!
  \*******************************/
/*! namespace exports */
/*! export ASTBinaryOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTBlock [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTBreak [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTCall [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTContinue [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTDeclaration [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTDotOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFmt [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFor [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFunction [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFunctionType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTIf [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTLambda [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTLiteral [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTModule [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTName [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTNode [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTOperatorDefinition [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTProgram [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTReturn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeConstruction [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeDefinition [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeLiteral [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTUnaryOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTWhile [provided] [no usage info] [missing usage info prevents renaming] */
/*! export NodeType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export exprToStr [provided] [no usage info] [missing usage info prevents renaming] */
/*! export newLiteralNode [provided] [no usage info] [missing usage info prevents renaming] */
/*! export newTypeLiteralNode [provided] [no usage info] [missing usage info prevents renaming] */
/*! export printAST [provided] [no usage info] [missing usage info prevents renaming] */
/*! export recurse [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ASTFmt\": () => /* binding */ ASTFmt,\n/* harmony export */   \"exprToStr\": () => /* binding */ exprToStr,\n/* harmony export */   \"recurse\": () => /* binding */ recurse,\n/* harmony export */   \"printAST\": () => /* binding */ printAST,\n/* harmony export */   \"newLiteralNode\": () => /* binding */ newLiteralNode,\n/* harmony export */   \"newTypeLiteralNode\": () => /* binding */ newTypeLiteralNode,\n/* harmony export */   \"NodeType\": () => /* binding */ NodeType,\n/* harmony export */   \"ASTNode\": () => /* binding */ ASTNode,\n/* harmony export */   \"ASTProgram\": () => /* binding */ ASTProgram,\n/* harmony export */   \"ASTBlock\": () => /* binding */ ASTBlock,\n/* harmony export */   \"ASTIf\": () => /* binding */ ASTIf,\n/* harmony export */   \"ASTWhile\": () => /* binding */ ASTWhile,\n/* harmony export */   \"ASTFor\": () => /* binding */ ASTFor,\n/* harmony export */   \"ASTBreak\": () => /* binding */ ASTBreak,\n/* harmony export */   \"ASTContinue\": () => /* binding */ ASTContinue,\n/* harmony export */   \"ASTReturn\": () => /* binding */ ASTReturn,\n/* harmony export */   \"ASTOperatorDefinition\": () => /* binding */ ASTOperatorDefinition,\n/* harmony export */   \"ASTDeclaration\": () => /* binding */ ASTDeclaration,\n/* harmony export */   \"ASTTypeLiteral\": () => /* binding */ ASTTypeLiteral,\n/* harmony export */   \"ASTFunctionType\": () => /* binding */ ASTFunctionType,\n/* harmony export */   \"ASTModule\": () => /* binding */ ASTModule,\n/* harmony export */   \"ASTTypeDefinition\": () => /* binding */ ASTTypeDefinition,\n/* harmony export */   \"ASTFunction\": () => /* binding */ ASTFunction,\n/* harmony export */   \"ASTName\": () => /* binding */ ASTName,\n/* harmony export */   \"ASTDotOperator\": () => /* binding */ ASTDotOperator,\n/* harmony export */   \"ASTCall\": () => /* binding */ ASTCall,\n/* harmony export */   \"ASTTypeConstruction\": () => /* binding */ ASTTypeConstruction,\n/* harmony export */   \"ASTLiteral\": () => /* binding */ ASTLiteral,\n/* harmony export */   \"ASTUnaryOperator\": () => /* binding */ ASTUnaryOperator,\n/* harmony export */   \"ASTBinaryOperator\": () => /* binding */ ASTBinaryOperator,\n/* harmony export */   \"ASTLambda\": () => /* binding */ ASTLambda\n/* harmony export */ });\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n/* harmony import */ var _Log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Log */ \"./src/scuft/lang/Log.ts\");\n\r\n\r\nvar ASTFmt;\r\n(function (ASTFmt) {\r\n    ASTFmt[\"TYPE_FMT\"] = \"color: #DE8F6E\";\r\n    ASTFmt[\"IDENTIFIER_FMT\"] = \"color: #2D93AD\";\r\n    ASTFmt[\"EXPRESSION_FMT\"] = \"color: #88AB75\";\r\n    ASTFmt[\"WITH_MODULE_FMT\"] = \"color: #DBD56E\";\r\n})(ASTFmt || (ASTFmt = {}));\r\nfunction nodeNameToStr(astNode, fmt) {\r\n    return (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(astNode.constructor.name + \" (\" + astNode.locToken.line + \":\" + astNode.locToken.c + \")\", fmt);\r\n}\r\nfunction list(astNodes, fmt) {\r\n    let lines = [];\r\n    for (let i = 0; i < astNodes.length; i++) {\r\n        lines.push(\" \" + i + \": \" + nodeNameToStr(astNodes[i], fmt));\r\n        (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.bar)(recurse(astNodes[i], fmt)));\r\n    }\r\n    return lines;\r\n}\r\nfunction exprToStr(astExpr) {\r\n    switch (astExpr.nodeName) {\r\n        case NodeType.TYPE_LITERAL:\r\n            return astExpr.type.stringValue + \"\";\r\n        case NodeType.FUNCTION_TYPE:\r\n            let astType = astExpr;\r\n            let out = \"(\";\r\n            for (let i = 0; i < astType.inputType.length; i++) {\r\n                out += exprToStr(astType.inputType[i]);\r\n                if (i + 1 < astType.inputType.length) {\r\n                    out += \", \";\r\n                }\r\n            }\r\n            out += \") -> \" + exprToStr(astType.outType);\r\n            return out;\r\n        case NodeType.MODULE:\r\n            return \"[MODULE_DEF]\";\r\n        case NodeType.TYPE_DEF:\r\n            return \"[TYPE_DEF]\";\r\n        case NodeType.FUNCTION:\r\n            return \"[FUNCTION]\";\r\n        case NodeType.NAME:\r\n            return astExpr.refName + \"\";\r\n        case NodeType.DOT_OP:\r\n            let astDotOp = astExpr;\r\n            return \"(\" + exprToStr(astDotOp.rootValue) + \".\" + exprToStr(astDotOp.memberValue) + \")\";\r\n        case NodeType.CALL:\r\n            let astCall = astExpr;\r\n            let callVal = exprToStr(astCall.functionNameRef) + \"(\";\r\n            for (let i = 0; i < astCall.givenParams.length; i++) {\r\n                callVal += exprToStr(astCall.givenParams[i]);\r\n                if (i + 1 < astCall.givenParams.length) {\r\n                    callVal += \", \";\r\n                }\r\n            }\r\n            return callVal + \")\";\r\n        case NodeType.TYPE_CONSTRUCT:\r\n            let astConstruction = astExpr;\r\n            let constructVal = \"\";\r\n            for (let i = 0; i < astConstruction.assignments.length; i++) {\r\n                constructVal +=\r\n                    exprToStr(astConstruction.assignments[i].lvalue) +\r\n                        \" <- \" +\r\n                        exprToStr(astConstruction.assignments[i].rvalue);\r\n                if (i + 1 < astConstruction.assignments.length) {\r\n                    constructVal += \", \";\r\n                }\r\n            }\r\n            return exprToStr(astConstruction.typeRef) + \"{\" + constructVal + \"}\";\r\n        case NodeType.LITERAL:\r\n            return astExpr.value.stringValue + \"\";\r\n        case NodeType.UNARY_OP:\r\n            return (astExpr.operation.stringValue +\r\n                \"(\" +\r\n                exprToStr(astExpr.value) +\r\n                \")\");\r\n        case NodeType.BINARY_OP:\r\n            let astBinOp = astExpr;\r\n            return (\"(\" +\r\n                exprToStr(astBinOp.lvalue) +\r\n                \" \" +\r\n                astBinOp.operation.stringValue +\r\n                \" \" +\r\n                exprToStr(astBinOp.rvalue) +\r\n                \")\");\r\n        case NodeType.LAMBDA:\r\n            let astLambda = astExpr;\r\n            let lambdaVal = \"\\\\\";\r\n            for (let i = 0; i < astLambda.parameters.length; i++) {\r\n                lambdaVal += astLambda.parameters[i].refName;\r\n                if (i + 1 < astLambda.parameters.length) {\r\n                    lambdaVal += \",\";\r\n                }\r\n            }\r\n            return lambdaVal + \"=>\" + exprToStr(astLambda.expression);\r\n        default:\r\n            throw (\"Can't recursively print expression because given node is not an AST expression: \" +\r\n                astExpr.constructor.name);\r\n    }\r\n}\r\nfunction recurse(astNode, fmt) {\r\n    switch (astNode.nodeName) {\r\n        case NodeType.PROGRAM:\r\n            let linesPrgm = [];\r\n            let astPrgm = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesPrgm, [\"statements:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesPrgm, list(astPrgm.declarations, fmt));\r\n            return linesPrgm;\r\n        case NodeType.BLOCK:\r\n            let linesBlock = [];\r\n            let astBlock = astNode;\r\n            if (astBlock.withModules) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesBlock, [\"withModules: \"]);\r\n                let withModules = [];\r\n                for (let i = 0; i < astBlock.withModules.length; i++) {\r\n                    withModules.push((0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astBlock.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n                }\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesBlock, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(4, withModules));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesBlock, [\"statements:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesBlock, list(astBlock.statements, fmt));\r\n            return linesBlock;\r\n        case NodeType.IF:\r\n            let linesIf = [];\r\n            let astIf = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, [\"condition: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astIf.condition), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, [\"consequence: \" + nodeNameToStr(astIf.consequence, fmt)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(9, recurse(astIf.consequence, fmt))));\r\n            if (astIf.alternative) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, [\"alternative: \" + nodeNameToStr(astIf.alternative, fmt)]);\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesIf, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(9, recurse(astIf.alternative, fmt))));\r\n            }\r\n            return linesIf;\r\n        case NodeType.WHILE:\r\n            let linesWhile = [];\r\n            let astWhile = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesWhile, [\"condition: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astWhile.condition), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesWhile, [\"block: \" + nodeNameToStr(astWhile.block, fmt)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesWhile, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, recurse(astWhile.block, fmt))));\r\n            return linesWhile;\r\n        case NodeType.FOR:\r\n            let linesFor = [];\r\n            let astFor = astNode;\r\n            if (astFor.itemParamDec) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\r\n                    \"itemParamDec:  \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFor.itemParamDec.lvalue), fmt, ASTFmt.IDENTIFIER_FMT),\r\n                ]);\r\n            }\r\n            if (astFor.indexParamDec) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\r\n                    \"indexParamDec: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFor.indexParamDec.lvalue), fmt, ASTFmt.IDENTIFIER_FMT),\r\n                ]);\r\n            }\r\n            if (astFor.iterableName) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\r\n                    \"iterableName:  \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFor.iterableName), fmt, ASTFmt.EXPRESSION_FMT),\r\n                ]);\r\n            }\r\n            if (astFor.lowerBound !== undefined) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\r\n                    \"bounds: \" +\r\n                        (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFor.lowerBound) + \"...\" + exprToStr(astFor.upperBound), fmt, ASTFmt.EXPRESSION_FMT),\r\n                ]);\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, [\"block: \" + nodeNameToStr(astFor.block, fmt)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFor, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, recurse(astFor.block, fmt))));\r\n            return linesFor;\r\n        case NodeType.BREAK:\r\n        case NodeType.CONTINUE:\r\n            return [];\r\n        case NodeType.RETURN:\r\n            let astRet = astNode;\r\n            if (astRet.returnValue) {\r\n                return [\"returnValue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astRet.returnValue), fmt, ASTFmt.EXPRESSION_FMT)];\r\n            }\r\n            return [];\r\n        case NodeType.OPERATOR_DEF:\r\n            let linesOpDef = [];\r\n            let astOpDef = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesOpDef, [\"operatorName: \" + astOpDef.operatorName]);\r\n            return linesOpDef;\r\n        case NodeType.DECLARATION:\r\n            let linesDec = [];\r\n            let astDec = astNode;\r\n            if (astDec.isAssignment) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"lvalue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astDec.lvalue), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n            }\r\n            else {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"lvalue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astDec.lvalue), fmt, ASTFmt.IDENTIFIER_FMT)]);\r\n            }\r\n            if (astDec.type) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"type:   \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astDec.type), fmt, ASTFmt.TYPE_FMT)]);\r\n            }\r\n            if (astDec.rvalue) {\r\n                if (astDec.rvalue.nodeName === NodeType.MODULE ||\r\n                    astDec.rvalue.nodeName === NodeType.TYPE_DEF ||\r\n                    astDec.rvalue.nodeName === NodeType.FUNCTION) {\r\n                    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"rvalue: \" + nodeNameToStr(astDec.rvalue, fmt)]);\r\n                    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(4, recurse(astDec.rvalue, fmt))));\r\n                }\r\n                else {\r\n                    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesDec, [\"rvalue: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astDec.rvalue), fmt, ASTFmt.EXPRESSION_FMT)]);\r\n                }\r\n            }\r\n            return linesDec;\r\n        case NodeType.MODULE:\r\n            let linesMod = [];\r\n            let astMod = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesMod, [\"withModules: \"]);\r\n            let withModInMod = [];\r\n            for (let i = 0; i < astMod.withModules.length; i++) {\r\n                withModInMod.push((0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astMod.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesMod, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(4, withModInMod));\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesMod, [\"declarations:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesMod, list(astMod.declarations, fmt));\r\n            return linesMod;\r\n        case NodeType.TYPE_DEF:\r\n            let linesTypeDef = [];\r\n            let astTypeDef = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesTypeDef, [\"withModules: \"]);\r\n            let withModInType = [];\r\n            for (let i = 0; i < astTypeDef.withModules.length; i++) {\r\n                withModInType.push((0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astTypeDef.withModules[i]), fmt, ASTFmt.WITH_MODULE_FMT));\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesTypeDef, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(4, withModInType));\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesTypeDef, [\"declarations:\"]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesTypeDef, list(astTypeDef.declarations, fmt));\r\n            return linesTypeDef;\r\n        case NodeType.FUNCTION:\r\n            let linesFunc = [];\r\n            let astFunc = astNode;\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, [\"paramDeclaration:\"]);\r\n            if (astFunc.paramDeclaration) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, list(astFunc.paramDeclaration, fmt));\r\n            }\r\n            if (astFunc.returnType) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, [\"returnType: \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astFunc.returnType), fmt, ASTFmt.TYPE_FMT)]);\r\n            }\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, [\"block: \" + nodeNameToStr(astFunc.block, fmt)]);\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(linesFunc, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.tab)((0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, recurse(astFunc.block, fmt))));\r\n            return linesFunc;\r\n        case NodeType.TYPE_LITERAL:\r\n        case NodeType.FUNCTION_TYPE:\r\n        case NodeType.NAME:\r\n        case NodeType.DOT_OP:\r\n        case NodeType.CALL:\r\n        case NodeType.TYPE_CONSTRUCT:\r\n        case NodeType.LITERAL:\r\n        case NodeType.UNARY_OP:\r\n        case NodeType.BINARY_OP:\r\n        case NodeType.LAMBDA:\r\n            return [(0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(exprToStr(astNode), fmt, ASTFmt.EXPRESSION_FMT)];\r\n        default:\r\n            throw \"Can't recursively print tree because given node is not an AST node: \" + astNode.constructor.name;\r\n    }\r\n}\r\nfunction printAST(astNode) {\r\n    let fmt = [];\r\n    let outA = [];\r\n    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(outA, [nodeNameToStr(astNode, fmt)]);\r\n    (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(outA, recurse(astNode, fmt));\r\n    let str = [outA.join(\"\\n\")];\r\n    for (let i = 0; i < fmt.length; i++) {\r\n        str.push(fmt[i]);\r\n    }\r\n    console.log.apply(printAST, str);\r\n}\r\nfunction newLiteralNode(value, locToken) {\r\n    let tkn;\r\n    switch (typeof value) {\r\n        case \"number\":\r\n            tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(value + \"\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.NUMERIC_LITERAL_TKN);\r\n            tkn.value = value;\r\n            break;\r\n        case \"string\":\r\n            tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(value + \"\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.STRING_LITERAL_TKN);\r\n            tkn.value = value;\r\n            break;\r\n        case \"boolean\":\r\n            if (value) {\r\n                tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(value + \"\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.COND_TRUE_TKN);\r\n            }\r\n            else {\r\n                tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(value + \"\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.COND_FALSE_TKN);\r\n            }\r\n        default:\r\n            throw \"Can't make literal node for value=\" + value;\r\n    }\r\n    let literal = new ASTLiteral(tkn);\r\n    literal.value = tkn;\r\n    return literal;\r\n}\r\nfunction newTypeLiteralNode(type, locToken) {\r\n    let tkn;\r\n    switch (type) {\r\n        case _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.MODULE_TKN:\r\n            tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(\"module\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.MODULE_TKN);\r\n            break;\r\n        case _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.TYPE_TKN:\r\n            tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(\"type\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.TYPE_TKN);\r\n            break;\r\n        case _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.VOID_TYPE_TKN:\r\n            tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(\"void\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.VOID_TYPE_TKN);\r\n            break;\r\n        case _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.NUM_TYPE_TKN:\r\n            tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(\"num\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.NUM_TYPE_TKN);\r\n            break;\r\n        case _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.STRING_TYPE_TKN:\r\n            tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(\"string\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.STRING_TYPE_TKN);\r\n            break;\r\n        case _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.BOOL_TYPE_TKN:\r\n            tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.Token(\"bool\", locToken.line, locToken.c, _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.BOOL_TYPE_TKN);\r\n            break;\r\n        default:\r\n            throw \"Casn't make type literal node for typeID=\" + type;\r\n    }\r\n    let typeLiteral = new ASTTypeLiteral(tkn);\r\n    typeLiteral.type = tkn;\r\n    return typeLiteral;\r\n}\r\nvar NodeType;\r\n(function (NodeType) {\r\n    NodeType[NodeType[\"PROGRAM\"] = 0] = \"PROGRAM\";\r\n    NodeType[NodeType[\"BLOCK\"] = 1] = \"BLOCK\";\r\n    NodeType[NodeType[\"IF\"] = 2] = \"IF\";\r\n    NodeType[NodeType[\"WHILE\"] = 3] = \"WHILE\";\r\n    NodeType[NodeType[\"FOR\"] = 4] = \"FOR\";\r\n    NodeType[NodeType[\"BREAK\"] = 5] = \"BREAK\";\r\n    NodeType[NodeType[\"CONTINUE\"] = 6] = \"CONTINUE\";\r\n    NodeType[NodeType[\"RETURN\"] = 7] = \"RETURN\";\r\n    NodeType[NodeType[\"OPERATOR_DEF\"] = 8] = \"OPERATOR_DEF\";\r\n    NodeType[NodeType[\"DECLARATION\"] = 9] = \"DECLARATION\";\r\n    NodeType[NodeType[\"TYPE_LITERAL\"] = 10] = \"TYPE_LITERAL\";\r\n    NodeType[NodeType[\"FUNCTION_TYPE\"] = 11] = \"FUNCTION_TYPE\";\r\n    NodeType[NodeType[\"MODULE\"] = 12] = \"MODULE\";\r\n    NodeType[NodeType[\"TYPE_DEF\"] = 13] = \"TYPE_DEF\";\r\n    NodeType[NodeType[\"FUNCTION\"] = 14] = \"FUNCTION\";\r\n    NodeType[NodeType[\"NAME\"] = 15] = \"NAME\";\r\n    NodeType[NodeType[\"DOT_OP\"] = 16] = \"DOT_OP\";\r\n    NodeType[NodeType[\"CALL\"] = 17] = \"CALL\";\r\n    NodeType[NodeType[\"TYPE_CONSTRUCT\"] = 18] = \"TYPE_CONSTRUCT\";\r\n    NodeType[NodeType[\"LITERAL\"] = 19] = \"LITERAL\";\r\n    NodeType[NodeType[\"UNARY_OP\"] = 20] = \"UNARY_OP\";\r\n    NodeType[NodeType[\"BINARY_OP\"] = 21] = \"BINARY_OP\";\r\n    NodeType[NodeType[\"LAMBDA\"] = 22] = \"LAMBDA\";\r\n})(NodeType || (NodeType = {}));\r\nclass ASTNode {\r\n    constructor(locToken) {\r\n        this.locToken = locToken;\r\n    }\r\n}\r\nclass ASTProgram extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.PROGRAM;\r\n    }\r\n}\r\nclass ASTBlock extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.BLOCK;\r\n    }\r\n}\r\nclass ASTIf extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.IF;\r\n    }\r\n}\r\nclass ASTWhile extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.WHILE;\r\n    }\r\n}\r\nclass ASTFor extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.FOR;\r\n    }\r\n}\r\nclass ASTBreak extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.BREAK;\r\n    }\r\n}\r\nclass ASTContinue extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.CONTINUE;\r\n    }\r\n}\r\nclass ASTReturn extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.RETURN;\r\n    }\r\n}\r\nclass ASTOperatorDefinition extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.OPERATOR_DEF;\r\n    }\r\n}\r\nclass ASTDeclaration extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.DECLARATION;\r\n        this.isAssignment = false;\r\n        this.accessType = _Token__WEBPACK_IMPORTED_MODULE_0__.TokenType.ASSIGNMENT_TKN;\r\n    }\r\n}\r\nclass ASTTypeLiteral extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.TYPE_LITERAL;\r\n    }\r\n}\r\nclass ASTFunctionType extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.FUNCTION_TYPE;\r\n    }\r\n}\r\nclass ASTModule extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.MODULE;\r\n    }\r\n}\r\nclass ASTTypeDefinition extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.TYPE_DEF;\r\n    }\r\n}\r\nclass ASTFunction extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.FUNCTION;\r\n    }\r\n}\r\nclass ASTName extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.NAME;\r\n    }\r\n}\r\nclass ASTDotOperator extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.DOT_OP;\r\n    }\r\n}\r\nclass ASTCall extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.CALL;\r\n    }\r\n}\r\nclass ASTTypeConstruction extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.TYPE_CONSTRUCT;\r\n    }\r\n}\r\nclass ASTLiteral extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.LITERAL;\r\n    }\r\n}\r\nclass ASTUnaryOperator extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.UNARY_OP;\r\n    }\r\n}\r\nclass ASTBinaryOperator extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.BINARY_OP;\r\n    }\r\n}\r\nclass ASTLambda extends ASTNode {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.nodeName = NodeType.LAMBDA;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Ast.ts\n");

/***/ }),

/***/ "./src/scuft/lang/ErrorHandler.ts":
/*!****************************************!*\
  !*** ./src/scuft/lang/ErrorHandler.ts ***!
  \****************************************/
/*! namespace exports */
/*! export ErrorHandler [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ErrorHandler\": () => /* binding */ ErrorHandler\n/* harmony export */ });\n/* harmony import */ var _Lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lexer */ \"./src/scuft/lang/Lexer.ts\");\n\r\nclass ErrorHandler {\r\n    constructor(header) {\r\n        this.lines = [];\r\n        this.errorQueue = [];\r\n        this.header = header;\r\n    }\r\n    static fromHandler(header, errorHandler) {\r\n        let handler = new ErrorHandler(header);\r\n        handler.lines = errorHandler.lines;\r\n        return handler;\r\n    }\r\n    static fromSource(header, sourceCode) {\r\n        let handler = new ErrorHandler(header);\r\n        let begin = 0;\r\n        let lineCount = 1;\r\n        for (let i = 0; i < sourceCode.length; i++) {\r\n            if (sourceCode.charAt(i) === \"\\n\") {\r\n                handler.lines[lineCount++] = sourceCode.slice(begin, i);\r\n                begin = i + 1;\r\n            }\r\n        }\r\n        handler.lines[lineCount] = sourceCode.slice(begin, sourceCode.length);\r\n        return handler;\r\n    }\r\n    panic() {\r\n        let err = this.header;\r\n        for (let i = 0; i < this.errorQueue.length; i++) {\r\n            err += this.errorQueue[i];\r\n        }\r\n        throw err;\r\n    }\r\n    warn() {\r\n        let err = this.header;\r\n        for (let i = 0; i < this.errorQueue.length; i++) {\r\n            err += this.errorQueue[i];\r\n        }\r\n        console.warn(err);\r\n        this.errorQueue = [];\r\n    }\r\n    errorHeader(msg, line, c) {\r\n        let optionalCol = \"\";\r\n        if (c !== undefined) {\r\n            let str = this.lines[line].slice(0, c);\r\n            let col = 0;\r\n            for (let i = 0; i < str.length; i++) {\r\n                if (str.charAt(i) === \"\\t\") {\r\n                    col += ErrorHandler.TAB_WIDTH;\r\n                }\r\n                else {\r\n                    col++;\r\n                }\r\n            }\r\n            optionalCol = \", col:\" + (col + 1);\r\n        }\r\n        return \"(line:\" + line + optionalCol + \"): \" + msg + \"\\n\";\r\n    }\r\n    formatLine(leftIndentSpace, line, fileLine) {\r\n        if (line < 1)\r\n            return \"\";\r\n        let strNumber = line + \"\";\r\n        for (let i = 0; i < leftIndentSpace - strNumber.length; i++) {\r\n            strNumber = \" \" + strNumber;\r\n        }\r\n        return \"\\t\" + strNumber + \"\\t\" + fileLine + \"\\n\";\r\n    }\r\n    getLineFromSource(line) {\r\n        return this.lines[line].trimLeft().split(\"\\t\").join(\" \");\r\n    }\r\n    makeIndicator(line, c0, c1) {\r\n        console.assert(c0 >= 0, \"c0=%s must be non-negative\", c0);\r\n        console.assert(c1 > c0, \"c1=%s must be larger than c0=%s\", c1, c0);\r\n        let indentLen = this.lines[line].length - this.lines[line].trimLeft().length;\r\n        return \" \".repeat(c0 - indentLen) + \"^\".repeat(c1 - c0);\r\n    }\r\n    insert(msg) {\r\n        this.errorQueue.push(msg);\r\n        return this;\r\n    }\r\n    addNote_PANIC(msg) {\r\n        this.errorQueue.push(\"Note: \" + msg);\r\n        this.panic();\r\n    }\r\n    atPoint(msg, line, c) {\r\n        let error = this.errorHeader(msg, line, c);\r\n        let len = Math.floor(Math.log10(line + 1)) + 1;\r\n        error += this.formatLine(len, line - 1, \"\");\r\n        error += this.formatLine(len, line, this.getLineFromSource(line));\r\n        error += this.formatLine(len, line + 1, this.makeIndicator(line, c, c + 1));\r\n        this.errorQueue.push(error);\r\n        return this;\r\n    }\r\n    atPoint_PANIC(msg, line, c) {\r\n        this.atPoint(msg, line, c);\r\n        this.panic();\r\n    }\r\n    atToken(msg, token) {\r\n        return this.atPoint(msg, token.line, token.c);\r\n    }\r\n    atToken_PANIC(msg, token) {\r\n        this.atPoint_PANIC(msg, token.line, token.c);\r\n    }\r\n    atNode(msg, node) {\r\n        return this.atToken(msg, node.locToken);\r\n    }\r\n    atNode_PANIC(msg, node) {\r\n        this.atToken_PANIC(msg, node.locToken);\r\n    }\r\n    atWholeToken(msg, token) {\r\n        let line = token.line;\r\n        let c = token.c;\r\n        let error = this.errorHeader(msg, line, c);\r\n        let len = Math.floor(Math.log10(line + 1)) + 1;\r\n        error += this.formatLine(len, line - 1, \"\");\r\n        error += this.formatLine(len, line, this.getLineFromSource(line));\r\n        error += this.formatLine(len, line + 1, this.makeIndicator(line, c, c + Math.max(1, token.stringValue.length)));\r\n        this.errorQueue.push(error);\r\n        return this;\r\n    }\r\n    atWholeToken_PANIC(msg, token) {\r\n        this.atWholeToken(msg, token);\r\n        this.panic();\r\n    }\r\n    atAfterLastToken(msg, curToken) {\r\n        let curLine = curToken.line;\r\n        let curLineStr = this.lines[curLine];\r\n        let cur = curToken.c;\r\n        do {\r\n            if (cur <= 0 && curLine > 1) {\r\n                curLine--;\r\n                curLineStr = this.lines[curLine];\r\n                cur = curLineStr.length;\r\n            }\r\n            cur--;\r\n        } while ((cur > 0 || curLine >= 1) && _Lexer__WEBPACK_IMPORTED_MODULE_0__.default.isWhitespace(curLineStr.charAt(cur)));\r\n        return this.atPoint(msg, curLine, cur + 1);\r\n    }\r\n    atAfterLastToken_PANIC(msg, curToken) {\r\n        this.atAfterLastToken(msg, curToken);\r\n        this.panic();\r\n    }\r\n}\r\nErrorHandler.TAB_WIDTH = 4;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/ErrorHandler.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Lexer.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Lexer.ts ***!
  \*********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Lexer\n/* harmony export */ });\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n\r\n\r\nclass Lexer {\r\n    constructor(sourceCode, errHandler) {\r\n        this.curIndex = 0;\r\n        this.curLine = 1;\r\n        this.curC = 0;\r\n        this.sourceCode = sourceCode;\r\n        this.err = _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler.fromHandler(\"----Lexer----\\n\", errHandler);\r\n    }\r\n    lex() {\r\n        let tokens = [];\r\n        let token = this.nextToken();\r\n        while (token.type !== _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN) {\r\n            tokens.push(token);\r\n            token = this.nextToken();\r\n        }\r\n        tokens.push(token);\r\n        return tokens;\r\n    }\r\n    getChar(index) {\r\n        return this.sourceCode.charAt(index);\r\n    }\r\n    getCurChar() {\r\n        return this.getChar(this.curIndex);\r\n    }\r\n    getNextChar() {\r\n        return this.getChar(this.curIndex + 1);\r\n    }\r\n    incrementCurIndex(amount) {\r\n        if (this.getCurChar() === \"\\n\") {\r\n            this.curLine++;\r\n            this.curC = -1;\r\n        }\r\n        this.curIndex += amount;\r\n        this.curC += amount;\r\n    }\r\n    nextToken() {\r\n        while (Lexer.isWhitespace(this.getCurChar())) {\r\n            this.incrementCurIndex(1);\r\n        }\r\n        if (this.curIndex >= this.sourceCode.length) {\r\n            return this.grabToken(\"' '\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN);\r\n        }\r\n        switch (this.getCurChar()) {\r\n            case \">\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\">=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_EQUAL_TKN);\r\n                }\r\n                else if (this.getNextChar() === \">\" && this.getChar(this.curIndex + 2) === \">\") {\r\n                    return this.grabToken(\">>>\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n                }\r\n                else if (this.getNextChar() === \">\") {\r\n                    return this.grabToken(\">>\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\">\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_TKN);\r\n                }\r\n            case \"<\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"<=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_EQUAL_TKN);\r\n                    case \"<\":\r\n                        return this.grabToken(\"<<\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_LEFT_TKN);\r\n                    case \"-\":\r\n                        return this.grabToken(\"<-\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.REVERSE_ARROW_TKN);\r\n                    default:\r\n                        return this.grabToken(\"<\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_TKN);\r\n                }\r\n            case \":\":\r\n                return this.grabToken(\":\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN);\r\n            case \"=\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"==\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_EQUALS_TKN);\r\n                    case \">\":\r\n                        return this.grabToken(\"=>\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN);\r\n                    default:\r\n                        return this.grabToken(\"=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN);\r\n                }\r\n            case \"{\":\r\n                return this.grabToken(\"{\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN);\r\n            case \"}\":\r\n                return this.grabToken(\"}\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN);\r\n            case \"[\":\r\n                return this.grabToken(\"[\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_SQUARE_TKN);\r\n            case \"]\":\r\n                return this.grabToken(\"]\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_SQUARE_TKN);\r\n            case \"(\":\r\n                return this.grabToken(\"(\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN);\r\n            case \")\":\r\n                return this.grabToken(\")\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN);\r\n            case \"|\":\r\n                if (this.getNextChar() === \"|\") {\r\n                    return this.grabToken(\"||\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_OR_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"|\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_BAR_TKN);\r\n                }\r\n            case \"&\":\r\n                if (this.getNextChar() === \"&\") {\r\n                    return this.grabToken(\"&&\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_AND_TKN);\r\n                }\r\n                else {\r\n                    let ampersand = this.grabToken(\"&\" + this.getNextChar(), _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n                    ampersand.value = \"&\";\r\n                    return ampersand;\r\n                }\r\n            case \"$\":\r\n                if (this.getNextChar() === \"$\") {\r\n                    return this.grabToken(\"$$\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_XOR_TKN);\r\n                }\r\n                else {\r\n                    let dollar = this.grabToken(\"$\" + this.getNextChar(), _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n                    dollar.value = \"$\";\r\n                    return this.grabToken(\"$\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n                }\r\n            case \"!\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\"!=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_EQUALS_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"!\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_TKN);\r\n                }\r\n            case \"+\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"+=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_EQUALS_TKN);\r\n                    case \"+\":\r\n                        return this.grabToken(\"++\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_ADD_TKN);\r\n                    default:\r\n                        return this.grabToken(\"+\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_TKN);\r\n                }\r\n            case \"-\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"-=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_EQUALS_TKN);\r\n                    case \"-\":\r\n                        return this.grabToken(\"--\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_SUBTR_TKN);\r\n                    case \">\":\r\n                        return this.grabToken(\"->\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN);\r\n                    default:\r\n                        return this.grabToken(\"-\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN);\r\n                }\r\n            case \"*\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"*=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MULT_EQUALS_TKN);\r\n                    case \"/\":\r\n                        this.err.atPoint_PANIC(\"Unclosed block comment\", this.curLine, this.curC);\r\n                    default:\r\n                        return this.grabToken(\"*\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MULT_TKN);\r\n                }\r\n            case \"/\":\r\n                switch (this.getNextChar()) {\r\n                    case \"/\":\r\n                        this.consumeSingleLineComment();\r\n                        return this.nextToken();\r\n                    case \"*\":\r\n                        this.consumeBlockComment();\r\n                        return this.nextToken();\r\n                    case \"=\":\r\n                        return this.grabToken(\"/=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_DIV_EQUALS_TKN);\r\n                    default:\r\n                        return this.grabToken(\"/\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_DIVIDE_TKN);\r\n                }\r\n            case \"^\":\r\n                return this.grabToken(\"^\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_CARROT_TKN);\r\n            case \"%\":\r\n                return this.grabToken(\"%\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MODULUS_TKN);\r\n            case \"~\":\r\n                if (this.getNextChar() == \"=\") {\r\n                    return this.grabToken(\"~=\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"~\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_NOT_TKN);\r\n                }\r\n            case \".\":\r\n                if (this.getNextChar() === \".\" && this.getChar(this.curIndex + 2) === \".\") {\r\n                    return this.grabToken(\"...\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\".\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN);\r\n                }\r\n            case \"\\\\\":\r\n                return this.grabToken(\"\\\\\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN);\r\n            case \",\":\r\n                return this.grabToken(\",\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN);\r\n            case \";\":\r\n                return this.grabToken(\";\", _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN);\r\n            case '\"':\r\n                return this.grabStringLiteral();\r\n            default:\r\n                if (Lexer.isLetter(this.getCurChar())) {\r\n                    return this.grabIdentifier();\r\n                }\r\n                else if (Lexer.isNumber(this.getCurChar())) {\r\n                    return this.grabNumericLiteral();\r\n                }\r\n                else if (this.getCurChar() === \"#\") {\r\n                    return this.grabDirective();\r\n                }\r\n                else {\r\n                    let unknown = this.grabToken(this.getCurChar(), _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n                    unknown.value = this.getCurChar();\r\n                    return unknown;\r\n                }\r\n        }\r\n    }\r\n    grabToken(str, type) {\r\n        this.incrementCurIndex(str.length);\r\n        return this.makeToken(str, type);\r\n    }\r\n    makeToken(str, type) {\r\n        let tkn = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(str, this.curLine, this.curC - str.length, type);\r\n        return tkn;\r\n    }\r\n    grabNumericLiteral() {\r\n        let stringValue = \"\";\r\n        let base = 10;\r\n        if (this.getCurChar() === \"0\") {\r\n            switch (this.getNextChar()) {\r\n                case \"b\":\r\n                    base = 2;\r\n                    stringValue = \"0b\";\r\n                    this.incrementCurIndex(2);\r\n                    break;\r\n                case \"o\":\r\n                    base = 8;\r\n                    stringValue = \"0o\";\r\n                    this.incrementCurIndex(2);\r\n                    break;\r\n                case \"x\":\r\n                    base = 16;\r\n                    stringValue = \"0x\";\r\n                    this.incrementCurIndex(2);\r\n                    break;\r\n            }\r\n        }\r\n        let number = 0;\r\n        let ch = this.getCurChar();\r\n        let point = false;\r\n        let divideBy = 1;\r\n        while (Lexer.isNumber(ch) || ch === \".\" || (base == 16 && Lexer.isHexLetter(ch))) {\r\n            stringValue += ch;\r\n            if (ch !== \"_\") {\r\n                if (ch === \".\") {\r\n                    if (point === false) {\r\n                        point = true;\r\n                        this.incrementCurIndex(1);\r\n                        ch = this.getCurChar();\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        this.err.atPoint_PANIC('Number has too many decimal points \"' + number / divideBy + '.\"', this.curLine, this.curC);\r\n                    }\r\n                }\r\n                let val = Lexer.toInt(ch);\r\n                if (val < base) {\r\n                    number = base * number + val;\r\n                    if (point)\r\n                        divideBy = divideBy * base;\r\n                }\r\n                else {\r\n                    this.err.atPoint_PANIC(ch + \" is an invalid digit symbol in base \" + base, this.curLine, this.curC);\r\n                }\r\n            }\r\n            this.incrementCurIndex(1);\r\n            ch = this.getCurChar();\r\n        }\r\n        let value = number / divideBy;\r\n        let tkn = this.makeToken(stringValue, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN);\r\n        tkn.value = value;\r\n        return tkn;\r\n    }\r\n    grabStringLiteral() {\r\n        this.grabToken('\"', _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOUBLE_QUOTE_TKN);\r\n        let str = \"\";\r\n        let ch = this.getCurChar();\r\n        let escapeChar = false;\r\n        while (this.curIndex < this.sourceCode.length && ch !== \"\\n\" && (escapeChar || ch !== '\"')) {\r\n            if (!escapeChar || ch === '\"') {\r\n                str += ch;\r\n            }\r\n            if (ch === \"\\\\\") {\r\n                escapeChar = true;\r\n            }\r\n            else {\r\n                escapeChar = false;\r\n            }\r\n            this.incrementCurIndex(1);\r\n            ch = this.getCurChar();\r\n        }\r\n        if (this.curIndex >= this.sourceCode.length || ch === \"\\n\") {\r\n            this.err.atPoint_PANIC(\"Unterminated string literal\", this.curLine, this.curC - str.length - 1);\r\n        }\r\n        this.grabToken('\"', _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOUBLE_QUOTE_TKN);\r\n        let tkn = this.makeToken('\"' + str + '\"', _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN);\r\n        tkn.value = str;\r\n        return tkn;\r\n    }\r\n    grabDirective() {\r\n        console.assert(this.getCurChar() === \"#\", \"Directives must start with #\");\r\n        this.incrementCurIndex(1);\r\n        let str = \"#\";\r\n        let ch = this.getCurChar();\r\n        while (Lexer.isLetter(ch) || Lexer.isNumber(ch)) {\r\n            this.incrementCurIndex(1);\r\n            str = str + ch;\r\n            ch = this.getCurChar();\r\n        }\r\n        switch (str) {\r\n            case \"#range\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.HASH_RANGE_TKN);\r\n            default:\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN);\r\n        }\r\n    }\r\n    grabIdentifier() {\r\n        let str = \"\";\r\n        let ch = this.getCurChar();\r\n        while (Lexer.isLetter(ch) || Lexer.isNumber(ch)) {\r\n            this.incrementCurIndex(1);\r\n            str = str + ch;\r\n            ch = this.getCurChar();\r\n        }\r\n        switch (str) {\r\n            case \"type\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN);\r\n            case \"module\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN);\r\n            case \"with\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN);\r\n            case \"if\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN);\r\n            case \"else\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELSE_TKN);\r\n            case \"while\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WHILE_TKN);\r\n            case \"for\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.FOR_TKN);\r\n            case \"in\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IN_TKN);\r\n            case \"break\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BREAK_TKN);\r\n            case \"continue\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONTINUE_TKN);\r\n            case \"operator\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OPERATOR_TKN);\r\n            case \"or\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_OR_TKN);\r\n            case \"and\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_AND_TKN);\r\n            case \"xor\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_XOR_TKN);\r\n            case \"true\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN);\r\n            case \"false\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN);\r\n            case \"void\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.VOID_TYPE_TKN);\r\n            case \"num\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN);\r\n            case \"string\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_TYPE_TKN);\r\n            case \"bool\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BOOL_TYPE_TKN);\r\n            case \"return\":\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RETURN_TKN);\r\n            default:\r\n                return this.makeToken(str, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN);\r\n        }\r\n    }\r\n    consumeSingleLineComment() {\r\n        this.incrementCurIndex(2);\r\n        while (this.curIndex < this.sourceCode.length && this.getCurChar() !== \"\\n\") {\r\n            this.incrementCurIndex(1);\r\n        }\r\n    }\r\n    consumeBlockComment() {\r\n        let beginLine = this.curLine;\r\n        let beginC = this.curC;\r\n        this.incrementCurIndex(2);\r\n        while (this.curIndex < this.sourceCode.length && !(this.getCurChar() === \"*\" && this.getNextChar() === \"/\")) {\r\n            this.incrementCurIndex(1);\r\n        }\r\n        if (this.curIndex >= this.sourceCode.length) {\r\n            this.err\r\n                .atPoint(\"Beginning of the block comment is as follows\", beginLine, beginC)\r\n                .atPoint_PANIC(\"Unterminated block comment at the end of the file. Expected */\", this.curLine, this.curC);\r\n        }\r\n        this.incrementCurIndex(2);\r\n    }\r\n    static isWhitespace(ch) {\r\n        return ch === \" \" || ch === \"\\t\" || ch === \"\\r\" || ch === \"\\n\";\r\n    }\r\n    static isLetter(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 65 && n < 91) || (n >= 97 && n < 123) || ch === \"'\" || ch === \"_\";\r\n    }\r\n    static isNumber(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 48 && n <= 57) || ch === \"_\";\r\n    }\r\n    static isHexLetter(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 65 && n < 71) || (n >= 97 && n < 103);\r\n    }\r\n    static toInt(ch) {\r\n        if (Lexer.isNumber(ch))\r\n            return parseInt(ch);\r\n        if (Lexer.isHexLetter(ch)) {\r\n            let val = ch.charCodeAt(0) - 65 + 10;\r\n            if (val <= 15)\r\n                return val;\r\n            return val - (97 - 65);\r\n        }\r\n        throw \"String is not assignable to any int value\";\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Lexer.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Log.ts":
/*!*******************************!*\
  !*** ./src/scuft/lang/Log.ts ***!
  \*******************************/
/*! namespace exports */
/*! export applyFmt [provided] [no usage info] [missing usage info prevents renaming] */
/*! export bar [provided] [no usage info] [missing usage info prevents renaming] */
/*! export merge [provided] [no usage info] [missing usage info prevents renaming] */
/*! export space [provided] [no usage info] [missing usage info prevents renaming] */
/*! export tab [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyFmt\": () => /* binding */ applyFmt,\n/* harmony export */   \"merge\": () => /* binding */ merge,\n/* harmony export */   \"space\": () => /* binding */ space,\n/* harmony export */   \"tab\": () => /* binding */ tab,\n/* harmony export */   \"bar\": () => /* binding */ bar\n/* harmony export */ });\nconst DEFAULT_FMT = \"color: #7D7C84;\";\r\nfunction applyFmt(str, fmt, format = DEFAULT_FMT) {\r\n    fmt.push(format);\r\n    fmt.push(DEFAULT_FMT);\r\n    return \"%c\" + str + \"%c\";\r\n}\r\nfunction merge(firstStr, secondStr) {\r\n    for (let i = 0; i < secondStr.length; i++) {\r\n        firstStr.push(secondStr[i]);\r\n    }\r\n    return firstStr;\r\n}\r\nfunction space(amount, strA) {\r\n    const prefix = \" \".repeat(amount);\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = prefix + strA[i];\r\n    }\r\n    return strA;\r\n}\r\nfunction tab(strA) {\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = \"    \" + strA[i];\r\n    }\r\n    return strA;\r\n}\r\nfunction bar(strA) {\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = \" |  \" + strA[i];\r\n    }\r\n    return strA;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL0xvZy50cz9hNjIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUM7QUFFL0IsU0FBUyxRQUFRLENBQUMsR0FBVyxFQUFFLEdBQWEsRUFBRSxNQUFNLEdBQUcsV0FBVztJQUNyRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEIsT0FBTyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztBQUM3QixDQUFDO0FBRU0sU0FBUyxLQUFLLENBQUMsUUFBa0IsRUFBRSxTQUFtQjtJQUN6RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN2QyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQy9CO0lBQ0QsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUVNLFNBQVMsS0FBSyxDQUFDLE1BQWMsRUFBRSxJQUFjO0lBQ2hELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRU0sU0FBUyxHQUFHLENBQUMsSUFBYztJQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNsQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFFTSxTQUFTLEdBQUcsQ0FBQyxJQUFjO0lBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzlCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQyIsImZpbGUiOiIuL3NyYy9zY3VmdC9sYW5nL0xvZy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERFRkFVTFRfRk1UID0gXCJjb2xvcjogIzdEN0M4NDtcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseUZtdChzdHI6IHN0cmluZywgZm10OiBzdHJpbmdbXSwgZm9ybWF0ID0gREVGQVVMVF9GTVQpOiBzdHJpbmcge1xyXG4gICAgZm10LnB1c2goZm9ybWF0KTtcclxuICAgIGZtdC5wdXNoKERFRkFVTFRfRk1UKTtcclxuICAgIHJldHVybiBcIiVjXCIgKyBzdHIgKyBcIiVjXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZShmaXJzdFN0cjogc3RyaW5nW10sIHNlY29uZFN0cjogc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlY29uZFN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGZpcnN0U3RyLnB1c2goc2Vjb25kU3RyW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmaXJzdFN0cjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNwYWNlKGFtb3VudDogbnVtYmVyLCBzdHJBOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHByZWZpeCA9IFwiIFwiLnJlcGVhdChhbW91bnQpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJBLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgc3RyQVtpXSA9IHByZWZpeCArIHN0ckFbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyQTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRhYihzdHJBOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyQS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHN0ckFbaV0gPSBcIiAgICBcIiArIHN0ckFbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyQTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJhcihzdHJBOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyQS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHN0ckFbaV0gPSBcIiB8ICBcIiArIHN0ckFbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyQTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scuft/lang/Log.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Parser.ts":
/*!**********************************!*\
  !*** ./src/scuft/lang/Parser.ts ***!
  \**********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Parser\n/* harmony export */ });\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Scope */ \"./src/scuft/lang/Scope.ts\");\n\r\n\r\n\r\n\r\nclass Parser {\r\n    constructor(lexer, errHandler) {\r\n        this.tokenQueue = [];\r\n        this.precedence = new Map();\r\n        this.LOWEST_PRECEDENCE = 0;\r\n        this.HIGHEST_PRECEDENCE = 100;\r\n        this.lexer = lexer;\r\n        this.err = _ErrorHandler__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler.fromHandler(\"----Parser----\\n\", errHandler);\r\n        this.initPrecedenceMap();\r\n    }\r\n    throwAssertError(actualTkn, expectedTkn, msg) {\r\n        if (msg) {\r\n            this.err.atAfterLastToken(\"The parser expected \" + expectedTkn + \" but found a different token. \" + msg, actualTkn);\r\n        }\r\n        else {\r\n            this.err.atAfterLastToken(\"The parser expected \" + expectedTkn + \" but found a different token\", actualTkn);\r\n        }\r\n        if (actualTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN) {\r\n            actualTkn.stringValue = \"'\" + actualTkn + \"'\";\r\n        }\r\n        this.err.atWholeToken_PANIC(actualTkn.stringValue + \" is not permitted here\", actualTkn);\r\n    }\r\n    assertIdentifier(expectedTkn, msg) {\r\n        let actualTkn = this.peekToken();\r\n        if (actualTkn.type !== _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN) {\r\n            this.throwAssertError(actualTkn, expectedTkn, msg);\r\n        }\r\n    }\r\n    assertToken(type, msg) {\r\n        let actualTkn = this.peekToken();\r\n        let expectedTkn = (0,_Token__WEBPACK_IMPORTED_MODULE_1__.tokenToStr)(type);\r\n        if (actualTkn.type !== type) {\r\n            this.throwAssertError(actualTkn, expectedTkn, msg);\r\n        }\r\n    }\r\n    lookAheadToken(amount) {\r\n        console.assert(amount > 0, \"Must only look ahead by amount greater than 0. Instead got %s\", amount);\r\n        for (let i = this.tokenQueue.length; i < amount; i++) {\r\n            this.tokenQueue.push(this.lexer.nextToken());\r\n        }\r\n        return this.tokenQueue[amount - 1];\r\n    }\r\n    peekToken() {\r\n        return this.lookAheadToken(1);\r\n    }\r\n    checkToken(type) {\r\n        return this.peekToken().type === type;\r\n    }\r\n    nextToken() {\r\n        if (this.tokenQueue.length > 0) {\r\n            return this.tokenQueue.shift();\r\n        }\r\n        else {\r\n            return this.lexer.nextToken();\r\n        }\r\n    }\r\n    parseProgram() {\r\n        this.globalScope = _Scope__WEBPACK_IMPORTED_MODULE_3__.default.newGlobalScope();\r\n        let program = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTProgram(this.peekToken());\r\n        program.declarations = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN)) {\r\n                this.err.atWholeToken_PANIC(\"With statements are not allowed in global scope\", this.peekToken());\r\n            }\r\n            else {\r\n                if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OPERATOR_TKN))\r\n                    this.parseOperatorDefinition();\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err.atToken_PANIC(\"Statements are not allowed to exist freely in global scope\", this.peekToken());\r\n                }\r\n                let declaration = this.parseDeclaration(this.globalScope);\r\n                program.declarations.push(declaration);\r\n            }\r\n        }\r\n        return program;\r\n    }\r\n    parseBlock(blockScope) {\r\n        let block = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBlock(this.peekToken());\r\n        if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN)) {\r\n            let singleLineBlock = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBlock(this.peekToken());\r\n            singleLineBlock.statements = [];\r\n            singleLineBlock.statements.push(this.parseStatement(blockScope));\r\n            return singleLineBlock;\r\n        }\r\n        this.nextToken();\r\n        block.scope = blockScope;\r\n        block.withModules = [];\r\n        block.statements = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN)) {\r\n                block.withModules.push(this.parseWith());\r\n            }\r\n            else {\r\n                let statement = this.parseStatement(blockScope);\r\n                if (statement.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.DECLARATION) {\r\n                    let decl = statement;\r\n                    if (decl.rvalue) {\r\n                        switch (decl.rvalue.nodeName) {\r\n                            case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.MODULE:\r\n                                this.err\r\n                                    .atNode(\"Error in block\", block)\r\n                                    .atNode_PANIC(\"Module declaration is not allowed here\", decl);\r\n                            case _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.TYPE_DEF:\r\n                                this.err\r\n                                    .atNode(\"Error in block\", block)\r\n                                    .atNode_PANIC(\"Type definition is not allowed here\", decl);\r\n                        }\r\n                    }\r\n                }\r\n                block.statements.push(statement);\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atNode(\"Error in block\", block)\r\n                .atAfterLastToken_PANIC(\"Unterminated block at end of file. Expected closing }\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        return block;\r\n    }\r\n    parseStatement(scope) {\r\n        switch (this.peekToken().type) {\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN:\r\n                return this.parseIf(scope);\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WHILE_TKN:\r\n                return this.parseWhile(scope);\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.FOR_TKN:\r\n                return this.parseFor(scope);\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BREAK_TKN:\r\n                let breakStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBreak(this.nextToken());\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of break statements\");\r\n                this.nextToken();\r\n                return breakStatement;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONTINUE_TKN:\r\n                let continueStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTContinue(this.nextToken());\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of continue statements\");\r\n                this.nextToken();\r\n                return continueStatement;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RETURN_TKN:\r\n                let returnStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTReturn(this.nextToken());\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                    returnStatement.returnValue = this.parseExpression();\r\n                }\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of return statements\");\r\n                this.nextToken();\r\n                return returnStatement;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OPERATOR_TKN:\r\n                this.err.atToken_PANIC(\"Operator definitions are only allowed in modules or in global scope\", this.peekToken());\r\n            default:\r\n                let refName = this.parseExpression();\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN) &&\r\n                    !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN) &&\r\n                    !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN) &&\r\n                    !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN)) {\r\n                    this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"This expression must end with a semi-colon\");\r\n                    this.nextToken();\r\n                    return refName;\r\n                }\r\n                else {\r\n                    return this.parseDeclarationFromName(refName, scope);\r\n                }\r\n        }\r\n    }\r\n    parseWith() {\r\n        this.nextToken();\r\n        this.assertIdentifier(\"a module name\", \"With keyword must be followed by a name reference to a module\");\r\n        let withModuleReference = this.parseExpression();\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of with statements\");\r\n        this.nextToken();\r\n        return withModuleReference;\r\n    }\r\n    parseIf(scope) {\r\n        let ifScope = _Scope__WEBPACK_IMPORTED_MODULE_3__.default.newScopeFrom(scope);\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN, \"If statement must start with if keyword\");\r\n        let ifStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTIf(this.nextToken());\r\n        ifStatement.condition = this.parseExpression();\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n            this.err.atToken_PANIC(\"Unbalanced parenthesis. Expected {\", this.peekToken());\r\n        }\r\n        ifStatement.consequence = this.parseBlock(ifScope);\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELSE_TKN)) {\r\n            this.nextToken();\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IF_TKN)) {\r\n                ifStatement.alternative = this.parseIf(scope);\r\n            }\r\n            else if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n                this.err\r\n                    .atNode(\"Error in if statement\", ifStatement)\r\n                    .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected if keyword or {\", this.peekToken());\r\n            }\r\n            else {\r\n                ifStatement.alternative = this.parseBlock(ifScope);\r\n            }\r\n        }\r\n        return ifStatement;\r\n    }\r\n    parseWhile(scope) {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WHILE_TKN, \"While loop must start with while keyword\");\r\n        let whileStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTWhile(this.nextToken());\r\n        whileStatement.condition = this.parseExpression();\r\n        whileStatement.block = this.parseBlock(_Scope__WEBPACK_IMPORTED_MODULE_3__.default.newScopeFrom(scope));\r\n        return whileStatement;\r\n    }\r\n    parseFor(scope) {\r\n        let forScope = _Scope__WEBPACK_IMPORTED_MODULE_3__.default.newScopeFrom(scope);\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.FOR_TKN, \"For loop must start with for keyword\");\r\n        let forStatement = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTFor(this.nextToken());\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN)) {\r\n            this.err.atToken_PANIC(\"For loops don't require encapsulating parenthesis in this language\", this.peekToken());\r\n        }\r\n        switch (this.lookAheadToken(2).type) {\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN:\r\n                this.assertIdentifier(\"a variable reference to an iterable\");\r\n                forStatement.iterableName = this.parseExpression();\r\n                break;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN:\r\n                let itemDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n                forStatement.itemParamDec = itemDec;\r\n                itemDec.inScope = forScope;\r\n                itemDec.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err.atToken_PANIC(\"Expected a new 'item' variable declaration but got an expression instead\", this.peekToken());\r\n                }\r\n                itemDec.lvalue.refName = this.nextToken().stringValue;\r\n                forScope.addDeclaration(itemDec);\r\n                this.nextToken();\r\n                let indexDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n                forStatement.indexParamDec = indexDec;\r\n                indexDec.inScope = forScope;\r\n                indexDec.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n                indexDec.type = _Ast__WEBPACK_IMPORTED_MODULE_2__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN, this.peekToken());\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err.atToken_PANIC(\"Expected a new 'index' variable declaration but got an expression instead\", this.peekToken());\r\n                }\r\n                indexDec.lvalue.refName = this.nextToken().stringValue;\r\n                if (itemDec.lvalue.refName === indexDec.lvalue.refName) {\r\n                    this.err\r\n                        .atNode(\"Duplicate variable declaration in for loop\", itemDec)\r\n                        .atNode_PANIC(\"Variable name of item and index variable must be different\", indexDec);\r\n                }\r\n                forScope.addDeclaration(itemDec);\r\n                this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IN_TKN);\r\n                this.nextToken();\r\n                this.assertIdentifier(\"a variable reference to an iterable\");\r\n                forStatement.iterableName = this.parseExpression();\r\n                break;\r\n            case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IN_TKN:\r\n                let inItemDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n                forStatement.itemParamDec = inItemDec;\r\n                inItemDec.inScope = forScope;\r\n                inItemDec.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n                if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN)) {\r\n                    this.err.atToken_PANIC(\"Expected a new 'item' variable declaration but got an expression instead\", this.peekToken());\r\n                }\r\n                inItemDec.lvalue.refName = this.nextToken().stringValue;\r\n                forScope.addDeclaration(inItemDec);\r\n                this.nextToken();\r\n                if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.HASH_RANGE_TKN)) {\r\n                    this.nextToken();\r\n                    let isLowerBoundExclusive = false;\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN)) {\r\n                        isLowerBoundExclusive = true;\r\n                    }\r\n                    else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_SQUARE_TKN)) {\r\n                        this.err.atToken_PANIC(\"Expected either a [ or a (\", this.peekToken());\r\n                    }\r\n                    this.nextToken();\r\n                    forStatement.lowerBound = this.parseExpression();\r\n                    if (isLowerBoundExclusive) {\r\n                        let expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(forStatement.lowerBound.locToken);\r\n                        expression.lvalue = forStatement.lowerBound;\r\n                        expression.operation = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(\"+\", forStatement.lowerBound.locToken.line, forStatement.lowerBound.locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_TKN);\r\n                        expression.rvalue = _Ast__WEBPACK_IMPORTED_MODULE_2__.newLiteralNode(1, forStatement.lowerBound.locToken);\r\n                        forStatement.lowerBound = expression;\r\n                    }\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_SQUARE_TKN) || this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                        this.err.atToken_PANIC(\"For loop range requires two expressions separated by a comma\", this.peekToken());\r\n                    }\r\n                    this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN, \"Invalid declaration of a for loop range\");\r\n                    this.nextToken();\r\n                    forStatement.upperBound = this.parseExpression();\r\n                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                        let expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(forStatement.upperBound.locToken);\r\n                        expression.lvalue = forStatement.upperBound;\r\n                        expression.operation = new _Token__WEBPACK_IMPORTED_MODULE_1__.Token(\"-\", forStatement.upperBound.locToken.line, forStatement.upperBound.locToken.c, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN);\r\n                        expression.rvalue = _Ast__WEBPACK_IMPORTED_MODULE_2__.newLiteralNode(1, forStatement.upperBound.locToken);\r\n                        forStatement.upperBound = expression;\r\n                    }\r\n                    else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_SQUARE_TKN)) {\r\n                        this.err.atToken_PANIC(\"Expected either a ] or a )\", this.peekToken());\r\n                    }\r\n                    this.nextToken();\r\n                    break;\r\n                }\r\n                else {\r\n                    this.assertIdentifier(\"a variable reference to an iterable\", \"A potential fix is to use #range after the in keyword to denote iteration over a range\");\r\n                    forStatement.iterableName = this.parseExpression();\r\n                    break;\r\n                }\r\n            default:\r\n                this.err.atToken_PANIC(\"Invalid for loop. Expected a single variable name but got an expression instead\", this.peekToken());\r\n        }\r\n        forStatement.block = this.parseBlock(forScope);\r\n        return forStatement;\r\n    }\r\n    parseOperatorDefinition() {\r\n        let operatorDef = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTOperatorDefinition(this.peekToken());\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OPERATOR_TKN, \"Operator definition must start with operator keyword\");\r\n        this.nextToken();\r\n        operatorDef.operatorName = this.nextToken();\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN, \"Operator definition must be a constant assignment to a function overload\");\r\n        this.nextToken();\r\n        operatorDef.functionOverload = this.parseFunction(this.globalScope);\r\n        this.globalScope.addOperatorOverload(operatorDef.operatorName.type, operatorDef.functionOverload);\r\n        return operatorDef;\r\n    }\r\n    parseDeclaration(scope) {\r\n        return this.parseDeclarationFromName(this.parseExpression(), scope);\r\n    }\r\n    parseDeclarationFromName(refName, scope) {\r\n        let decl = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(refName.locToken);\r\n        decl.inScope = scope;\r\n        decl.lvalue = refName;\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN)) {\r\n            this.nextToken();\r\n            decl.type = this.parseExpression();\r\n        }\r\n        let accessTkn;\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN) ||\r\n            this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN) ||\r\n            this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN)) {\r\n            accessTkn = this.nextToken();\r\n            decl.accessType = accessTkn.type;\r\n            switch (this.peekToken().type) {\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN:\r\n                    if (accessTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                        decl.rvalue = this.parseModule(scope);\r\n                        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                            this.err\r\n                                .atNode(\"Error in module declaration\", refName)\r\n                                .atToken_PANIC(\"Semi-colons are not accepted directly after the end bracket of a module declaration\", this.peekToken());\r\n                        }\r\n                        break;\r\n                    }\r\n                    else {\r\n                        this.err\r\n                            .atNode(\"Error in module declaration\", refName)\r\n                            .atToken_PANIC(\"Module declarations must be constant: \" +\r\n                            refName.refName +\r\n                            \" => module {...}\", accessTkn);\r\n                    }\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                    if (accessTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN) {\r\n                        decl.rvalue = this.parseTypeDefinition(_Scope__WEBPACK_IMPORTED_MODULE_3__.default.newTypeDefScopeFrom(scope, decl));\r\n                        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                            this.err\r\n                                .atNode(\"Error in type definition\", refName)\r\n                                .atToken_PANIC(\"Semi-colons are not accepted directly after the end bracket of a type definition\", this.peekToken());\r\n                        }\r\n                        break;\r\n                    }\r\n                    else {\r\n                        this.err\r\n                            .atNode(\"Error in type definition\", refName)\r\n                            .atToken_PANIC(\"Type definitions must be constant: \" +\r\n                            refName.refName +\r\n                            \" => type {...}\", accessTkn);\r\n                    }\r\n                default:\r\n                    if ((this.lookAheadToken(1).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN &&\r\n                        this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN &&\r\n                        (this.lookAheadToken(3).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN ||\r\n                            this.lookAheadToken(3).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN)) ||\r\n                        (this.lookAheadToken(1).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN &&\r\n                            this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                        decl.rvalue = this.parseFunction(scope);\r\n                        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                            this.err\r\n                                .atNode(\"Error in function declaration\", refName)\r\n                                .atToken_PANIC(\"Semi-colons are not accepted after a function declaration\", this.peekToken());\r\n                        }\r\n                    }\r\n                    else {\r\n                        decl.rvalue = this.parseExpression();\r\n                        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                            this.err.atToken_PANIC(\"Unbalanced parenthesis. Expected a semi-colon\", this.peekToken());\r\n                        }\r\n                        else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN)) {\r\n                            let declNameType = decl.type ? \"declaration\" : \"assignment\";\r\n                            this.err\r\n                                .atNode(\"Error in \" + declNameType, refName)\r\n                                .atAfterLastToken_PANIC(\"Expected a semi-colon at the end of the variable \" +\r\n                                declNameType +\r\n                                \" but got \" +\r\n                                this.peekToken().stringValue +\r\n                                \" instead\", this.peekToken());\r\n                        }\r\n                        this.nextToken();\r\n                    }\r\n            }\r\n        }\r\n        else {\r\n            this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.SEMI_COLON_TKN, \"Semi-colons are required at the end of variable declarations\");\r\n            this.nextToken();\r\n        }\r\n        console.assert(decl.type || decl.rvalue, \"This should be evaluted as an expression statement, not a declaration\");\r\n        if (refName.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.NAME) {\r\n            let name = refName;\r\n            if (!(decl.rvalue && decl.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.FUNCTION) && scope.hasName(name)) {\r\n                let otherDecl = scope.getVariable(name);\r\n                if (decl.accessType && decl.accessType !== _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MUTABLE_ASSIGNMENT_TKN) {\r\n                    this.err\r\n                        .atNode(\"Attemping to reassign the value of the following\", otherDecl)\r\n                        .atWholeToken(\"Illegal reassignment found here\", accessTkn)\r\n                        .addNote_PANIC(\"Reassignment to a different value is only allowed with a mutable assignment ~=\");\r\n                }\r\n            }\r\n            else {\r\n                scope.addDeclaration(decl);\r\n                return decl;\r\n            }\r\n        }\r\n        if (decl.accessType === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN) {\r\n            this.err\r\n                .atToken(\"Attempting to modify the value of a variable using the immutable assignment =\", accessTkn)\r\n                .addNote_PANIC(\"Use ~= instead to denote a mutable assignment to a mutable variable\");\r\n        }\r\n        decl.isAssignment = true;\r\n        return decl;\r\n    }\r\n    parseModule(scope) {\r\n        let moduleScope = _Scope__WEBPACK_IMPORTED_MODULE_3__.default.newModuleScopeFrom(scope);\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN, \"Module must start with module keyword\");\r\n        let module = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTModule(this.nextToken());\r\n        module.withModules = [];\r\n        module.declarations = [];\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN);\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN)) {\r\n                module.withModules.push(this.parseWith());\r\n            }\r\n            else if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OPERATOR_TKN)) {\r\n                this.err\r\n                    .atNode(\"Error in module\", module)\r\n                    .atToken_PANIC(\"Modules are not yet allowed to define operator overloads\", this.peekToken());\r\n            }\r\n            else {\r\n                module.declarations.push(this.parseDeclaration(moduleScope));\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atNode(\"Error in module\", module)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected closing {\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        return module;\r\n    }\r\n    parseTypeDefinition(typeDefScope) {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN, \"Type definition must start with type keyword\");\r\n        let typeDef = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeDefinition(this.nextToken());\r\n        typeDef.withModules = [];\r\n        typeDef.declarations = [];\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN, \"Type definition must be enclosed in curly brackets\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.WITH_TKN)) {\r\n                typeDef.withModules.push(this.parseWith());\r\n            }\r\n            else if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OPERATOR_TKN)) {\r\n                this.err\r\n                    .atNode(\"Error in type definition\", typeDef)\r\n                    .atToken_PANIC(\"Type definitions are not allowed to define operator overloads\", this.peekToken());\r\n            }\r\n            else {\r\n                typeDef.declarations.push(this.parseDeclaration(typeDefScope));\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atNode(\"Error in type definition\", typeDef)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected closing {\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        return typeDef;\r\n    }\r\n    parseFunction(scope) {\r\n        let functionScope = _Scope__WEBPACK_IMPORTED_MODULE_3__.default.newScopeFrom(scope);\r\n        let func = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTFunction(this.peekToken());\r\n        func.paramDeclaration = [];\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN, \"Function declaration must specify parameters or use ()\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            let paramDec = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n            paramDec.inScope = functionScope;\r\n            this.assertIdentifier(\"a parameter name\", \"Function parameters must declare variable names\");\r\n            paramDec.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n            paramDec.lvalue.refName = this.nextToken().stringValue;\r\n            let otherDec = functionScope.getVariable(paramDec.lvalue);\r\n            if (otherDec) {\r\n                this.err\r\n                    .atNode(\"Found duplicate name for parameter declaration\", paramDec)\r\n                    .atNode_PANIC(\"Other duplicate parameter here\", otherDec);\r\n            }\r\n            else {\r\n                functionScope.addDeclaration(paramDec);\r\n            }\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COLON_TKN)) {\r\n                this.nextToken();\r\n                paramDec.type = this.parseExpression();\r\n            }\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN)) {\r\n                this.nextToken();\r\n                paramDec.rvalue = this.parseExpression();\r\n            }\r\n            if (!paramDec.type && !paramDec.rvalue) {\r\n                this.err\r\n                    .atNode(\"Error in function definition\", paramDec)\r\n                    .atToken_PANIC(this.peekToken().stringValue +\r\n                    \" is not allowed here. Function parameter must either specify a type using : or assign a default value using =\", this.peekToken());\r\n            }\r\n            func.paramDeclaration.push(paramDec);\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN) {\r\n                    this.err.atAfterLastToken_PANIC(\"Expected another parameter definition after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                this.err.atAfterLastToken_PANIC(\"Invalid function parameter definition. Expected either a comma or )\", this.peekToken());\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err.atAfterLastToken_PANIC(\"Unterminated parameter declaration at end of file\", this.peekToken());\r\n        }\r\n        this.nextToken();\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN)) {\r\n            this.nextToken();\r\n            func.returnType = this.parseExpression();\r\n        }\r\n        func.block = this.parseBlock(functionScope);\r\n        return func;\r\n    }\r\n    setPrecedence(precedence, ...types) {\r\n        for (let i = 0; i < types.length; i++) {\r\n            this.precedence.set(types[i], precedence);\r\n        }\r\n    }\r\n    initPrecedenceMap() {\r\n        this.setPrecedence(1, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_OR_TKN);\r\n        this.setPrecedence(2, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_XOR_TKN);\r\n        this.setPrecedence(3, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_AND_TKN);\r\n        this.setPrecedence(4, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_OR_TKN);\r\n        this.setPrecedence(5, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_XOR_TKN);\r\n        this.setPrecedence(6, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_AND_TKN);\r\n        this.setPrecedence(7, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_EQUALS_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_EQUALS_TKN);\r\n        this.setPrecedence(8, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_EQUAL_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_EQUAL_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_GREATER_THAN_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_TKN);\r\n        this.setPrecedence(9, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_LEFT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_RIGHT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n        this.setPrecedence(10, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_ADD_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN);\r\n        this.setPrecedence(11, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MULT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_DIVIDE_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_MODULUS_TKN);\r\n        this.setPrecedence(12, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_CARROT_TKN);\r\n        this.setPrecedence(13, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN, _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN);\r\n    }\r\n    parseExpression() {\r\n        return this.recurseExpression(this.LOWEST_PRECEDENCE, 0, this.peekToken());\r\n    }\r\n    recurseExpression(precedence, depthCount, sourceToken) {\r\n        let expression;\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            let tkn = this.peekToken();\r\n            switch (tkn.type) {\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.MODULE_TKN:\r\n                    this.err\r\n                        .atToken(\"Error in expression starting with\", sourceToken)\r\n                        .atToken_PANIC(\"Modules should strictly be assigned to a variable in the form [moduleName] => module {...}\", tkn);\r\n                case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                    if (this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN) {\r\n                        this.err\r\n                            .atToken(\"Error in expression starting with\", sourceToken)\r\n                            .atToken_PANIC(\"Modules should strictly be assigned to a variable in the form [typeName] => type {...}\", tkn);\r\n                    }\r\n            }\r\n            if (expression) {\r\n                switch (tkn.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BOOL_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.VOID_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_NOT_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN:\r\n                        if (depthCount !== 0) {\r\n                            this.err\r\n                                .insert(\"First potential error:\\n\")\r\n                                .atToken(\"Operand token (ex: 3, true, etc.) or prefix operator (ex: !, ~, etc.) can only appear after an operator (ex: +, *, etc.)\", tkn)\r\n                                .insert(\"Second potential error:\\n\")\r\n                                .atAfterLastToken_PANIC(\"Unbalanced parenthesis. Expected \" + depthCount + \" more )\", tkn);\r\n                        }\r\n                        return expression;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN:\r\n                        return expression;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN:\r\n                        if (this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN) {\r\n                            expression = this.parseTypeConstruction(expression);\r\n                            break;\r\n                        }\r\n                    default:\r\n                        let curPrecedence = this.precedence.get(tkn.type);\r\n                        if (curPrecedence !== undefined) {\r\n                            if (curPrecedence > precedence) {\r\n                                if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN)) {\r\n                                    let dotOp = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDotOperator(expression.locToken);\r\n                                    dotOp.rootValue = expression;\r\n                                    this.nextToken();\r\n                                    dotOp.memberValue = this.recurseExpression(curPrecedence, depthCount, sourceToken);\r\n                                    expression = dotOp;\r\n                                }\r\n                                else if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN)) {\r\n                                    expression = this.parseCall(expression, sourceToken);\r\n                                }\r\n                                else {\r\n                                    if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_SHIFT_LEFT_TKN)) {\r\n                                        if (this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_LESS_THAN_TKN) {\r\n                                            this.err.atToken_PANIC(\"Arithmetic left shift is equivalent to logical left shift. Use << instead of <<<\", this.peekToken());\r\n                                        }\r\n                                    }\r\n                                    let binOp = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(expression.locToken);\r\n                                    binOp.lvalue = expression;\r\n                                    binOp.operation = this.nextToken();\r\n                                    binOp.rvalue = this.recurseExpression(curPrecedence, depthCount, sourceToken);\r\n                                    expression = binOp;\r\n                                }\r\n                            }\r\n                            else {\r\n                                return expression;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.UNKNOWN_TKN)) {\r\n                                this.err.atToken_PANIC(\"Expression contains unknown operator \" + this.peekToken().stringValue, this.peekToken());\r\n                            }\r\n                            else if (depthCount !== 0) {\r\n                                this.err\r\n                                    .atToken(\"Error in expression starting with\", sourceToken)\r\n                                    .atToken_PANIC(\"Unbalanced parenthesis. Expected \" + depthCount + \" more )\", tkn);\r\n                            }\r\n                            else {\r\n                                return expression;\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            else {\r\n                switch (tkn.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUM_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BOOL_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.VOID_TYPE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.TYPE_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeLiteral(tkn);\r\n                        expression.type = this.nextToken();\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.NUMERIC_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.STRING_LITERAL_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_TRUE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_FALSE_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTLiteral(tkn);\r\n                        expression.value = this.nextToken();\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COND_NOT_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BIN_NOT_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTUnaryOperator(tkn);\r\n                        expression.operation = this.nextToken();\r\n                        expression.value = this.recurseExpression(precedence, depthCount, sourceToken);\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN:\r\n                        if (this.lookAheadToken(2).type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN) {\r\n                            expression = this.parseFunctionType();\r\n                        }\r\n                        else {\r\n                            expression = this.parseLambda();\r\n                        }\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(tkn);\r\n                        expression.refName = tkn.stringValue;\r\n                        this.nextToken();\r\n                        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN) || this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ELLIPSIS_TKN)) {\r\n                            this.err.atToken_PANIC(\"Too many dots in a row. Note that an ellipsis has three dots: ...\", this.peekToken());\r\n                        }\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.IDENTIFIER_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.nextToken());\r\n                        expression.refName = expression.locToken.stringValue;\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_PARENS_TKN:\r\n                        this.nextToken();\r\n                        expression = this.recurseExpression(this.LOWEST_PRECEDENCE, depthCount + 1, sourceToken);\r\n                        this.nextToken();\r\n                        break;\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN:\r\n                        this.err\r\n                            .atToken(\"Error in reference starting with\", sourceToken)\r\n                            .atToken_PANIC(\"Can't start an expression with a dot or have two dots in a row\", this.peekToken());\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.OP_SUBTR_TKN:\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTBinaryOperator(tkn);\r\n                        expression.lvalue = _Ast__WEBPACK_IMPORTED_MODULE_2__.newLiteralNode(0, tkn);\r\n                        expression.operation = this.nextToken();\r\n                        expression.rvalue = this.recurseExpression(this.HIGHEST_PRECEDENCE, depthCount, sourceToken);\r\n                        break;\r\n                    default:\r\n                        this.err.atAfterLastToken_PANIC(\"Expected an expression but got nothing\", tkn);\r\n                }\r\n            }\r\n        }\r\n        this.err\r\n            .atToken(\"Error in expression starting with\", sourceToken)\r\n            .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected an operator, operand, or terminating token like semi-colon\", this.peekToken());\r\n        return expression;\r\n    }\r\n    parseCall(prevExpression, sourceToken) {\r\n        let call = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTCall(prevExpression.locToken);\r\n        call.functionNameRef = prevExpression;\r\n        call.givenParams = [];\r\n        this.nextToken();\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN || expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN) {\r\n                    this.err.atAfterLastToken_PANIC(\"Expected another expression after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else {\r\n                call.givenParams.push(this.recurseExpression(this.LOWEST_PRECEDENCE, 0, sourceToken));\r\n            }\r\n        }\r\n        this.nextToken();\r\n        return call;\r\n    }\r\n    parseTypeConstruction(prevExpression) {\r\n        let typeConstruct = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTTypeConstruction(prevExpression.locToken);\r\n        typeConstruct.typeRef = prevExpression;\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.DOT_TKN, \"Dot '.' is required after the type name in a type construction\");\r\n        this.nextToken();\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.LEFT_CURLY_TKN, \"Type construction must be enclosed in curly brackets\");\r\n        this.nextToken();\r\n        typeConstruct.assignments = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN)) {\r\n            let assignment = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTDeclaration(this.peekToken());\r\n            assignment.isAssignment = true;\r\n            assignment.lvalue = this.parseExpression();\r\n            if (assignment.lvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_2__.NodeType.NAME) {\r\n                this.err\r\n                    .atNode(\"Error in type constructor\", typeConstruct)\r\n                    .atNode_PANIC(\"Type constructor assignments need to be single variable names\", assignment);\r\n            }\r\n            else {\r\n                for (let i = 0; i < typeConstruct.assignments.length; i++) {\r\n                    if (typeConstruct.assignments[i].lvalue.refName ===\r\n                        assignment.lvalue.refName) {\r\n                        this.err\r\n                            .atNode(\"Repeated assignment in type construction\", typeConstruct.assignments[i])\r\n                            .atNode_PANIC(\"Other repeated assignment found here\", assignment);\r\n                    }\r\n                }\r\n            }\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ASSIGNMENT_TKN)) {\r\n                this.err\r\n                    .atNode(\"Error in type constructor\", typeConstruct)\r\n                    .atToken_PANIC(\"Assignment in a type constructor must use <- instead of =\", this.peekToken());\r\n            }\r\n            this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.REVERSE_ARROW_TKN, \"Assignment in a type constructor must assign a value using <-\");\r\n            this.nextToken();\r\n            assignment.rvalue = this.parseExpression();\r\n            typeConstruct.assignments.push(assignment);\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN) {\r\n                    this.err.atAfterLastToken_PANIC(\"Expected another assignment after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_CURLY_TKN)) {\r\n                this.err.atAfterLastToken_PANIC(\"Invalid type construction. Expected either a comma or }\", this.peekToken());\r\n            }\r\n        }\r\n        this.nextToken();\r\n        return typeConstruct;\r\n    }\r\n    parseFunctionType() {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN, \"Function type must start with a backslash\");\r\n        this.nextToken();\r\n        let type = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTFunctionType(this.peekToken());\r\n        this.nextToken();\r\n        type.inputType = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN) && !this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            type.inputType.push(this.parseExpression());\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                this.nextToken();\r\n            }\r\n            else if (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RIGHT_PARENS_TKN)) {\r\n                this.err.atAfterLastToken_PANIC(\"Invalid type definition. Expected either a comma or )\", this.peekToken());\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atNode(\"Error in declaration type specifier\", type)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected another type\", this.peekToken());\r\n        }\r\n        else {\r\n            this.nextToken();\r\n        }\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.ARROW_TKN, \"Function type declarations must declare a return type.\");\r\n        this.nextToken();\r\n        type.outType = this.parseExpression();\r\n        return type;\r\n    }\r\n    parseLambda() {\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.BACKSLASH_TKN, \"Lambda expression must start with \\\\\");\r\n        let lambda = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTLambda(this.nextToken());\r\n        lambda.parameters = [];\r\n        while (!this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            let param = new _Ast__WEBPACK_IMPORTED_MODULE_2__.ASTName(this.peekToken());\r\n            this.assertIdentifier(\"a name parameter to a lambda expression\", \"Lambda parameters must be variable names\");\r\n            param.refName = this.nextToken().stringValue;\r\n            lambda.parameters.push(param);\r\n            if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.COMMA_TKN)) {\r\n                this.nextToken();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.END_TKN)) {\r\n            this.err\r\n                .atNode(\"Error in lambda expression\", lambda)\r\n                .atAfterLastToken_PANIC(\"Unterminated code at end of file. Expected another parameter\", this.peekToken());\r\n        }\r\n        this.assertToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.CONST_ASSIGNMENT_TKN, \"Lambdas require => after the parameters\");\r\n        this.nextToken();\r\n        if (this.checkToken(_Token__WEBPACK_IMPORTED_MODULE_1__.TokenType.RETURN_TKN)) {\r\n            this.err.atToken_PANIC(\"Return keyword is not accepted in a lambda definition\", this.peekToken());\r\n        }\r\n        lambda.expression = this.parseExpression();\r\n        return lambda;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Parser.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Scope.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Scope.ts ***!
  \*********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Scope\n/* harmony export */ });\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _Log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Log */ \"./src/scuft/lang/Log.ts\");\n\r\n\r\nclass Scope {\r\n    constructor() {\r\n        this.table = new Map();\r\n        this.unOrdered = false;\r\n    }\r\n    static newGlobalScope() {\r\n        let globalScope = new Scope();\r\n        globalScope.operatorOverloads = new Map();\r\n        return globalScope;\r\n    }\r\n    static newScopeFrom(parentScope) {\r\n        let scope = new Scope();\r\n        scope.parent = parentScope;\r\n        if (!parentScope.debugChildren)\r\n            parentScope.debugChildren = [];\r\n        parentScope.debugChildren.push(scope);\r\n        return scope;\r\n    }\r\n    static newModuleScopeFrom(parentScope) {\r\n        let scope = this.newScopeFrom(parentScope);\r\n        scope.unOrdered = true;\r\n        return scope;\r\n    }\r\n    static newTypeDefScopeFrom(parentScope, typDefDecl) {\r\n        let scope = new Scope();\r\n        if (!parentScope.debugChildren)\r\n            parentScope.debugChildren = [];\r\n        parentScope.debugChildren.push(scope);\r\n        scope.unOrdered = true;\r\n        scope.addDeclaration(typDefDecl);\r\n        return scope;\r\n    }\r\n    addOperatorOverload(operator, overload) {\r\n        let existingOverloads = this.operatorOverloads.get(operator);\r\n        if (!existingOverloads) {\r\n            existingOverloads = [];\r\n            this.operatorOverloads.set(operator, existingOverloads);\r\n        }\r\n        existingOverloads.push(overload);\r\n    }\r\n    getOperatorOverload(operator) {\r\n        return this.operatorOverloads.get(operator);\r\n    }\r\n    searchVariableDeclaration(name, excludeDecl) {\r\n        let declList = this.searchFunctionDeclaration(name, excludeDecl);\r\n        if (!declList)\r\n            return undefined;\r\n        if (declList.length > 1) {\r\n            throw \"Discovered a declaration name which defines a function, not a variable\";\r\n        }\r\n        return declList[0];\r\n    }\r\n    searchFunctionDeclaration(name, excludeDecl) {\r\n        if (this.table.has(name.refName)) {\r\n            let declList = this.table.get(name.refName);\r\n            if (!(excludeDecl && excludeDecl.locToken.equals(declList[0].locToken))) {\r\n                return declList;\r\n            }\r\n        }\r\n        if (!this.parent) {\r\n            return undefined;\r\n        }\r\n        else {\r\n            return this.parent.searchFunctionDeclaration(name);\r\n        }\r\n    }\r\n    addDeclaration(decl) {\r\n        let refName = decl.lvalue.refName;\r\n        let existingDecl = this.table.get(refName);\r\n        if (existingDecl) {\r\n            existingDecl.push(decl);\r\n        }\r\n        else {\r\n            this.table.set(refName, [decl]);\r\n        }\r\n    }\r\n    getDeclarations(name) {\r\n        return this.table.get(name.refName);\r\n    }\r\n    hasName(name) {\r\n        return this.table.has(name.refName);\r\n    }\r\n    getVariable(name) {\r\n        let decl = this.table.get(name.refName);\r\n        if (!decl)\r\n            return undefined;\r\n        if (decl.length > 1)\r\n            console.warn(\"Variable with name \" + name.refName + \" is a function, not a variable\");\r\n        return decl[0];\r\n    }\r\n    printScope() {\r\n        let fmt = [];\r\n        let lines = [];\r\n        (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, this.recurseScope(fmt));\r\n        let str = [lines.join(\"\\n\")];\r\n        for (let i = 0; i < fmt.length; i++) {\r\n            str.push(fmt[i]);\r\n        }\r\n        console.log.apply(lines, str);\r\n    }\r\n    recurseScope(fmt) {\r\n        let lines = [(0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(\"Scope\", fmt)];\r\n        if (this.operatorOverloads) {\r\n            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, [\"   OperatorOverloads:\"]);\r\n        }\r\n        lines.push(\"   Table:\");\r\n        let maxKeyLength = 0;\r\n        let maxTypeLength = 0;\r\n        for (const [key, value] of this.table.entries()) {\r\n            if (key.length > maxKeyLength)\r\n                maxKeyLength = key.length;\r\n            for (let i = 0; i < value.length; i++) {\r\n                if (value[i].resolvedType) {\r\n                    let typeName = _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value[i].resolvedType);\r\n                    if (typeName.length > maxTypeLength)\r\n                        maxTypeLength = typeName.length;\r\n                }\r\n            }\r\n        }\r\n        for (const [key, value] of this.table.entries()) {\r\n            for (let i = 0; i < value.length; i++) {\r\n                let line = \"    |  \";\r\n                if (i === 0) {\r\n                    line += (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(key, fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.IDENTIFIER_FMT) + \" \".repeat(maxKeyLength - key.length);\r\n                }\r\n                else {\r\n                    line += \" \".repeat(maxKeyLength);\r\n                }\r\n                let typeName = \"\";\r\n                if (value[i].resolvedType) {\r\n                    typeName = _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value[i].resolvedType);\r\n                    line += \" : \" + (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(typeName, fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.TYPE_FMT);\r\n                }\r\n                else {\r\n                    line += \"   \";\r\n                }\r\n                if (value[i].rvalue) {\r\n                    line +=\r\n                        \" \".repeat(maxTypeLength - typeName.length) +\r\n                            \" = \" +\r\n                            (0,_Log__WEBPACK_IMPORTED_MODULE_1__.applyFmt)(_Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(value[i].rvalue), fmt, _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFmt.EXPRESSION_FMT);\r\n                }\r\n                lines.push(line);\r\n            }\r\n        }\r\n        if (this.debugChildren) {\r\n            lines.push(\"   Children:\");\r\n            for (let i = 0; i < this.debugChildren.length; i++) {\r\n                (0,_Log__WEBPACK_IMPORTED_MODULE_1__.merge)(lines, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.space)(3, (0,_Log__WEBPACK_IMPORTED_MODULE_1__.bar)(this.debugChildren[i].recurseScope(fmt))));\r\n            }\r\n        }\r\n        return lines;\r\n    }\r\n}\r\nScope.scopeCounter = 0;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Scope.ts\n");

/***/ }),

/***/ "./src/scuft/lang/ScuftTest.ts":
/*!*************************************!*\
  !*** ./src/scuft/lang/ScuftTest.ts ***!
  \*************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* export default binding */ __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _Lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lexer */ \"./src/scuft/lang/Lexer.ts\");\n/* harmony import */ var _Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Parser */ \"./src/scuft/lang/Parser.ts\");\n/* harmony import */ var _TypeChecker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TypeChecker */ \"./src/scuft/lang/TypeChecker.ts\");\n/* harmony import */ var _test_6_DeclarationTypeInfer_scft__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../test/6-DeclarationTypeInfer.scft */ \"./src/scuft/test/6-DeclarationTypeInfer.scft\");\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\r\n    function testString(input) {\r\n        let errHandler = _ErrorHandler__WEBPACK_IMPORTED_MODULE_5__.ErrorHandler.fromSource(\"\", input);\r\n        let parser = new _Parser__WEBPACK_IMPORTED_MODULE_1__.default(new _Lexer__WEBPACK_IMPORTED_MODULE_0__.default(input, errHandler), errHandler);\r\n        let prgm = parser.parseProgram();\r\n        (0,_Ast__WEBPACK_IMPORTED_MODULE_4__.printAST)(prgm);\r\n        let typeCheck = new _TypeChecker__WEBPACK_IMPORTED_MODULE_2__.default(parser.globalScope, errHandler);\r\n        typeCheck.typeCheckProgram(prgm);\r\n        parser.globalScope.printScope();\r\n        console.log(\"---------------------\");\r\n    }\r\n    testString(_test_6_DeclarationTypeInfer_scft__WEBPACK_IMPORTED_MODULE_3__.default);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL1NjdWZ0VGVzdC50cz8wYjQ4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBNEI7QUFDRTtBQUNVO0FBTTBCO0FBRWpDO0FBQ2E7QUFFOUMsNkJBQWUsc0NBQVk7SUFDdkIsU0FBUyxVQUFVLENBQUMsS0FBYTtRQUk3QixJQUFJLFVBQVUsR0FBRyxrRUFBdUIsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEQsSUFBSSxNQUFNLEdBQUcsSUFBSSw0Q0FBTSxDQUFDLElBQUksMkNBQUssQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbEUsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWpDLDhDQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFZixJQUFJLFNBQVMsR0FBRyxJQUFJLGlEQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNoRSxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVoQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDekMsQ0FBQztJQU1ELFVBQVUsQ0FBQyxzRUFBZSxDQUFDLENBQUM7QUFHaEMsQ0FBQyIsImZpbGUiOiIuL3NyYy9zY3VmdC9sYW5nL1NjdWZ0VGVzdC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMZXhlciBmcm9tIFwiLi9MZXhlclwiO1xyXG5pbXBvcnQgUGFyc2VyIGZyb20gXCIuL1BhcnNlclwiO1xyXG5pbXBvcnQgVHlwZUNoZWNrZXIgZnJvbSBcIi4vVHlwZUNoZWNrZXJcIjtcclxuXHJcbmltcG9ydCBzaW1wbGVUZXN0IGZyb20gXCIuLi90ZXN0LzEtU2ltcGxlVGVzdC5zY2Z0XCI7XHJcbmltcG9ydCBsaXRlcmFsVGVzdCBmcm9tIFwiLi4vdGVzdC8yLUxpdGVyYWxUZXN0LnNjZnRcIjtcclxuaW1wb3J0IGV4cHJlc3Npb25UZXN0IGZyb20gXCIuLi90ZXN0LzQtRXhwcmVzc2lvblRlc3Quc2NmdFwiO1xyXG5pbXBvcnQgbW9kdWxlVHlwZURlZlRlc3QgZnJvbSBcIi4uL3Rlc3QvNS1Nb2R1bGVUeXBlRGVmaW5pdGlvblRlc3Quc2NmdFwiO1xyXG5pbXBvcnQgZGVjbGFyZVR5cGVUZXN0IGZyb20gXCIuLi90ZXN0LzYtRGVjbGFyYXRpb25UeXBlSW5mZXIuc2NmdFwiO1xyXG5cclxuaW1wb3J0IHsgcHJpbnRBU1QgfSBmcm9tIFwiLi9Bc3RcIjtcclxuaW1wb3J0IHsgRXJyb3JIYW5kbGVyIH0gZnJvbSBcIi4vRXJyb3JIYW5kbGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiB0ZXN0U3RyaW5nKGlucHV0OiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBsZXQgbGV4ZXIgPSBuZXcgTGV4ZXIoaW5wdXQpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxleGVyLmxleCgpKTtcclxuXHJcbiAgICAgICAgbGV0IGVyckhhbmRsZXIgPSBFcnJvckhhbmRsZXIuZnJvbVNvdXJjZShcIlwiLCBpbnB1dCk7XHJcbiAgICAgICAgbGV0IHBhcnNlciA9IG5ldyBQYXJzZXIobmV3IExleGVyKGlucHV0LCBlcnJIYW5kbGVyKSwgZXJySGFuZGxlcik7XHJcbiAgICAgICAgbGV0IHByZ20gPSBwYXJzZXIucGFyc2VQcm9ncmFtKCk7XHJcblxyXG4gICAgICAgIHByaW50QVNUKHByZ20pO1xyXG5cclxuICAgICAgICBsZXQgdHlwZUNoZWNrID0gbmV3IFR5cGVDaGVja2VyKHBhcnNlci5nbG9iYWxTY29wZSwgZXJySGFuZGxlcik7XHJcbiAgICAgICAgdHlwZUNoZWNrLnR5cGVDaGVja1Byb2dyYW0ocHJnbSk7XHJcbiAgICAgICAgcGFyc2VyLmdsb2JhbFNjb3BlLnByaW50U2NvcGUoKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS0tLS0tLS0tLS1cIik7XHJcbiAgICB9XHJcbiAgICAvLyB0ZXN0U3RyaW5nKHNpbXBsZVRlc3QpO1xyXG4gICAgLy8gdGVzdFN0cmluZyhsaXRlcmFsVGVzdCk7XHJcbiAgICAvLyB0ZXN0U3RyaW5nKHR5cGVUZXN0KTtcclxuICAgIC8vIHRlc3RTdHJpbmcoZXhwcmVzc2lvblRlc3QpO1xyXG4gICAgLy8gdGVzdFN0cmluZyhtb2R1bGVUeXBlRGVmVGVzdCk7XHJcbiAgICB0ZXN0U3RyaW5nKGRlY2xhcmVUeXBlVGVzdCk7XHJcblxyXG4gICAgLy8gdGVzdFN0cmluZyhcImIyID0gKGE6IG51bSwgYjogbnVtKSAtPiBudW0ge307XCIpO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scuft/lang/ScuftTest.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Token.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Token.ts ***!
  \*********************************/
/*! namespace exports */
/*! export Token [provided] [no usage info] [missing usage info prevents renaming] */
/*! export TokenType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export tokenToStr [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Token\": () => /* binding */ Token,\n/* harmony export */   \"tokenToStr\": () => /* binding */ tokenToStr,\n/* harmony export */   \"TokenType\": () => /* binding */ TokenType\n/* harmony export */ });\nclass Token {\r\n    constructor(stringValue, line, c, type) {\r\n        this.stringValue = stringValue;\r\n        this.line = line;\r\n        this.c = c;\r\n        this.type = type;\r\n        this.typeName = TokenType[type];\r\n    }\r\n    equals(other) {\r\n        return (other.line === this.line && other.c === this.c && this.isTokenTypeEqual(other) && other.value === this.value);\r\n    }\r\n    isTokenTypeEqual(other) {\r\n        return other.type === this.type;\r\n    }\r\n}\r\nfunction tokenToStr(tokenType) {\r\n    switch (tokenType) {\r\n        case TokenType.COLON_TKN:\r\n            return \":\";\r\n        case TokenType.ASSIGNMENT_TKN:\r\n            return \"=\";\r\n        case TokenType.CONST_ASSIGNMENT_TKN:\r\n            return \"=>\";\r\n        case TokenType.MUTABLE_ASSIGNMENT_TKN:\r\n            return \"~=\";\r\n        case TokenType.LEFT_CURLY_TKN:\r\n            return \"{\";\r\n        case TokenType.RIGHT_CURLY_TKN:\r\n            return \"}\";\r\n        case TokenType.LEFT_SQUARE_TKN:\r\n            return \"[\";\r\n        case TokenType.RIGHT_SQUARE_TKN:\r\n            return \"]\";\r\n        case TokenType.LEFT_PARENS_TKN:\r\n            return \"(\";\r\n        case TokenType.RIGHT_PARENS_TKN:\r\n            return \")\";\r\n        case TokenType.TYPE_TKN:\r\n            return \"type\";\r\n        case TokenType.MODULE_TKN:\r\n            return \"module\";\r\n        case TokenType.WITH_TKN:\r\n            return \"with\";\r\n        case TokenType.IF_TKN:\r\n            return \"if\";\r\n        case TokenType.ELSE_TKN:\r\n            return \"else\";\r\n        case TokenType.WHILE_TKN:\r\n            return \"while\";\r\n        case TokenType.FOR_TKN:\r\n            return \"for\";\r\n        case TokenType.IN_TKN:\r\n            return \"in\";\r\n        case TokenType.BREAK_TKN:\r\n            return \"break\";\r\n        case TokenType.CONTINUE_TKN:\r\n            return \"continue\";\r\n        case TokenType.OPERATOR_TKN:\r\n            return \"operator\";\r\n        case TokenType.COND_OR_TKN:\r\n            return \"||\";\r\n        case TokenType.COND_AND_TKN:\r\n            return \"&&\";\r\n        case TokenType.COND_XOR_TKN:\r\n            return \"$$\";\r\n        case TokenType.COND_NOT_TKN:\r\n            return \"!\";\r\n        case TokenType.COND_EQUALS_TKN:\r\n            return \"==\";\r\n        case TokenType.COND_NOT_EQUALS_TKN:\r\n            return \"!=\";\r\n        case TokenType.COND_LESS_THAN_TKN:\r\n            return \"<\";\r\n        case TokenType.COND_LESS_THAN_EQUAL_TKN:\r\n            return \"<=\";\r\n        case TokenType.COND_GREATER_THAN_TKN:\r\n            return \">\";\r\n        case TokenType.COND_GREATER_THAN_EQUAL_TKN:\r\n            return \">=\";\r\n        case TokenType.COND_TRUE_TKN:\r\n            return \"true\";\r\n        case TokenType.COND_FALSE_TKN:\r\n            return \"false\";\r\n        case TokenType.VOID_TYPE_TKN:\r\n            return \"void\";\r\n        case TokenType.NUM_TYPE_TKN:\r\n            return \"num\";\r\n        case TokenType.STRING_TYPE_TKN:\r\n            return \"string\";\r\n        case TokenType.BOOL_TYPE_TKN:\r\n            return \"bool\";\r\n        case TokenType.BIN_OR_TKN:\r\n            return \"or\";\r\n        case TokenType.BIN_AND_TKN:\r\n            return \"and\";\r\n        case TokenType.BIN_XOR_TKN:\r\n            return \"xor\";\r\n        case TokenType.BIN_NOT_TKN:\r\n            return \"~\";\r\n        case TokenType.BIN_SHIFT_RIGHT_TKN:\r\n            return \">>\";\r\n        case TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN:\r\n            return \">>>\";\r\n        case TokenType.BIN_SHIFT_LEFT_TKN:\r\n            return \"<<\";\r\n        case TokenType.ARROW_TKN:\r\n            return \"->\";\r\n        case TokenType.RETURN_TKN:\r\n            return \"return\";\r\n        case TokenType.BACKSLASH_TKN:\r\n            return \"\\\\\";\r\n        case TokenType.OP_ADD_TKN:\r\n            return \"+\";\r\n        case TokenType.OP_SUBTR_TKN:\r\n            return \"-\";\r\n        case TokenType.OP_MULT_TKN:\r\n            return \"*\";\r\n        case TokenType.OP_DIVIDE_TKN:\r\n            return \"/\";\r\n        case TokenType.OP_CARROT_TKN:\r\n            return \"^\";\r\n        case TokenType.OP_MODULUS_TKN:\r\n            return \"%\";\r\n        case TokenType.OP_BAR_TKN:\r\n            return \"|\";\r\n        case TokenType.OP_ADD_ADD_TKN:\r\n            return \"++\";\r\n        case TokenType.OP_ADD_EQUALS_TKN:\r\n            return \"+=\";\r\n        case TokenType.OP_SUBTR_SUBTR_TKN:\r\n            return \"--\";\r\n        case TokenType.OP_SUBTR_EQUALS_TKN:\r\n            return \"-=\";\r\n        case TokenType.OP_MULT_EQUALS_TKN:\r\n            return \"*=\";\r\n        case TokenType.OP_DIV_EQUALS_TKN:\r\n            return \"/=\";\r\n        case TokenType.HASH_RANGE_TKN:\r\n            return \"#range\";\r\n        case TokenType.DOUBLE_QUOTE_TKN:\r\n            return '\"';\r\n        case TokenType.DOT_TKN:\r\n            return \".\";\r\n        case TokenType.ELLIPSIS_TKN:\r\n            return \"...\";\r\n        case TokenType.REVERSE_ARROW_TKN:\r\n            return \"<-\";\r\n        case TokenType.COMMA_TKN:\r\n            return \",\";\r\n        case TokenType.SEMI_COLON_TKN:\r\n            return \";\";\r\n        default:\r\n            return TokenType[tokenType];\r\n    }\r\n}\r\nvar TokenType;\r\n(function (TokenType) {\r\n    TokenType[TokenType[\"IDENTIFIER_TKN\"] = 0] = \"IDENTIFIER_TKN\";\r\n    TokenType[TokenType[\"COLON_TKN\"] = 1] = \"COLON_TKN\";\r\n    TokenType[TokenType[\"NUMERIC_LITERAL_TKN\"] = 2] = \"NUMERIC_LITERAL_TKN\";\r\n    TokenType[TokenType[\"STRING_LITERAL_TKN\"] = 3] = \"STRING_LITERAL_TKN\";\r\n    TokenType[TokenType[\"ASSIGNMENT_TKN\"] = 4] = \"ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"CONST_ASSIGNMENT_TKN\"] = 5] = \"CONST_ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"MUTABLE_ASSIGNMENT_TKN\"] = 6] = \"MUTABLE_ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"LEFT_CURLY_TKN\"] = 7] = \"LEFT_CURLY_TKN\";\r\n    TokenType[TokenType[\"RIGHT_CURLY_TKN\"] = 8] = \"RIGHT_CURLY_TKN\";\r\n    TokenType[TokenType[\"LEFT_SQUARE_TKN\"] = 9] = \"LEFT_SQUARE_TKN\";\r\n    TokenType[TokenType[\"RIGHT_SQUARE_TKN\"] = 10] = \"RIGHT_SQUARE_TKN\";\r\n    TokenType[TokenType[\"LEFT_PARENS_TKN\"] = 11] = \"LEFT_PARENS_TKN\";\r\n    TokenType[TokenType[\"RIGHT_PARENS_TKN\"] = 12] = \"RIGHT_PARENS_TKN\";\r\n    TokenType[TokenType[\"TYPE_TKN\"] = 13] = \"TYPE_TKN\";\r\n    TokenType[TokenType[\"MODULE_TKN\"] = 14] = \"MODULE_TKN\";\r\n    TokenType[TokenType[\"WITH_TKN\"] = 15] = \"WITH_TKN\";\r\n    TokenType[TokenType[\"IF_TKN\"] = 16] = \"IF_TKN\";\r\n    TokenType[TokenType[\"ELSE_TKN\"] = 17] = \"ELSE_TKN\";\r\n    TokenType[TokenType[\"WHILE_TKN\"] = 18] = \"WHILE_TKN\";\r\n    TokenType[TokenType[\"FOR_TKN\"] = 19] = \"FOR_TKN\";\r\n    TokenType[TokenType[\"IN_TKN\"] = 20] = \"IN_TKN\";\r\n    TokenType[TokenType[\"BREAK_TKN\"] = 21] = \"BREAK_TKN\";\r\n    TokenType[TokenType[\"CONTINUE_TKN\"] = 22] = \"CONTINUE_TKN\";\r\n    TokenType[TokenType[\"OPERATOR_TKN\"] = 23] = \"OPERATOR_TKN\";\r\n    TokenType[TokenType[\"COND_OR_TKN\"] = 24] = \"COND_OR_TKN\";\r\n    TokenType[TokenType[\"COND_AND_TKN\"] = 25] = \"COND_AND_TKN\";\r\n    TokenType[TokenType[\"COND_XOR_TKN\"] = 26] = \"COND_XOR_TKN\";\r\n    TokenType[TokenType[\"COND_NOT_TKN\"] = 27] = \"COND_NOT_TKN\";\r\n    TokenType[TokenType[\"COND_EQUALS_TKN\"] = 28] = \"COND_EQUALS_TKN\";\r\n    TokenType[TokenType[\"COND_NOT_EQUALS_TKN\"] = 29] = \"COND_NOT_EQUALS_TKN\";\r\n    TokenType[TokenType[\"COND_LESS_THAN_TKN\"] = 30] = \"COND_LESS_THAN_TKN\";\r\n    TokenType[TokenType[\"COND_LESS_THAN_EQUAL_TKN\"] = 31] = \"COND_LESS_THAN_EQUAL_TKN\";\r\n    TokenType[TokenType[\"COND_GREATER_THAN_TKN\"] = 32] = \"COND_GREATER_THAN_TKN\";\r\n    TokenType[TokenType[\"COND_GREATER_THAN_EQUAL_TKN\"] = 33] = \"COND_GREATER_THAN_EQUAL_TKN\";\r\n    TokenType[TokenType[\"COND_TRUE_TKN\"] = 34] = \"COND_TRUE_TKN\";\r\n    TokenType[TokenType[\"COND_FALSE_TKN\"] = 35] = \"COND_FALSE_TKN\";\r\n    TokenType[TokenType[\"VOID_TYPE_TKN\"] = 36] = \"VOID_TYPE_TKN\";\r\n    TokenType[TokenType[\"NUM_TYPE_TKN\"] = 37] = \"NUM_TYPE_TKN\";\r\n    TokenType[TokenType[\"STRING_TYPE_TKN\"] = 38] = \"STRING_TYPE_TKN\";\r\n    TokenType[TokenType[\"BOOL_TYPE_TKN\"] = 39] = \"BOOL_TYPE_TKN\";\r\n    TokenType[TokenType[\"BIN_OR_TKN\"] = 40] = \"BIN_OR_TKN\";\r\n    TokenType[TokenType[\"BIN_AND_TKN\"] = 41] = \"BIN_AND_TKN\";\r\n    TokenType[TokenType[\"BIN_XOR_TKN\"] = 42] = \"BIN_XOR_TKN\";\r\n    TokenType[TokenType[\"BIN_NOT_TKN\"] = 43] = \"BIN_NOT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_RIGHT_TKN\"] = 44] = \"BIN_SHIFT_RIGHT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_ARITHMETIC_RIGHT_TKN\"] = 45] = \"BIN_SHIFT_ARITHMETIC_RIGHT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_LEFT_TKN\"] = 46] = \"BIN_SHIFT_LEFT_TKN\";\r\n    TokenType[TokenType[\"ARROW_TKN\"] = 47] = \"ARROW_TKN\";\r\n    TokenType[TokenType[\"RETURN_TKN\"] = 48] = \"RETURN_TKN\";\r\n    TokenType[TokenType[\"BACKSLASH_TKN\"] = 49] = \"BACKSLASH_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_TKN\"] = 50] = \"OP_ADD_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_TKN\"] = 51] = \"OP_SUBTR_TKN\";\r\n    TokenType[TokenType[\"OP_MULT_TKN\"] = 52] = \"OP_MULT_TKN\";\r\n    TokenType[TokenType[\"OP_DIVIDE_TKN\"] = 53] = \"OP_DIVIDE_TKN\";\r\n    TokenType[TokenType[\"OP_CARROT_TKN\"] = 54] = \"OP_CARROT_TKN\";\r\n    TokenType[TokenType[\"OP_MODULUS_TKN\"] = 55] = \"OP_MODULUS_TKN\";\r\n    TokenType[TokenType[\"OP_BAR_TKN\"] = 56] = \"OP_BAR_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_ADD_TKN\"] = 57] = \"OP_ADD_ADD_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_EQUALS_TKN\"] = 58] = \"OP_ADD_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_SUBTR_TKN\"] = 59] = \"OP_SUBTR_SUBTR_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_EQUALS_TKN\"] = 60] = \"OP_SUBTR_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_MULT_EQUALS_TKN\"] = 61] = \"OP_MULT_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_DIV_EQUALS_TKN\"] = 62] = \"OP_DIV_EQUALS_TKN\";\r\n    TokenType[TokenType[\"HASH_RANGE_TKN\"] = 63] = \"HASH_RANGE_TKN\";\r\n    TokenType[TokenType[\"DOUBLE_QUOTE_TKN\"] = 64] = \"DOUBLE_QUOTE_TKN\";\r\n    TokenType[TokenType[\"DOT_TKN\"] = 65] = \"DOT_TKN\";\r\n    TokenType[TokenType[\"ELLIPSIS_TKN\"] = 66] = \"ELLIPSIS_TKN\";\r\n    TokenType[TokenType[\"REVERSE_ARROW_TKN\"] = 67] = \"REVERSE_ARROW_TKN\";\r\n    TokenType[TokenType[\"COMMA_TKN\"] = 68] = \"COMMA_TKN\";\r\n    TokenType[TokenType[\"SEMI_COLON_TKN\"] = 69] = \"SEMI_COLON_TKN\";\r\n    TokenType[TokenType[\"UNKNOWN_TKN\"] = 70] = \"UNKNOWN_TKN\";\r\n    TokenType[TokenType[\"END_TKN\"] = 71] = \"END_TKN\";\r\n})(TokenType || (TokenType = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Token.ts\n");

/***/ }),

/***/ "./src/scuft/lang/TypeChecker.ts":
/*!***************************************!*\
  !*** ./src/scuft/lang/TypeChecker.ts ***!
  \***************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ TypeChecker\n/* harmony export */ });\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _ErrorHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ErrorHandler */ \"./src/scuft/lang/ErrorHandler.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n\r\n\r\n\r\nclass TypeChecker {\r\n    constructor(globalScope, errHandler) {\r\n        this.typeOfNameStack = [];\r\n        this.typeCheckTypeConstructStack = [];\r\n        this.globalScope = globalScope;\r\n        this.err = _ErrorHandler__WEBPACK_IMPORTED_MODULE_1__.ErrorHandler.fromHandler(\"----TypeChecker----\\n\", errHandler);\r\n    }\r\n    resolveTypeExpression(typeExpr, scope) {\r\n        switch (typeExpr.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL:\r\n                return typeExpr;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION_TYPE:\r\n                let astFunc = typeExpr;\r\n                astFunc.outType = this.resolveTypeExpression(astFunc.outType, scope);\r\n                for (let i = 0; i < astFunc.inputType.length; i++) {\r\n                    astFunc.inputType[i] = this.resolveTypeExpression(astFunc.inputType[i], scope);\r\n                }\r\n                return astFunc;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME:\r\n                let astName = typeExpr;\r\n                let nameDeclaration = scope.searchVariableDeclaration(astName);\r\n                if (nameDeclaration) {\r\n                    if (nameDeclaration.rvalue) {\r\n                        if (nameDeclaration.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF) {\r\n                            return astName;\r\n                        }\r\n                        else {\r\n                            throw \"Unimplemented: Need to recurse to find correct type name\";\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw \"Type couldn't be found from name\";\r\n                    }\r\n                }\r\n                else {\r\n                    this.err.atNode_PANIC(\"Couldn't find variable with name '\" + astName.refName + \"'\", astName);\r\n                }\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.CALL:\r\n                throw \"Evaluate the value of the call at run time, For example: a: getNumType() = 3\";\r\n            default:\r\n                throw \"Type expression was expected but not received\";\r\n        }\r\n    }\r\n    isTypeEqual(t0, t1, scope) {\r\n        if (t0.nodeName !== t1.nodeName)\r\n            return false;\r\n        switch (t0.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL:\r\n                let typeLit0 = t0;\r\n                let typeLit1 = t1;\r\n                return typeLit0.type.isTokenTypeEqual(typeLit1.type);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION_TYPE:\r\n                let func0 = t0;\r\n                let func1 = t1;\r\n                let funcO0 = this.resolveTypeExpression(func0.outType, scope);\r\n                let funcO1 = this.resolveTypeExpression(func1.outType, scope);\r\n                if (!this.isTypeEqual(funcO0, funcO1, scope))\r\n                    return false;\r\n                for (let i = 0; i < func0.inputType.length; i++) {\r\n                    let funcI0 = this.resolveTypeExpression(func0.inputType[i], scope);\r\n                    let funcI1 = this.resolveTypeExpression(func1.inputType[i], scope);\r\n                    if (!this.isTypeEqual(funcI0, funcI1, scope))\r\n                        return false;\r\n                }\r\n                return true;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME:\r\n                let name0 = t0;\r\n                let name1 = t1;\r\n                return name0.refName === name1.refName;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.DOT_OP:\r\n                let dot0 = t0;\r\n                let dot1 = t1;\r\n                return false;\r\n            default:\r\n                throw \"This is an impossible case\";\r\n        }\r\n    }\r\n    isEqualToType(type, typeLiteral) {\r\n        if (type.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL)\r\n            return false;\r\n        return type.type.type === typeLiteral;\r\n    }\r\n    typeOfExpression(expr, scope) {\r\n        switch (expr.nodeName) {\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_LITERAL:\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION_TYPE:\r\n                return _Ast__WEBPACK_IMPORTED_MODULE_0__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.TYPE_TKN, expr.locToken);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.MODULE:\r\n                return _Ast__WEBPACK_IMPORTED_MODULE_0__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.MODULE_TKN, expr.locToken);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF:\r\n                this.typeCheckTypeDefinition(expr);\r\n                return _Ast__WEBPACK_IMPORTED_MODULE_0__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.TYPE_TKN, expr.locToken);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION:\r\n                let astFunc = expr;\r\n                let funcType = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFunctionType(astFunc.locToken);\r\n                funcType.inputType = [];\r\n                for (let i = 0; i < astFunc.paramDeclaration.length; i++) {\r\n                    this.typeCheckDeclaration(astFunc.paramDeclaration[i]);\r\n                    funcType.inputType.push(astFunc.paramDeclaration[i].resolvedType);\r\n                }\r\n                funcType.outType = this.resolveTypeExpression(astFunc.returnType, scope);\r\n                this.typeCheckBlock(astFunc.block);\r\n                return funcType;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME:\r\n                return this.typeOfName(expr, scope);\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.DOT_OP:\r\n                throw \"Cry... ;-; (Dot operator not yet implemented)\";\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.CALL:\r\n                let astCall = expr;\r\n                let paramTypes = [];\r\n                for (let i = 0; i < astCall.givenParams.length; i++) {\r\n                    paramTypes.push(this.typeOfExpression(astCall.givenParams[i], scope));\r\n                }\r\n                let outType = this.getFunctionDeclaration(astCall.functionNameRef, paramTypes, scope);\r\n                if (outType) {\r\n                    return this.resolveTypeExpression(outType.outType, scope);\r\n                }\r\n                throw \"Unimplemented call, can't get type of call yet\";\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_CONSTRUCT:\r\n                let astTypeCons = expr;\r\n                this.typeCheckTypeConstruction(astTypeCons, scope);\r\n                return astTypeCons.typeRef;\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.LITERAL:\r\n                let astLiteral = expr;\r\n                switch (astLiteral.value.type) {\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.NUMERIC_LITERAL_TKN:\r\n                        return _Ast__WEBPACK_IMPORTED_MODULE_0__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.NUM_TYPE_TKN, expr.locToken);\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.STRING_LITERAL_TKN:\r\n                        return _Ast__WEBPACK_IMPORTED_MODULE_0__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.STRING_TYPE_TKN, expr.locToken);\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_TRUE_TKN:\r\n                    case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_FALSE_TKN:\r\n                        return _Ast__WEBPACK_IMPORTED_MODULE_0__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BOOL_TYPE_TKN, expr.locToken);\r\n                    default:\r\n                        throw \"The ASTLiteral does not contain a literal token\";\r\n                }\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.UNARY_OP:\r\n                let astUnary = expr;\r\n                let unaryOp = astUnary.operation.type;\r\n                if (unaryOp == _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BIN_NOT_TKN) {\r\n                    let numType = _Ast__WEBPACK_IMPORTED_MODULE_0__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.NUM_TYPE_TKN, expr.locToken);\r\n                    if (this.isTypeEqual(this.typeOfExpression(astUnary.value, scope), numType, scope)) {\r\n                        return numType;\r\n                    }\r\n                    throw \"operator is acting on not an integer\";\r\n                }\r\n                else if (unaryOp == _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_NOT_TKN) {\r\n                    let boolType = _Ast__WEBPACK_IMPORTED_MODULE_0__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BOOL_TYPE_TKN, expr.locToken);\r\n                    if (this.isTypeEqual(this.typeOfExpression(astUnary.value, scope), boolType, scope)) {\r\n                        return boolType;\r\n                    }\r\n                    throw \"operator is acting on not a boolean\";\r\n                }\r\n                else {\r\n                    throw \"operator doesn't exist\";\r\n                }\r\n            case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.BINARY_OP:\r\n                return this.typeOfBinaryOperator(expr, scope);\r\n            default:\r\n                throw \"You done fucked up\";\r\n        }\r\n    }\r\n    typeOfName(exprName, scope) {\r\n        let nameDecl = scope.searchVariableDeclaration(exprName);\r\n        if (nameDecl) {\r\n            if (nameDecl.rvalue) {\r\n                if (nameDecl.rvalue.nodeName === _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF) {\r\n                    return _Ast__WEBPACK_IMPORTED_MODULE_0__.newTypeLiteralNode(_Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.TYPE_TKN, exprName.locToken);\r\n                }\r\n                else {\r\n                    for (let i = this.typeOfNameStack.length - 1; i >= 0; i--) {\r\n                        if (exprName.locToken.equals(this.typeOfNameStack[i].locToken)) {\r\n                            this.err.atNode(\"Cyclic dependency found when type checking the following\", exprName);\r\n                            for (let j = i + 1; j < this.typeOfNameStack.length; j++) {\r\n                                this.err.atNode(\"...which led to type checking the following\", this.typeOfNameStack[j]);\r\n                            }\r\n                            this.err.panic();\r\n                        }\r\n                    }\r\n                    this.typeOfNameStack.push(exprName);\r\n                    let typeOfRVal = this.typeOfExpression(nameDecl.rvalue, scope);\r\n                    this.typeOfNameStack = [];\r\n                    return typeOfRVal;\r\n                }\r\n            }\r\n            else {\r\n                this.typeCheckDeclaration(nameDecl);\r\n                return nameDecl.resolvedType;\r\n            }\r\n        }\r\n        else {\r\n            this.err.atNode_PANIC(\"Couldn't find variable with name '\" + exprName.refName + \"'\", exprName);\r\n        }\r\n    }\r\n    getFunctionDeclaration(funcRef, parameterTypes, scope) {\r\n        if (funcRef.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.NAME)\r\n            throw \"have not implemented general function call yet\";\r\n        let funcName = funcRef;\r\n        let currentScopeDeclarations = scope.getDeclarations(funcName);\r\n        for (let i = 0; i < currentScopeDeclarations.length; i++) {\r\n            if (currentScopeDeclarations[i].rvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.FUNCTION) {\r\n                throw \"declaration name doesn't refer to a function\";\r\n            }\r\n            this.typeCheckDeclaration(currentScopeDeclarations[i]);\r\n            let funcSig = currentScopeDeclarations[i].resolvedType;\r\n            if (parameterTypes.length !== funcSig.inputType.length) {\r\n                continue;\r\n            }\r\n            for (let j = 0; j < funcSig.inputType.length; j++) {\r\n                let declParamType = this.resolveTypeExpression(funcSig.inputType[j], scope);\r\n                if (!this.isTypeEqual(parameterTypes[j], declParamType, scope))\r\n                    break;\r\n                if (j + 1 == funcSig.inputType.length)\r\n                    return funcSig;\r\n            }\r\n        }\r\n        if (scope.parent)\r\n            return this.getFunctionDeclaration(funcRef, parameterTypes, scope.parent);\r\n        this.err.atNode_PANIC(\"Function not declared anywhere!!!!\", funcRef);\r\n    }\r\n    typeOfBinaryOperator(binaryOp, scope) {\r\n        let lType = this.typeOfExpression(binaryOp.lvalue, scope);\r\n        let rType = this.typeOfExpression(binaryOp.rvalue, scope);\r\n        let overloads = this.globalScope.getOperatorOverload(binaryOp.operation.type);\r\n        if (overloads) {\r\n            for (let i = 0; i < overloads.length; i++) {\r\n                if (overloads[i].paramDeclaration.length !== 2) {\r\n                    this.err.atNode_PANIC(\"Binary operator overload must have exactly 2 parameters\", overloads[i]);\r\n                }\r\n                if (!overloads[i].returnType) {\r\n                    this.err.atNode_PANIC(\"Binary operator overload must have a return type\", overloads[i]);\r\n                }\r\n                else if (this.isEqualToType(this.resolveTypeExpression(overloads[i].returnType, scope), _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.VOID_TYPE_TKN)) {\r\n                    this.err.atNode_PANIC(\"Binary operator overload can't have a void return type\", overloads[i].returnType);\r\n                }\r\n                this.typeCheckDeclaration(overloads[i].paramDeclaration[0]);\r\n                if (this.isTypeEqual(lType, overloads[i].paramDeclaration[0].resolvedType, scope)) {\r\n                    this.typeCheckDeclaration(overloads[i].paramDeclaration[1]);\r\n                    if (this.isTypeEqual(rType, overloads[i].paramDeclaration[1].resolvedType, scope)) {\r\n                        return this.resolveTypeExpression(overloads[i].returnType, scope);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        switch (binaryOp.operation.type) {\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_OR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_AND_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_XOR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_EQUALS_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_NOT_EQUALS_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_LESS_THAN_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_LESS_THAN_EQUAL_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_GREATER_THAN_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.COND_GREATER_THAN_EQUAL_TKN:\r\n                if (this.isEqualToType(lType, _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BOOL_TYPE_TKN)) {\r\n                    if (this.isEqualToType(rType, _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BOOL_TYPE_TKN)) {\r\n                        return lType;\r\n                    }\r\n                    else {\r\n                        this.err.atNode_PANIC(\"Right hand side of binary operator expected to be of type bool but got \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(rType) +\r\n                            \" instead\", rType);\r\n                    }\r\n                }\r\n                else {\r\n                    this.err.atNode_PANIC(\"Left hand side of binary operator expected to be of type bool but got \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(rType) +\r\n                        \" instead\", lType);\r\n                }\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BIN_OR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BIN_AND_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BIN_XOR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BIN_SHIFT_RIGHT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BIN_SHIFT_ARITHMETIC_RIGHT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.BIN_SHIFT_LEFT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.OP_ADD_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.OP_SUBTR_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.OP_MULT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.OP_DIVIDE_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.OP_CARROT_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.OP_MODULUS_TKN:\r\n            case _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.OP_SUBTR_TKN:\r\n                if (this.isEqualToType(lType, _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.NUM_TYPE_TKN)) {\r\n                    if (this.isEqualToType(rType, _Token__WEBPACK_IMPORTED_MODULE_2__.TokenType.NUM_TYPE_TKN)) {\r\n                        return lType;\r\n                    }\r\n                    else {\r\n                        this.err.atNode_PANIC(\"Right hand side of binary operator expected to be of type num but got \" +\r\n                            _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(rType) +\r\n                            \" instead\", rType);\r\n                    }\r\n                }\r\n                else {\r\n                    this.err.atNode_PANIC(\"Left hand side of binary operator expected to be of type num but got \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(rType) +\r\n                        \" instead\", lType);\r\n                }\r\n            default:\r\n                throw \"Unknown binary operator\";\r\n        }\r\n    }\r\n    typeCheckProgram(prgm) {\r\n        for (let i = 0; i < prgm.declarations.length; i++) {\r\n            this.typeCheckDeclaration(prgm.declarations[i]);\r\n        }\r\n    }\r\n    typeCheckBlock(block) {\r\n        for (let i = 0; i < block.withModules.length; i++) {\r\n        }\r\n        for (let i = 0; i < block.statements.length; i++) {\r\n            let statement = block.statements[i];\r\n            switch (statement.nodeName) {\r\n                case _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.DECLARATION:\r\n                    this.typeCheckDeclaration(statement);\r\n                    break;\r\n                default:\r\n                    throw \"Unimplemented type checking in block\";\r\n            }\r\n        }\r\n    }\r\n    typeCheckDeclaration(decl) {\r\n        if (decl.resolvedType)\r\n            return;\r\n        if (decl.rvalue) {\r\n            let expressionType = this.typeOfExpression(decl.rvalue, decl.inScope);\r\n            if (!decl.type) {\r\n                decl.resolvedType = expressionType;\r\n            }\r\n            else {\r\n                decl.resolvedType = this.resolveTypeExpression(decl.type, decl.inScope);\r\n                if (!this.isTypeEqual(expressionType, decl.resolvedType, decl.inScope)) {\r\n                    this.err\r\n                        .atNode(\"Type mismatch between declared type and expression type. The inferred declare type is \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(decl.resolvedType), decl.type)\r\n                        .atNode_PANIC(\"The inferred type of the expression is \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(expressionType), decl.rvalue);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            decl.resolvedType = this.resolveTypeExpression(decl.type, decl.inScope);\r\n        }\r\n    }\r\n    typeCheckTypeDefinition(typeDefinition) {\r\n        for (let i = 0; i < typeDefinition.declarations.length; i++) {\r\n            this.typeCheckDeclaration(typeDefinition.declarations[i]);\r\n        }\r\n    }\r\n    typeCheckTypeConstruction(typeConstruct, scope) {\r\n        let typeConsAssignments = typeConstruct.assignments;\r\n        let typeDefDecl = scope.searchVariableDeclaration(typeConstruct.typeRef);\r\n        if (!typeDefDecl || typeDefDecl.rvalue.nodeName !== _Ast__WEBPACK_IMPORTED_MODULE_0__.NodeType.TYPE_DEF) {\r\n            this.err.atNode_PANIC(\"Couldn't find type name '\" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(typeConstruct.typeRef) + \"'\", typeConstruct);\r\n        }\r\n        for (let i = this.typeCheckTypeConstructStack.length - 1; i >= 0; i--) {\r\n            if (typeConstruct.locToken.equals(this.typeCheckTypeConstructStack[i].locToken)) {\r\n                this.err.atNode(\"Recursive type definition found when type checking the following\", typeConstruct);\r\n                for (let j = i + 1; j < this.typeCheckTypeConstructStack.length; j++) {\r\n                    this.err.atNode(\"...which leads to the creation of the following\", this.typeCheckTypeConstructStack[j]);\r\n                }\r\n                this.err.panic();\r\n            }\r\n        }\r\n        this.typeCheckTypeConstructStack.push(typeConstruct);\r\n        this.typeCheckTypeConstructStack.push(typeDefDecl);\r\n        this.typeCheckDeclaration(typeDefDecl);\r\n        this.typeCheckTypeConstructStack = [];\r\n        for (let i = 0; i < typeConsAssignments.length; i++) {\r\n            typeConsAssignments[i].resolvedType = this.typeOfExpression(typeConsAssignments[i].rvalue, scope);\r\n            let assignmentVarName = typeConsAssignments[i].lvalue.refName;\r\n            let typeDef = typeDefDecl.rvalue;\r\n            let typeVarDecl = undefined;\r\n            for (let j = 0; j < typeDef.declarations.length; j++) {\r\n                if (typeDef.declarations[j].lvalue.refName === assignmentVarName) {\r\n                    typeVarDecl = typeDef.declarations[j];\r\n                    break;\r\n                }\r\n            }\r\n            if (typeVarDecl) {\r\n                if (!this.isTypeEqual(typeConsAssignments[i].resolvedType, typeVarDecl.resolvedType, scope)) {\r\n                    this.err\r\n                        .atNode(\"Error in type construction\", typeConstruct)\r\n                        .atNode(\"Variable assignment with inferred type of \" +\r\n                        _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(typeConsAssignments[i].resolvedType), typeConsAssignments[i])\r\n                        .atNode_PANIC(\"...is incompatible with expected type of \" + _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(typeVarDecl.resolvedType), typeVarDecl);\r\n                }\r\n            }\r\n            else {\r\n                this.err\r\n                    .atNode(\"Error in type construction\", typeConstruct)\r\n                    .atNode_PANIC(\"Property name '\" +\r\n                    assignmentVarName +\r\n                    \"' does not exist in type '\" +\r\n                    _Ast__WEBPACK_IMPORTED_MODULE_0__.exprToStr(typeDefDecl.lvalue) +\r\n                    \"'\", typeConsAssignments[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/TypeChecker.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/main.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;