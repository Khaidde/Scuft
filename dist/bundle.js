/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scuft/test/5-ModuleTypeDefinitionTest.scft":
/*!********************************************************!*\
  !*** ./src/scuft/test/5-ModuleTypeDefinitionTest.scft ***!
  \********************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"type Point {\\r\\n    x: num;\\r\\n    y: num;\\r\\n    z: num;\\r\\n}\\r\\n\\r\\ntype Particle {\\r\\n    point: Point;\\r\\n    existence: bool = true;\\r\\n    glowing: bool;\\r\\n    name: string;\\r\\n    message = \\\"facets\\\";\\r\\n}\\r\\n\\r\\nmodule test {\\r\\n    x: num = 4;\\r\\n    add = (a: num, b: num) -> num {\\r\\n        return a + b;\\r\\n    }\\r\\n    booolerrr: (bool, bool, num, num) -> bool = (a.TODO_LOOK.AT_THIS: bool, b: bool, x: Astrology.Star, y: num) -> bool {\\r\\n        d = x > y $$ a && b || (a || b);\\r\\n\\r\\n        for i in [0, 10) {\\r\\n            //0...9\\r\\n            break;\\r\\n        }\\r\\n        for i in (0, 10) {\\r\\n            //1...9\\r\\n\\r\\n            continue;\\r\\n            break;\\r\\n        }\\r\\n        for i in (0, 10] {\\r\\n            //1...10\\r\\n        }\\r\\n        for i in [0, 10] {\\r\\n            //1...10\\r\\n            construct = 3 + Astrology.Star.Proton{ intersting = true, notInteresting = false }; \\r\\n            test.thing.x = new * 3 - particle.pos.x + 2;\\r\\n            thingyVar.that.this.random.bar(cool, 3);\\r\\n        }\\r\\n        for list {\\r\\n\\r\\n        }\\r\\n        for item in Astrology.starArray {\\r\\n\\r\\n        }\\r\\n        for item,index in array {\\r\\n\\r\\n        }\\r\\n        return d;\\r\\n    }\\r\\n    type Vector4 {\\r\\n        w: num;\\r\\n        x: num;\\r\\n        y: num;\\r\\n        z: num;\\r\\n    }\\r\\n    combine = (a: Vector4, b: Vector4) -> Vector4 {\\r\\n        return a + b;\\r\\n    }\\r\\n}\\r\\n\\r\\nmodule Astrology {\\r\\n    stars = 5000;\\r\\n    ageOfUniverse = 6000;\\r\\n    findDate = (a: num) -> num {\\r\\n        return ageOfUniverse;\\r\\n    }\\r\\n    type Constellation {\\r\\n        name: string;\\r\\n        starsCount: num;\\r\\n        isItGood: bool;\\r\\n        interpretation: string;\\r\\n    }\\r\\n    meaning = (a: Constellation) -> Constellation {\\r\\n        nothing = Constellation {\\r\\n            name = \\\"nothing\\\",\\r\\n            starsCount = 3 + func(3, 4 + 5) + 5\\r\\n        };\\r\\n        while 3 < 2  {\\r\\n            if 3 < 4 {\\r\\n                return \\\"thisOrThat\\\";\\r\\n            } else if 3 != 4 {\\r\\n                d = 90;\\r\\n                return d;\\r\\n            } else {\\r\\n                return \\\"k\\\";\\r\\n            }\\r\\n        }\\r\\n        return nothing;\\r\\n    }\\r\\n}\\r\\n\\r\\nmain = () -> number {\\r\\n    with Astrology;\\r\\n    with test;\\r\\n    a: Point;\\r\\n    b: constellation;\\r\\n    q = meaning(b);\\r\\n    l: Vector4;\\r\\n    l': Vector4;\\r\\n    dl = combine(l, -l');\\r\\n    return;\\r\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC90ZXN0LzUtTW9kdWxlVHlwZURlZmluaXRpb25UZXN0LnNjZnQ/ZmU5MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsYUFBYSxlQUFlLGVBQWUsZUFBZSxLQUFLLHVCQUF1QixxQkFBcUIsK0JBQStCLHNCQUFzQixxQkFBcUIsNkJBQTZCLEtBQUsscUJBQXFCLG1CQUFtQix1Q0FBdUMseUJBQXlCLFNBQVMsNkhBQTZILDRDQUE0QyxrQ0FBa0MsNkNBQTZDLGFBQWEsOEJBQThCLG9EQUFvRCxzQkFBc0IsYUFBYSw4QkFBOEIscUNBQXFDLDhCQUE4Qiw4RUFBOEUsNkNBQTZDLDZEQUE2RCx3REFBd0QsYUFBYSxzQkFBc0IsaUJBQWlCLDZDQUE2QyxpQkFBaUIscUNBQXFDLGlCQUFpQixxQkFBcUIsU0FBUyxzQkFBc0IsbUJBQW1CLG1CQUFtQixtQkFBbUIsbUJBQW1CLFNBQVMsdURBQXVELHlCQUF5QixTQUFTLEtBQUssMEJBQTBCLHFCQUFxQiw2QkFBNkIsb0NBQW9DLGlDQUFpQyxTQUFTLDRCQUE0Qix5QkFBeUIsNEJBQTRCLDJCQUEyQixtQ0FBbUMsU0FBUyx1REFBdUQscUNBQXFDLG9HQUFvRywwQkFBMEIsMEJBQTBCLDBDQUEwQyxpQkFBaUIsaUJBQWlCLDJCQUEyQiw2QkFBNkIsaUJBQWlCLE9BQU8saUNBQWlDLGlCQUFpQixhQUFhLDJCQUEyQixTQUFTLEtBQUssNkJBQTZCLHVCQUF1QixrQkFBa0IsaUJBQWlCLHlCQUF5Qix1QkFBdUIsbUJBQW1CLG9CQUFvQiw2QkFBNkIsZUFBZSxLQUFLLENBQUMiLCJmaWxlIjoiLi9zcmMvc2N1ZnQvdGVzdC81LU1vZHVsZVR5cGVEZWZpbml0aW9uVGVzdC5zY2Z0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJ0eXBlIFBvaW50IHtcXHJcXG4gICAgeDogbnVtO1xcclxcbiAgICB5OiBudW07XFxyXFxuICAgIHo6IG51bTtcXHJcXG59XFxyXFxuXFxyXFxudHlwZSBQYXJ0aWNsZSB7XFxyXFxuICAgIHBvaW50OiBQb2ludDtcXHJcXG4gICAgZXhpc3RlbmNlOiBib29sID0gdHJ1ZTtcXHJcXG4gICAgZ2xvd2luZzogYm9vbDtcXHJcXG4gICAgbmFtZTogc3RyaW5nO1xcclxcbiAgICBtZXNzYWdlID0gXFxcImZhY2V0c1xcXCI7XFxyXFxufVxcclxcblxcclxcbm1vZHVsZSB0ZXN0IHtcXHJcXG4gICAgeDogbnVtID0gNDtcXHJcXG4gICAgYWRkID0gKGE6IG51bSwgYjogbnVtKSAtPiBudW0ge1xcclxcbiAgICAgICAgcmV0dXJuIGEgKyBiO1xcclxcbiAgICB9XFxyXFxuICAgIGJvb29sZXJycjogKGJvb2wsIGJvb2wsIG51bSwgbnVtKSAtPiBib29sID0gKGEuVE9ET19MT09LLkFUX1RISVM6IGJvb2wsIGI6IGJvb2wsIHg6IEFzdHJvbG9neS5TdGFyLCB5OiBudW0pIC0+IGJvb2wge1xcclxcbiAgICAgICAgZCA9IHggPiB5ICQkIGEgJiYgYiB8fCAoYSB8fCBiKTtcXHJcXG5cXHJcXG4gICAgICAgIGZvciBpIGluIFswLCAxMCkge1xcclxcbiAgICAgICAgICAgIC8vMC4uLjlcXHJcXG4gICAgICAgICAgICBicmVhaztcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIGZvciBpIGluICgwLCAxMCkge1xcclxcbiAgICAgICAgICAgIC8vMS4uLjlcXHJcXG5cXHJcXG4gICAgICAgICAgICBjb250aW51ZTtcXHJcXG4gICAgICAgICAgICBicmVhaztcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIGZvciBpIGluICgwLCAxMF0ge1xcclxcbiAgICAgICAgICAgIC8vMS4uLjEwXFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBmb3IgaSBpbiBbMCwgMTBdIHtcXHJcXG4gICAgICAgICAgICAvLzEuLi4xMFxcclxcbiAgICAgICAgICAgIGNvbnN0cnVjdCA9IDMgKyBBc3Ryb2xvZ3kuU3Rhci5Qcm90b257IGludGVyc3RpbmcgPSB0cnVlLCBub3RJbnRlcmVzdGluZyA9IGZhbHNlIH07IFxcclxcbiAgICAgICAgICAgIHRlc3QudGhpbmcueCA9IG5ldyAqIDMgLSBwYXJ0aWNsZS5wb3MueCArIDI7XFxyXFxuICAgICAgICAgICAgdGhpbmd5VmFyLnRoYXQudGhpcy5yYW5kb20uYmFyKGNvb2wsIDMpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgZm9yIGxpc3Qge1xcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgZm9yIGl0ZW0gaW4gQXN0cm9sb2d5LnN0YXJBcnJheSB7XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBmb3IgaXRlbSxpbmRleCBpbiBhcnJheSB7XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICByZXR1cm4gZDtcXHJcXG4gICAgfVxcclxcbiAgICB0eXBlIFZlY3RvcjQge1xcclxcbiAgICAgICAgdzogbnVtO1xcclxcbiAgICAgICAgeDogbnVtO1xcclxcbiAgICAgICAgeTogbnVtO1xcclxcbiAgICAgICAgejogbnVtO1xcclxcbiAgICB9XFxyXFxuICAgIGNvbWJpbmUgPSAoYTogVmVjdG9yNCwgYjogVmVjdG9yNCkgLT4gVmVjdG9yNCB7XFxyXFxuICAgICAgICByZXR1cm4gYSArIGI7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxubW9kdWxlIEFzdHJvbG9neSB7XFxyXFxuICAgIHN0YXJzID0gNTAwMDtcXHJcXG4gICAgYWdlT2ZVbml2ZXJzZSA9IDYwMDA7XFxyXFxuICAgIGZpbmREYXRlID0gKGE6IG51bSkgLT4gbnVtIHtcXHJcXG4gICAgICAgIHJldHVybiBhZ2VPZlVuaXZlcnNlO1xcclxcbiAgICB9XFxyXFxuICAgIHR5cGUgQ29uc3RlbGxhdGlvbiB7XFxyXFxuICAgICAgICBuYW1lOiBzdHJpbmc7XFxyXFxuICAgICAgICBzdGFyc0NvdW50OiBudW07XFxyXFxuICAgICAgICBpc0l0R29vZDogYm9vbDtcXHJcXG4gICAgICAgIGludGVycHJldGF0aW9uOiBzdHJpbmc7XFxyXFxuICAgIH1cXHJcXG4gICAgbWVhbmluZyA9IChhOiBDb25zdGVsbGF0aW9uKSAtPiBDb25zdGVsbGF0aW9uIHtcXHJcXG4gICAgICAgIG5vdGhpbmcgPSBDb25zdGVsbGF0aW9uIHtcXHJcXG4gICAgICAgICAgICBuYW1lID0gXFxcIm5vdGhpbmdcXFwiLFxcclxcbiAgICAgICAgICAgIHN0YXJzQ291bnQgPSAzICsgZnVuYygzLCA0ICsgNSkgKyA1XFxyXFxuICAgICAgICB9O1xcclxcbiAgICAgICAgd2hpbGUgMyA8IDIgIHtcXHJcXG4gICAgICAgICAgICBpZiAzIDwgNCB7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidGhpc09yVGhhdFxcXCI7XFxyXFxuICAgICAgICAgICAgfSBlbHNlIGlmIDMgIT0gNCB7XFxyXFxuICAgICAgICAgICAgICAgIGQgPSA5MDtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XFxyXFxuICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJrXFxcIjtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICByZXR1cm4gbm90aGluZztcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5tYWluID0gKCkgLT4gbnVtYmVyIHtcXHJcXG4gICAgd2l0aCBBc3Ryb2xvZ3k7XFxyXFxuICAgIHdpdGggdGVzdDtcXHJcXG4gICAgYTogUG9pbnQ7XFxyXFxuICAgIGI6IGNvbnN0ZWxsYXRpb247XFxyXFxuICAgIHEgPSBtZWFuaW5nKGIpO1xcclxcbiAgICBsOiBWZWN0b3I0O1xcclxcbiAgICBsJzogVmVjdG9yNDtcXHJcXG4gICAgZGwgPSBjb21iaW5lKGwsIC1sJyk7XFxyXFxuICAgIHJldHVybjtcXHJcXG59XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scuft/test/5-ModuleTypeDefinitionTest.scft\n");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scuft_lang_ScuftTest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scuft/lang/ScuftTest */ \"./src/scuft/lang/ScuftTest.ts\");\n\r\n_scuft_lang_ScuftTest__WEBPACK_IMPORTED_MODULE_0__.default();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9tYWluLnRzP2NkNDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFbUQ7QUFFbkQsMERBQWlCLEVBQUUsQ0FBQyIsImZpbGUiOiIuL3NyYy9tYWluLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgKiBhcyBFQ1NEZW1vIGZyb20gXCIuL3NjdWZ0L2Vjcy9FQ1NEZW1vXCJcclxuXHJcbmltcG9ydCAqIGFzIFNjdWZ0VGVzdCBmcm9tIFwiLi9zY3VmdC9sYW5nL1NjdWZ0VGVzdFwiXHJcblxyXG5TY3VmdFRlc3QuZGVmYXVsdCgpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Ast.ts":
/*!*******************************!*\
  !*** ./src/scuft/lang/Ast.ts ***!
  \*******************************/
/*! namespace exports */
/*! export ASTBinaryOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTBlock [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTBreak [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTCall [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTContinue [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTDeclaration [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFor [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTFunction [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTIf [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTLiteral [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTMember [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTModule [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTProgram [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTReturn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTType [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeConstruction [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTTypeDefinition [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTUnaryOperator [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ASTWhile [provided] [no usage info] [missing usage info prevents renaming] */
/*! export printAST [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"printAST\": () => /* binding */ printAST,\n/* harmony export */   \"ASTProgram\": () => /* binding */ ASTProgram,\n/* harmony export */   \"ASTModule\": () => /* binding */ ASTModule,\n/* harmony export */   \"ASTTypeDefinition\": () => /* binding */ ASTTypeDefinition,\n/* harmony export */   \"ASTBlock\": () => /* binding */ ASTBlock,\n/* harmony export */   \"ASTDeclaration\": () => /* binding */ ASTDeclaration,\n/* harmony export */   \"ASTType\": () => /* binding */ ASTType,\n/* harmony export */   \"ASTIf\": () => /* binding */ ASTIf,\n/* harmony export */   \"ASTWhile\": () => /* binding */ ASTWhile,\n/* harmony export */   \"ASTFor\": () => /* binding */ ASTFor,\n/* harmony export */   \"ASTBreak\": () => /* binding */ ASTBreak,\n/* harmony export */   \"ASTContinue\": () => /* binding */ ASTContinue,\n/* harmony export */   \"ASTReturn\": () => /* binding */ ASTReturn,\n/* harmony export */   \"ASTFunction\": () => /* binding */ ASTFunction,\n/* harmony export */   \"ASTCall\": () => /* binding */ ASTCall,\n/* harmony export */   \"ASTLiteral\": () => /* binding */ ASTLiteral,\n/* harmony export */   \"ASTMember\": () => /* binding */ ASTMember,\n/* harmony export */   \"ASTTypeConstruction\": () => /* binding */ ASTTypeConstruction,\n/* harmony export */   \"ASTUnaryOperator\": () => /* binding */ ASTUnaryOperator,\n/* harmony export */   \"ASTBinaryOperator\": () => /* binding */ ASTBinaryOperator\n/* harmony export */ });\nvar ASTFmt;\r\n(function (ASTFmt) {\r\n    ASTFmt[\"DEFAULT_FMT\"] = \"color: #777;\";\r\n    ASTFmt[\"NODE_FMT\"] = \"color: #C792DE\";\r\n    ASTFmt[\"TYPE_FMT\"] = \"color: #FFEB95\";\r\n    ASTFmt[\"IDENTIFIER_FMT\"] = \"color: #348DFF\";\r\n    ASTFmt[\"EXPRESSION_FMT\"] = \"color: #E98C6C\";\r\n    ASTFmt[\"FUNCTION_CALL_FMT\"] = \"color: #AD2836\";\r\n    ASTFmt[\"WITH_MODULE_FMT\"] = \"color: #259F80\";\r\n})(ASTFmt || (ASTFmt = {}));\r\nfunction __fmt(str, fmt, format = ASTFmt.DEFAULT_FMT) {\r\n    fmt.push(format);\r\n    fmt.push(ASTFmt.DEFAULT_FMT);\r\n    return \"%c\" + str + \"%c\";\r\n}\r\nfunction __fmtA(str, fmt, format = ASTFmt.DEFAULT_FMT) {\r\n    return [__fmt(str, fmt, format)];\r\n}\r\nfunction __a(str) {\r\n    return [str];\r\n}\r\nfunction __merg(firstStr, secondStr) {\r\n    for (let i = 0; i < secondStr.length; i++) {\r\n        firstStr.push(secondStr[i]);\r\n    }\r\n    return firstStr;\r\n}\r\nfunction __s(amount, strA) {\r\n    const prefix = \" \".repeat(amount);\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = prefix + strA[i];\r\n    }\r\n    return strA;\r\n}\r\nfunction __tab(strA) {\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = \"    \" + strA[i];\r\n    }\r\n    return strA;\r\n}\r\nfunction __bar(strA) {\r\n    for (let i = 0; i < strA.length; i++) {\r\n        strA[i] = \" |  \" + strA[i];\r\n    }\r\n    return strA;\r\n}\r\nfunction __ls(astNodes, fmt) {\r\n    let lines = [];\r\n    for (let i = 0; i < astNodes.length; i++) {\r\n        lines.push(\" \" + i + \": \" + __fmt(astNodes[i].constructor.name, fmt, ASTFmt.NODE_FMT));\r\n        __merg(lines, __bar(__recurse(astNodes[i], fmt)));\r\n    }\r\n    return lines;\r\n}\r\nfunction __memberStr(astMember) {\r\n    let memberStr = astMember.rootName.stringValue;\r\n    if (astMember.memberSelect)\r\n        memberStr += \".\" + __memberStr(astMember.memberSelect);\r\n    return memberStr;\r\n}\r\nfunction __exprStr(astExpr) {\r\n    switch (astExpr.constructor.name) {\r\n        case ASTLiteral.name:\r\n            return astExpr.value.stringValue + \"\";\r\n        case ASTMember.name:\r\n            return __memberStr(astExpr);\r\n        case ASTTypeConstruction.name:\r\n            let astConstruction = astExpr;\r\n            let constructVal = \"\";\r\n            for (let i = 0; i < astConstruction.assignments.length; i++) {\r\n                constructVal +=\r\n                    __memberStr(astConstruction.assignments[i].lvalue) +\r\n                        \"=\" +\r\n                        __exprStr(astConstruction.assignments[i].rvalue);\r\n                if (i + 1 < astConstruction.assignments.length) {\r\n                    constructVal += \", \";\r\n                }\r\n            }\r\n            return __memberStr(astConstruction.typeName) + \"{\" + constructVal + \"}\";\r\n        case ASTCall.name:\r\n            let astCall = astExpr;\r\n            let callVal = __memberStr(astCall.functionName) + \"(\";\r\n            for (let i = 0; i < astCall.givenParams.length; i++) {\r\n                callVal += __exprStr(astCall.givenParams[i]);\r\n                if (i + 1 < astCall.givenParams.length) {\r\n                    callVal += \", \";\r\n                }\r\n            }\r\n            return callVal + \")\";\r\n        case ASTFunction.name:\r\n            return \"TODO: Function\";\r\n        case ASTUnaryOperator.name:\r\n            return (astExpr.operation.stringValue +\r\n                \"(\" +\r\n                __exprStr(astExpr.value) +\r\n                \")\");\r\n        case ASTBinaryOperator.name:\r\n            let astBinOp = astExpr;\r\n            return (\"(\" +\r\n                __exprStr(astBinOp.lvalue) +\r\n                \" \" +\r\n                astBinOp.operation.stringValue +\r\n                \" \" +\r\n                __exprStr(astBinOp.rvalue) +\r\n                \")\");\r\n        default:\r\n            throw (\"Can't recursively print expression because given node is not an AST expression: \" +\r\n                astExpr.constructor.name);\r\n    }\r\n}\r\nfunction __recurse(astNode, fmt) {\r\n    switch (astNode.constructor.name) {\r\n        case ASTProgram.name:\r\n            let linesPrgm = [];\r\n            let astPrgm = astNode;\r\n            __merg(linesPrgm, __a(\"typeDefinitions: \"));\r\n            __merg(linesPrgm, __ls(astPrgm.typeDefinitions, fmt));\r\n            __merg(linesPrgm, __a(\"modules: \"));\r\n            __merg(linesPrgm, __ls(astPrgm.modules, fmt));\r\n            __merg(linesPrgm, __a(\"statements:\"));\r\n            __merg(linesPrgm, __ls(astPrgm.statements, fmt));\r\n            return linesPrgm;\r\n        case ASTModule.name:\r\n            let linesMod = [];\r\n            let astMod = astNode;\r\n            __merg(linesMod, __a(\"name: \" + astMod.name.stringValue));\r\n            __merg(linesMod, __a(\"typeDefinitions: \"));\r\n            __merg(linesMod, __ls(astMod.typeDefinitions, fmt));\r\n            __merg(linesMod, __a(\"statements: \"));\r\n            __merg(linesMod, __ls(astMod.statements, fmt));\r\n            return linesMod;\r\n        case ASTTypeDefinition.name:\r\n            let linesTypeDef = [];\r\n            let astTypeDef = astNode;\r\n            __merg(linesTypeDef, __a(\"name: \" + astTypeDef.name.stringValue));\r\n            __merg(linesTypeDef, __a(\"typeDeclarations:\"));\r\n            __merg(linesTypeDef, __ls(astTypeDef.typeDeclarations, fmt));\r\n            return linesTypeDef;\r\n        case ASTBlock.name:\r\n            let linesBlock = [];\r\n            let astBlock = astNode;\r\n            __merg(linesBlock, __a(\"withModules: \"));\r\n            let withModules = [];\r\n            for (let i = 0; i < astBlock.withModules.length; i++) {\r\n                withModules.push(__fmt(astBlock.withModules[i].stringValue, fmt, ASTFmt.WITH_MODULE_FMT));\r\n            }\r\n            __merg(linesBlock, __s(4, withModules));\r\n            __merg(linesBlock, __a(\"statements:\"));\r\n            __merg(linesBlock, __ls(astBlock.statements, fmt));\r\n            return linesBlock;\r\n        case ASTDeclaration.name:\r\n            let linesDec = [];\r\n            let astDec = astNode;\r\n            __merg(linesDec, [\"lvalue: \" + __fmt(__memberStr(astDec.lvalue), fmt, ASTFmt.IDENTIFIER_FMT)]);\r\n            if (astDec.type) {\r\n                __merg(linesDec, [\"type:   \" + __recurse(astDec.type, fmt)]);\r\n            }\r\n            if (astDec.rvalue) {\r\n                __merg(linesDec, [\"rvalue: \" + __fmt(astDec.rvalue.constructor.name, fmt, ASTFmt.NODE_FMT)]);\r\n                __merg(linesDec, __tab(__s(4, __recurse(astDec.rvalue, fmt))));\r\n            }\r\n            return linesDec;\r\n        case ASTType.name:\r\n            let astType = astNode;\r\n            if (astType.type) {\r\n                if (astType.type.constructor.name === ASTMember.name) {\r\n                    return __fmtA(__memberStr(astType.type), fmt, ASTFmt.TYPE_FMT);\r\n                }\r\n                else {\r\n                    return __fmtA(astType.type.stringValue, fmt, ASTFmt.TYPE_FMT);\r\n                }\r\n            }\r\n            else {\r\n                let out = \"(\";\r\n                for (let i = 0; i < astType.inputType.length; i++) {\r\n                    out += __recurse(astType.inputType[i], fmt);\r\n                    if (i + 1 < astType.inputType.length) {\r\n                        out += \", \";\r\n                    }\r\n                }\r\n                out += \") -> \" + __recurse(astType.outType, fmt);\r\n                return [out];\r\n            }\r\n        case ASTIf.name:\r\n            let linesIf = [];\r\n            let astIf = astNode;\r\n            __merg(linesIf, __a(\"condition: \" + __fmt(__exprStr(astIf.condition), fmt, ASTFmt.EXPRESSION_FMT)));\r\n            __merg(linesIf, __a(\"consequence: \" + __fmt(astIf.consequence.constructor.name, fmt, ASTFmt.NODE_FMT)));\r\n            __merg(linesIf, __tab(__s(9, __recurse(astIf.consequence, fmt))));\r\n            __merg(linesIf, __a(\"alternative: \" + __fmt(astIf.alternative.constructor.name, fmt, ASTFmt.NODE_FMT)));\r\n            __merg(linesIf, __tab(__s(9, __recurse(astIf.alternative, fmt))));\r\n            return linesIf;\r\n        case ASTWhile.name:\r\n            let linesWhile = [];\r\n            let astWhile = astNode;\r\n            __merg(linesWhile, __a(\"condition: \" + __fmt(__exprStr(astWhile.condition), fmt, ASTFmt.EXPRESSION_FMT)));\r\n            __merg(linesWhile, __a(\"block: \" + __fmt(astWhile.block.constructor.name, fmt, ASTFmt.NODE_FMT)));\r\n            __merg(linesWhile, __tab(__s(3, __recurse(astWhile.block, fmt))));\r\n            return linesWhile;\r\n        case ASTFor.name:\r\n            let linesFor = [];\r\n            let astFor = astNode;\r\n            if (astFor.itemParamDec) {\r\n                __merg(linesFor, __a(\"itemParamDec:  \" + __fmt(astFor.itemParamDec.stringValue, fmt, ASTFmt.IDENTIFIER_FMT)));\r\n            }\r\n            if (astFor.indexParamDec) {\r\n                __merg(linesFor, __a(\"indexParamDec: \" + __fmt(astFor.indexParamDec.stringValue, fmt, ASTFmt.IDENTIFIER_FMT)));\r\n            }\r\n            if (astFor.iterableName) {\r\n                __merg(linesFor, __a(\"iterableName:  \" + __fmt(__memberStr(astFor.iterableName), fmt, ASTFmt.IDENTIFIER_FMT)));\r\n            }\r\n            if (astFor.lowerBound !== undefined) {\r\n                __merg(linesFor, __a(\"bounds: \" + __fmt(astFor.lowerBound + \"...\" + astFor.upperBound, fmt, ASTFmt.EXPRESSION_FMT)));\r\n            }\r\n            __merg(linesFor, __a(\"block: \" + __fmt(astFor.block.constructor.name, fmt, ASTFmt.NODE_FMT)));\r\n            __merg(linesFor, __tab(__s(3, __recurse(astFor.block, fmt))));\r\n            return linesFor;\r\n        case ASTBreak.name:\r\n        case ASTContinue.name:\r\n            return [];\r\n        case ASTReturn.name:\r\n            let astRet = astNode;\r\n            if (astRet.returnValue) {\r\n                return [\"returnValue: \" + __fmt(__exprStr(astRet.returnValue), fmt, ASTFmt.EXPRESSION_FMT)];\r\n            }\r\n            return [];\r\n        case ASTFunction.name:\r\n            let linesFunc = [];\r\n            let astFunc = astNode;\r\n            __merg(linesFunc, __a(\"paramDeclaration:\"));\r\n            if (astFunc.paramDeclaration) {\r\n                __merg(linesFunc, __ls(astFunc.paramDeclaration, fmt));\r\n            }\r\n            if (astFunc.returnType) {\r\n                __merg(linesFunc, __a(\"returnType: \" + __recurse(astFunc.returnType, fmt)));\r\n            }\r\n            __merg(linesFunc, __a(\"block: \" + __fmt(astFunc.block.constructor.name, fmt, ASTFmt.NODE_FMT)));\r\n            __merg(linesFunc, __tab(__s(3, __recurse(astFunc.block, fmt))));\r\n            return linesFunc;\r\n        case ASTCall.name:\r\n            let linesCall = [];\r\n            let astCall = astNode;\r\n            __merg(linesCall, __a(\"functionName: \" + __fmt(__memberStr(astCall.functionName), fmt, ASTFmt.FUNCTION_CALL_FMT)));\r\n            __merg(linesCall, __a(\"givenParams:\"));\r\n            __merg(linesCall, __ls(astCall.givenParams, fmt));\r\n            return linesCall;\r\n        case ASTLiteral.name:\r\n        case ASTMember.name:\r\n        case ASTTypeConstruction.name:\r\n        case ASTUnaryOperator.name:\r\n        case ASTBinaryOperator.name:\r\n            return [\"value: \" + __fmt(__exprStr(astNode), fmt, ASTFmt.EXPRESSION_FMT)];\r\n        default:\r\n            throw \"Can't recursively print tree because given node is not an AST node: \" + astNode.constructor.name;\r\n    }\r\n}\r\nfunction printAST(astNode) {\r\n    let fmt = [];\r\n    let outA = [];\r\n    __merg(outA, __fmtA(astNode.constructor.name, fmt, ASTFmt.NODE_FMT));\r\n    __merg(outA, __recurse(astNode, fmt));\r\n    let str = [outA.join(\"\\n\")];\r\n    for (let i = 0; i < fmt.length; i++) {\r\n        str.push(fmt[i]);\r\n    }\r\n    console.log.apply(printAST, str);\r\n}\r\nclass ASTProgram {\r\n}\r\nclass ASTModule {\r\n}\r\nclass ASTTypeDefinition {\r\n}\r\nclass ASTBlock {\r\n}\r\nclass ASTDeclaration {\r\n}\r\nclass ASTType {\r\n}\r\nclass ASTIf {\r\n}\r\nclass ASTWhile {\r\n}\r\nclass ASTFor {\r\n}\r\nclass ASTBreak {\r\n}\r\nclass ASTContinue {\r\n}\r\nclass ASTReturn {\r\n}\r\nclass ASTFunction {\r\n}\r\nclass ASTCall {\r\n}\r\nclass ASTLiteral {\r\n}\r\nclass ASTMember {\r\n}\r\nclass ASTTypeConstruction {\r\n}\r\nclass ASTUnaryOperator {\r\n}\r\nclass ASTBinaryOperator {\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Ast.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Lexer.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Lexer.ts ***!
  \*********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Lexer\n/* harmony export */ });\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n/* harmony import */ var _TokenType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TokenType */ \"./src/scuft/lang/TokenType.ts\");\n\r\n\r\nclass ErrorHandler {\r\n    constructor(lexer) {\r\n        this.tabWidth = 4;\r\n        this.lines = [];\r\n        this.lexer = lexer;\r\n        let begin = 0;\r\n        let lineCount = 1;\r\n        for (let i = 0; i < this.lexer.prgmString.length; i++) {\r\n            if (this.lexer.prgmString.charAt(i) === \"\\n\") {\r\n                this.lines[lineCount++] = this.lexer.prgmString.slice(begin, i);\r\n                begin = i + 1;\r\n            }\r\n        }\r\n        this.lines[lineCount] = this.lexer.prgmString.slice(begin, this.lexer.prgmString.length);\r\n    }\r\n    getColLength(str) {\r\n        let res = 0;\r\n        for (let i = 0; i < str.length; i++) {\r\n            if (str.charAt(i) === \"\\t\") {\r\n                res += this.tabWidth;\r\n            }\r\n            else {\r\n                res++;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    errorHeader(msg, line, c) {\r\n        let optionalCol = \"\";\r\n        if (c !== undefined) {\r\n            optionalCol = \", col:\" + (this.getColLength(this.lines[line].slice(0, c)) + 1);\r\n        }\r\n        return \"(line:\" + line + optionalCol + \"): \" + msg + \"\\n\";\r\n    }\r\n    formatLine(leftIndentSpace, line, fileLine) {\r\n        if (line < 1)\r\n            return \"\";\r\n        let strNumber = line + \"\";\r\n        for (let i = 0; i < leftIndentSpace - strNumber.length; i++) {\r\n            strNumber = \" \" + strNumber;\r\n        }\r\n        return \"\\t\" + strNumber + \"\\t\" + fileLine + \"\\n\";\r\n    }\r\n    getFileLine(line) {\r\n        return this.lines[line].trimLeft().split(\"\\t\").join(\" \");\r\n    }\r\n    makeIndicator(line, c0, c1) {\r\n        console.assert(c0 >= 0, \"c0=%s must be non-negative\", c0);\r\n        console.assert(c1 > c0, \"c1=%s must be larger than c0=%s\", c1, c0);\r\n        let indentLen = this.lines[line].length - this.lines[line].trimLeft().length;\r\n        return \" \".repeat(c0 - indentLen) + \"^\".repeat(c1 - c0);\r\n    }\r\n    newErrPoint(msg, line, c) {\r\n        let error = this.errorHeader(msg, line, c);\r\n        let len = Math.floor(Math.log10(line + 1)) + 1;\r\n        error += this.formatLine(len, line - 1, \"\");\r\n        error += this.formatLine(len, line, this.getFileLine(line));\r\n        error += this.formatLine(len, line + 1, this.makeIndicator(line, c, c + 1));\r\n        return error;\r\n    }\r\n    newErrToken(msg, token) {\r\n        return this.newErrPoint(msg, token.line, token.c);\r\n    }\r\n    newErrAfterLastToken(msg, curToken) {\r\n        let curLine = curToken.line;\r\n        let curLineStr = this.lines[curLine];\r\n        let cur = curToken.c;\r\n        do {\r\n            if (cur <= 0) {\r\n                curLine--;\r\n                curLineStr = this.lines[curLine];\r\n                cur = curLineStr.length;\r\n            }\r\n            cur--;\r\n        } while (Lexer.isWhitespace(curLineStr.charAt(cur)));\r\n        return this.newErrPoint(msg, curLine, cur + 1);\r\n    }\r\n}\r\nclass Lexer {\r\n    constructor(prgmString) {\r\n        this.curIndex = 0;\r\n        this.curLine = 1;\r\n        this.curC = 0;\r\n        this.prgmString = prgmString;\r\n        this.errHandler = new ErrorHandler(this);\r\n    }\r\n    err(msg, line, ch) {\r\n        throw this.errHandler.newErrPoint(msg, line, ch);\r\n    }\r\n    lex() {\r\n        let tokens = [];\r\n        let token = this.nextToken();\r\n        while (token.type !== _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.END_TKN) {\r\n            tokens.push(token);\r\n            token = this.nextToken();\r\n        }\r\n        tokens.push(token);\r\n        return tokens;\r\n    }\r\n    getChar(index) {\r\n        return this.prgmString.charAt(index);\r\n    }\r\n    getCurChar() {\r\n        return this.getChar(this.curIndex);\r\n    }\r\n    getNextChar() {\r\n        return this.getChar(this.curIndex + 1);\r\n    }\r\n    incrementCurIndex(amount) {\r\n        if (this.getCurChar() === \"\\n\") {\r\n            this.curLine++;\r\n            this.curC = -1;\r\n        }\r\n        this.curIndex += amount;\r\n        this.curC += amount;\r\n    }\r\n    nextToken() {\r\n        while (Lexer.isWhitespace(this.getCurChar())) {\r\n            this.incrementCurIndex(1);\r\n        }\r\n        if (this.curIndex >= this.prgmString.length) {\r\n            return this.grabToken(\"\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.END_TKN);\r\n        }\r\n        switch (this.getCurChar()) {\r\n            case \"=\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\"==\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_EQUALS_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"=\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.ASSIGNMENT_TKN);\r\n                }\r\n            case \">\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\">=\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_GREATER_THAN_EQUAL_TKN);\r\n                }\r\n                else if (this.getNextChar() === \">\" && this.getChar(this.curIndex + 2) === \">\") {\r\n                    return this.grabToken(\">>>\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n                }\r\n                else if (this.getNextChar() === \">\") {\r\n                    return this.grabToken(\">>\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\">\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_GREATER_THAN_TKN);\r\n                }\r\n            case \"<\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\"<=\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_LESS_THAN_EQUAL_TKN);\r\n                }\r\n                else if (this.getNextChar() === \"<\") {\r\n                    return this.grabToken(\"<<\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.BIN_SHIFT_LEFT_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"<\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_LESS_THAN_TKN);\r\n                }\r\n            case \":\":\r\n                return this.grabToken(\":\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COLON_TKN);\r\n            case \"{\":\r\n                return this.grabToken(\"{\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.LEFT_CURLY_TKN);\r\n            case \"}\":\r\n                return this.grabToken(\"}\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.RIGHT_CURLY_TKN);\r\n            case \"[\":\r\n                return this.grabToken(\"[\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.LEFT_SQUARE_TKN);\r\n            case \"]\":\r\n                return this.grabToken(\"]\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.RIGHT_SQUARE_TKN);\r\n            case \"(\":\r\n                return this.grabToken(\"(\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.LEFT_PARENS_TKN);\r\n            case \")\":\r\n                return this.grabToken(\")\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.RIGHT_PARENS_TKN);\r\n            case \"|\":\r\n                if (this.getNextChar() === \"|\") {\r\n                    return this.grabToken(\"||\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_OR_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"|\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_BAR_TKN);\r\n                }\r\n            case \"&\":\r\n                if (this.getNextChar() === \"&\") {\r\n                    return this.grabToken(\"&&\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_AND_TKN);\r\n                }\r\n                else {\r\n                    let ampersand = this.grabToken(\"&\" + this.getNextChar(), _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.UNKNOWN_TKN);\r\n                    ampersand.value = \"&\";\r\n                    return ampersand;\r\n                }\r\n            case \"$\":\r\n                if (this.getNextChar() === \"$\") {\r\n                    return this.grabToken(\"$$\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_XOR_TKN);\r\n                }\r\n                else {\r\n                    let dollar = this.grabToken(\"$\" + this.getNextChar(), _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.UNKNOWN_TKN);\r\n                    dollar.value = \"$\";\r\n                    return this.grabToken(\"$\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.UNKNOWN_TKN);\r\n                }\r\n            case \"!\":\r\n                if (this.getNextChar() === \"=\") {\r\n                    return this.grabToken(\"!=\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_NOT_EQUALS_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\"!\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_NOT_TKN);\r\n                }\r\n            case \"+\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"+=\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_ADD_EQUALS_TKN);\r\n                    case \"+\":\r\n                        return this.grabToken(\"++\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_ADD_ADD_TKN);\r\n                    default:\r\n                        return this.grabToken(\"+\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_ADD_TKN);\r\n                }\r\n            case \"-\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"-=\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_SUBTR_EQUALS_TKN);\r\n                    case \"-\":\r\n                        return this.grabToken(\"--\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_SUBTR_SUBTR_TKN);\r\n                    case \">\":\r\n                        return this.grabToken(\"->\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.MAPPING_TKN);\r\n                    default:\r\n                        return this.grabToken(\"-\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_SUBTR_TKN);\r\n                }\r\n            case \"*\":\r\n                switch (this.getNextChar()) {\r\n                    case \"=\":\r\n                        return this.grabToken(\"*=\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_MULT_EQUALS_TKN);\r\n                    default:\r\n                        return this.grabToken(\"*\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_MULT_TKN);\r\n                }\r\n            case \"/\":\r\n                switch (this.getNextChar()) {\r\n                    case \"/\":\r\n                        this.consumeSingleLineComment();\r\n                        return this.nextToken();\r\n                    case \"*\":\r\n                        this.consumeBlockComment();\r\n                        return this.nextToken();\r\n                    case \"=\":\r\n                        return this.grabToken(\"/=\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_DIV_EQUALS_TKN);\r\n                    default:\r\n                        return this.grabToken(\"/\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_DIVIDE_TKN);\r\n                }\r\n            case \"^\":\r\n                return this.grabToken(\"^\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_CARROT_TKN);\r\n            case \"%\":\r\n                return this.grabToken(\"%\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.OP_MODULUS_TKN);\r\n            case \"~\":\r\n                return this.grabToken(\"~\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.BIN_NOT_TKN);\r\n            case \".\":\r\n                if (this.getNextChar() === \".\" && this.getChar(this.curIndex + 2) === \".\") {\r\n                    return this.grabToken(\"...\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.ELLIPSES_TKN);\r\n                }\r\n                else {\r\n                    return this.grabToken(\".\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.DOT_TKN);\r\n                }\r\n            case \",\":\r\n                return this.grabToken(\",\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COMMA_TKN);\r\n            case \";\":\r\n                return this.grabToken(\";\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.SEMI_COLON_TKN);\r\n            case '\"':\r\n                return this.grabStringLiteral();\r\n            default:\r\n                if (Lexer.isLetter(this.getCurChar())) {\r\n                    return this.grabIdentifier();\r\n                }\r\n                else if (Lexer.isNumber(this.getCurChar())) {\r\n                    return this.grabNumericLiteral();\r\n                }\r\n                else {\r\n                    let unknown = this.grabToken(this.getCurChar(), _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.UNKNOWN_TKN);\r\n                    unknown.value = this.getCurChar();\r\n                    return unknown;\r\n                }\r\n        }\r\n    }\r\n    grabToken(str, type) {\r\n        this.incrementCurIndex(str.length);\r\n        return this.makeToken(str, type);\r\n    }\r\n    makeToken(str, type) {\r\n        let tkn = new _Token__WEBPACK_IMPORTED_MODULE_0__.default(str, this.curLine, this.curC - str.length, type);\r\n        return tkn;\r\n    }\r\n    grabNumericLiteral() {\r\n        let stringValue = \"\";\r\n        let number = 0;\r\n        let ch = this.getCurChar();\r\n        let point = false;\r\n        let divideBy = 1;\r\n        while (Lexer.isNumber(ch) || ch === \".\") {\r\n            stringValue += ch;\r\n            if (ch !== \"_\") {\r\n                if (ch === \".\") {\r\n                    if (point === false) {\r\n                        point = true;\r\n                        this.incrementCurIndex(1);\r\n                        ch = this.getCurChar();\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        this.err('Number has too many decimal points\"' + number / divideBy + '.\"', this.curLine, this.curC);\r\n                    }\r\n                }\r\n                number = 10 * number + parseInt(ch);\r\n                if (point)\r\n                    divideBy *= 10;\r\n            }\r\n            this.incrementCurIndex(1);\r\n            ch = this.getCurChar();\r\n        }\r\n        let value = number / divideBy;\r\n        let tkn = this.makeToken(stringValue, _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.NUMERIC_LITERAL_TKN);\r\n        tkn.value = value;\r\n        return tkn;\r\n    }\r\n    grabStringLiteral() {\r\n        this.grabToken('\"', _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.DOUBLE_QUOTE_TKN);\r\n        let str = \"\";\r\n        let ch = this.getCurChar();\r\n        let escapeChar = false;\r\n        while (escapeChar || ch !== '\"') {\r\n            if (!escapeChar || ch === '\"') {\r\n                str += ch;\r\n            }\r\n            if (ch === \"\\\\\") {\r\n                escapeChar = true;\r\n            }\r\n            else {\r\n                escapeChar = false;\r\n            }\r\n            this.incrementCurIndex(1);\r\n            ch = this.getCurChar();\r\n        }\r\n        this.grabToken('\"', _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.DOUBLE_QUOTE_TKN);\r\n        let tkn = this.makeToken('\"' + str + '\"', _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.STRING_LITERAL_TKN);\r\n        tkn.value = str;\r\n        return tkn;\r\n    }\r\n    grabIdentifier() {\r\n        let str = \"\";\r\n        let ch = this.getCurChar();\r\n        while (Lexer.isLetter(ch) || Lexer.isNumber(ch)) {\r\n            this.incrementCurIndex(1);\r\n            str = str + ch;\r\n            ch = this.getCurChar();\r\n        }\r\n        switch (str) {\r\n            case \"type\":\r\n                return this.makeToken(\"type\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.TYPE_TKN);\r\n            case \"module\":\r\n                return this.makeToken(\"module\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.MODULE_TKN);\r\n            case \"with\":\r\n                return this.makeToken(\"with\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.WITH_TKN);\r\n            case \"if\":\r\n                return this.makeToken(\"if\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.IF_TKN);\r\n            case \"else\":\r\n                return this.makeToken(\"else\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.ELSE_TKN);\r\n            case \"while\":\r\n                return this.makeToken(\"while\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.WHILE_TKN);\r\n            case \"for\":\r\n                return this.makeToken(\"for\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.FOR_TKN);\r\n            case \"in\":\r\n                return this.makeToken(\"in\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.IN_TKN);\r\n            case \"break\":\r\n                return this.makeToken(\"break\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.BREAK_TKN);\r\n            case \"continue\":\r\n                return this.makeToken(\"continue\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.CONTINUE_TKN);\r\n            case \"or\":\r\n                return this.makeToken(\"or\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.BIN_OR_TKN);\r\n            case \"and\":\r\n                return this.makeToken(\"and\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.BIN_AND_TKN);\r\n            case \"xor\":\r\n                return this.makeToken(\"xor\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.BIN_XOR_TKN);\r\n            case \"true\":\r\n                return this.makeToken(\"true\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_TRUE_TKN);\r\n            case \"false\":\r\n                return this.makeToken(\"false\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.COND_FALSE_TKN);\r\n            case \"void\":\r\n                return this.makeToken(\"void\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.VOID_TKN);\r\n            case \"num\":\r\n                return this.makeToken(\"num\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.NUM_TKN);\r\n            case \"string\":\r\n                return this.makeToken(\"string\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.STRING_TKN);\r\n            case \"bool\":\r\n                return this.makeToken(\"bool\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.BOOL_TKN);\r\n            case \"return\":\r\n                return this.makeToken(\"return\", _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.RETURN_TKN);\r\n            default:\r\n                return this.makeToken(str, _TokenType__WEBPACK_IMPORTED_MODULE_1__.default.IDENTIFIER_TKN);\r\n        }\r\n    }\r\n    consumeSingleLineComment() {\r\n        this.incrementCurIndex(2);\r\n        while (this.curIndex < this.prgmString.length && this.getCurChar() !== \"\\n\") {\r\n            this.incrementCurIndex(1);\r\n        }\r\n    }\r\n    consumeBlockComment() {\r\n        this.incrementCurIndex(2);\r\n        while (this.curIndex < this.prgmString.length && !(this.getCurChar() === \"*\" && this.getNextChar() === \"/\")) {\r\n            this.incrementCurIndex(1);\r\n        }\r\n        this.incrementCurIndex(2);\r\n    }\r\n    static isWhitespace(ch) {\r\n        return ch === \" \" || ch === \"\\t\" || ch === \"\\r\" || ch === \"\\n\";\r\n    }\r\n    static isLetter(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 65 && n < 91) || (n >= 97 && n < 123) || ch === \"'\" || ch === \"_\";\r\n    }\r\n    static isNumber(ch) {\r\n        let n = ch.charCodeAt(0);\r\n        return (n >= 48 && n <= 57) || ch === \"_\";\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL0xleGVyLnRzP2E3ZTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBQ1E7QUFFcEMsTUFBTSxZQUFZO0lBSWQsWUFBWSxLQUFZO1FBSFAsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUV0QixVQUFLLEdBQWEsRUFBRSxDQUFDO1FBRXpCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25ELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hFLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2pCO1NBQ0o7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUNPLFlBQVksQ0FBQyxHQUFXO1FBQzVCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNaLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFB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RUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUM7SUFDbkYsQ0FBQztJQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBVTtRQUN0QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxDQUFDO0lBQzlDLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9zY3VmdC9sYW5nL0xleGVyLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRva2VuIGZyb20gXCIuL1Rva2VuXCI7XHJcbmltcG9ydCBUb2tlblR5cGUgZnJvbSBcIi4vVG9rZW5UeXBlXCI7XHJcblxyXG5jbGFzcyBFcnJvckhhbmRsZXIge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSB0YWJXaWR0aCA9IDQ7XHJcbiAgICBwcml2YXRlIGxleGVyOiBMZXhlcjtcclxuICAgIHByaXZhdGUgbGluZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICBjb25zdHJ1Y3RvcihsZXhlcjogTGV4ZXIpIHtcclxuICAgICAgICB0aGlzLmxleGVyID0gbGV4ZXI7XHJcblxyXG4gICAgICAgIGxldCBiZWdpbiA9IDA7XHJcbiAgICAgICAgbGV0IGxpbmVDb3VudCA9IDE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxleGVyLnByZ21TdHJpbmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGV4ZXIucHJnbVN0cmluZy5jaGFyQXQoaSkgPT09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGluZXNbbGluZUNvdW50KytdID0gdGhpcy5sZXhlci5wcmdtU3RyaW5nLnNsaWNlKGJlZ2luLCBpKTtcclxuICAgICAgICAgICAgICAgIGJlZ2luID0gaSArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5saW5lc1tsaW5lQ291bnRdID0gdGhpcy5sZXhlci5wcmdtU3RyaW5nLnNsaWNlKGJlZ2luLCB0aGlzLmxleGVyLnByZ21TdHJpbmcubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ2V0Q29sTGVuZ3RoKHN0cjogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgcmVzID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc3RyLmNoYXJBdChpKSA9PT0gXCJcXHRcIikge1xyXG4gICAgICAgICAgICAgICAgcmVzICs9IHRoaXMudGFiV2lkdGg7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXMrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBlcnJvckhlYWRlcihtc2c6IHN0cmluZywgbGluZTogbnVtYmVyLCBjPzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgb3B0aW9uYWxDb2wgPSBcIlwiO1xyXG4gICAgICAgIGlmIChjICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb3B0aW9uYWxDb2wgPSBcIiwgY29sOlwiICsgKHRoaXMuZ2V0Q29sTGVuZ3RoKHRoaXMubGluZXNbbGluZV0uc2xpY2UoMCwgYykpICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIihsaW5lOlwiICsgbGluZSArIG9wdGlvbmFsQ29sICsgXCIpOiBcIiArIG1zZyArIFwiXFxuXCI7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGZvcm1hdExpbmUobGVmdEluZGVudFNwYWNlOiBudW1iZXIsIGxpbmU6IG51bWJlciwgZmlsZUxpbmU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKGxpbmUgPCAxKSByZXR1cm4gXCJcIjtcclxuICAgICAgICBsZXQgc3RyTnVtYmVyID0gbGluZSArIFwiXCI7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZWZ0SW5kZW50U3BhY2UgLSBzdHJOdW1iZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc3RyTnVtYmVyID0gXCIgXCIgKyBzdHJOdW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIlxcdFwiICsgc3RyTnVtYmVyICsgXCJcXHRcIiArIGZpbGVMaW5lICsgXCJcXG5cIjtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ2V0RmlsZUxpbmUobGluZTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saW5lc1tsaW5lXS50cmltTGVmdCgpLnNwbGl0KFwiXFx0XCIpLmpvaW4oXCIgXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBtYWtlSW5kaWNhdG9yKGxpbmU6IG51bWJlciwgYzA6IG51bWJlciwgYzE6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQoYzAgPj0gMCwgXCJjMD0lcyBtdXN0IGJlIG5vbi1uZWdhdGl2ZVwiLCBjMCk7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQoYzEgPiBjMCwgXCJjMT0lcyBtdXN0IGJlIGxhcmdlciB0aGFuIGMwPSVzXCIsIGMxLCBjMCk7XHJcbiAgICAgICAgbGV0IGluZGVudExlbiA9IHRoaXMubGluZXNbbGluZV0ubGVuZ3RoIC0gdGhpcy5saW5lc1tsaW5lXS50cmltTGVmdCgpLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gXCIgXCIucmVwZWF0KGMwIC0gaW5kZW50TGVuKSArIFwiXlwiLnJlcGVhdChjMSAtIGMwKTtcclxuICAgIH1cclxuICAgIG5ld0VyclBvaW50KG1zZzogc3RyaW5nLCBsaW5lOiBudW1iZXIsIGM6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGVycm9yID0gdGhpcy5lcnJvckhlYWRlcihtc2csIGxpbmUsIGMpO1xyXG4gICAgICAgIGxldCBsZW4gPSBNYXRoLmZsb29yKE1hdGgubG9nMTAobGluZSArIDEpKSArIDE7XHJcbiAgICAgICAgZXJyb3IgKz0gdGhpcy5mb3JtYXRMaW5lKGxlbiwgbGluZSAtIDEsIFwiXCIpO1xyXG4gICAgICAgIGVycm9yICs9IHRoaXMuZm9ybWF0TGluZShsZW4sIGxpbmUsIHRoaXMuZ2V0RmlsZUxpbmUobGluZSkpO1xyXG4gICAgICAgIGVycm9yICs9IHRoaXMuZm9ybWF0TGluZShsZW4sIGxpbmUgKyAxLCB0aGlzLm1ha2VJbmRpY2F0b3IobGluZSwgYywgYyArIDEpKTtcclxuICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICB9XHJcbiAgICBuZXdFcnJUb2tlbihtc2c6IHN0cmluZywgdG9rZW46IFRva2VuKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uZXdFcnJQb2ludChtc2csIHRva2VuLmxpbmUsIHRva2VuLmMpO1xyXG4gICAgfVxyXG4gICAgbmV3RXJyQWZ0ZXJMYXN0VG9rZW4obXNnOiBzdHJpbmcsIGN1clRva2VuOiBUb2tlbik6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGN1ckxpbmUgPSBjdXJUb2tlbi5saW5lO1xyXG4gICAgICAgIGxldCBjdXJMaW5lU3RyID0gdGhpcy5saW5lc1tjdXJMaW5lXTtcclxuICAgICAgICBsZXQgY3VyID0gY3VyVG9rZW4uYztcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGlmIChjdXIgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgY3VyTGluZS0tO1xyXG4gICAgICAgICAgICAgICAgY3VyTGluZVN0ciA9IHRoaXMubGluZXNbY3VyTGluZV07XHJcbiAgICAgICAgICAgICAgICBjdXIgPSBjdXJMaW5lU3RyLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXItLTtcclxuICAgICAgICB9IHdoaWxlIChMZXhlci5pc1doaXRlc3BhY2UoY3VyTGluZVN0ci5jaGFyQXQoY3VyKSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5uZXdFcnJQb2ludChtc2csIGN1ckxpbmUsIGN1ciArIDEpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExleGVyIHtcclxuICAgIHJlYWRvbmx5IGVyckhhbmRsZXI6IEVycm9ySGFuZGxlcjtcclxuICAgIHJlYWRvbmx5IHByZ21TdHJpbmc6IHN0cmluZztcclxuICAgIHByaXZhdGUgY3VySW5kZXggPSAwO1xyXG4gICAgcHJpdmF0ZSBjdXJMaW5lID0gMTtcclxuICAgIHByaXZhdGUgY3VyQyA9IDA7XHJcbiAgICBjb25zdHJ1Y3RvcihwcmdtU3RyaW5nOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnByZ21TdHJpbmcgPSBwcmdtU3RyaW5nO1xyXG4gICAgICAgIHRoaXMuZXJySGFuZGxlciA9IG5ldyBFcnJvckhhbmRsZXIodGhpcyk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGVycihtc2c6IHN0cmluZywgbGluZTogbnVtYmVyLCBjaDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhyb3cgdGhpcy5lcnJIYW5kbGVyLm5ld0VyclBvaW50KG1zZywgbGluZSwgY2gpO1xyXG4gICAgfVxyXG4gICAgbGV4KCk6IFRva2VuW10ge1xyXG4gICAgICAgIGxldCB0b2tlbnM6IFRva2VuW10gPSBbXTtcclxuICAgICAgICBsZXQgdG9rZW4gPSB0aGlzLm5leHRUb2tlbigpO1xyXG4gICAgICAgIHdoaWxlICh0b2tlbi50eXBlICE9PSBUb2tlblR5cGUuRU5EX1RLTikge1xyXG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xyXG4gICAgICAgIHJldHVybiB0b2tlbnM7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGdldENoYXIoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJnbVN0cmluZy5jaGFyQXQoaW5kZXgpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZXRDdXJDaGFyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hhcih0aGlzLmN1ckluZGV4KTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ2V0TmV4dENoYXIoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaGFyKHRoaXMuY3VySW5kZXggKyAxKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgaW5jcmVtZW50Q3VySW5kZXgoYW1vdW50OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRDdXJDaGFyKCkgPT09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJMaW5lKys7XHJcbiAgICAgICAgICAgIHRoaXMuY3VyQyA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1ckluZGV4ICs9IGFtb3VudDtcclxuICAgICAgICB0aGlzLmN1ckMgKz0gYW1vdW50O1xyXG4gICAgfVxyXG4gICAgbmV4dFRva2VuKCk6IFRva2VuIHtcclxuICAgICAgICAvL0NsZWFyIFdoaXRlc3BhY2VcclxuICAgICAgICB3aGlsZSAoTGV4ZXIuaXNXaGl0ZXNwYWNlKHRoaXMuZ2V0Q3VyQ2hhcigpKSkge1xyXG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9SZXR1cm4gZW5kIHRva2VuIGlmIGVuZCBvZiBzdHJpbmcgaW5wdXQgcmVhY2hlZFxyXG4gICAgICAgIGlmICh0aGlzLmN1ckluZGV4ID49IHRoaXMucHJnbVN0cmluZy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiXCIsIFRva2VuVHlwZS5FTkRfVEtOKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5nZXRDdXJDaGFyKCkpIHtcclxuICAgICAgICAgICAgLy8gQXNzaWdubWVudFxyXG4gICAgICAgICAgICBjYXNlIFwiPVwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0TmV4dENoYXIoKSA9PT0gXCI9XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCI9PVwiLCBUb2tlblR5cGUuQ09ORF9FUVVBTFNfVEtOKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiPVwiLCBUb2tlblR5cGUuQVNTSUdOTUVOVF9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiPlwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0TmV4dENoYXIoKSA9PT0gXCI9XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCI+PVwiLCBUb2tlblR5cGUuQ09ORF9HUkVBVEVSX1RIQU5fRVFVQUxfVEtOKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09PSBcIj5cIiAmJiB0aGlzLmdldENoYXIodGhpcy5jdXJJbmRleCArIDIpID09PSBcIj5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIj4+PlwiLCBUb2tlblR5cGUuQklOX1NISUZUX0FSSVRITUVUSUNfUklHSFRfVEtOKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09PSBcIj5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIj4+XCIsIFRva2VuVHlwZS5CSU5fU0hJRlRfQVJJVEhNRVRJQ19SSUdIVF9US04pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCI+XCIsIFRva2VuVHlwZS5DT05EX0dSRUFURVJfVEhBTl9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiPFwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0TmV4dENoYXIoKSA9PT0gXCI9XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCI8PVwiLCBUb2tlblR5cGUuQ09ORF9MRVNTX1RIQU5fRVFVQUxfVEtOKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09PSBcIjxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIjw8XCIsIFRva2VuVHlwZS5CSU5fU0hJRlRfTEVGVF9US04pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCI8XCIsIFRva2VuVHlwZS5DT05EX0xFU1NfVEhBTl9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiOlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiOlwiLCBUb2tlblR5cGUuQ09MT05fVEtOKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEJsb2Nrc1xyXG4gICAgICAgICAgICBjYXNlIFwie1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwie1wiLCBUb2tlblR5cGUuTEVGVF9DVVJMWV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwifVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwifVwiLCBUb2tlblR5cGUuUklHSFRfQ1VSTFlfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcIltcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIltcIiwgVG9rZW5UeXBlLkxFRlRfU1FVQVJFX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCJdXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCJdXCIsIFRva2VuVHlwZS5SSUdIVF9TUVVBUkVfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcIihcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIihcIiwgVG9rZW5UeXBlLkxFRlRfUEFSRU5TX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCIpXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIpXCIsIFRva2VuVHlwZS5SSUdIVF9QQVJFTlNfVEtOKTtcclxuXHJcbiAgICAgICAgICAgIC8vQ29uZGl0aW9uYWxzXHJcbiAgICAgICAgICAgIGNhc2UgXCJ8XCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09PSBcInxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcInx8XCIsIFRva2VuVHlwZS5DT05EX09SX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcInxcIiwgVG9rZW5UeXBlLk9QX0JBUl9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiJlwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0TmV4dENoYXIoKSA9PT0gXCImXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCImJlwiLCBUb2tlblR5cGUuQ09ORF9BTkRfVEtOKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFtcGVyc2FuZCA9IHRoaXMuZ3JhYlRva2VuKFwiJlwiICsgdGhpcy5nZXROZXh0Q2hhcigpLCBUb2tlblR5cGUuVU5LTk9XTl9US04pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFtcGVyc2FuZC52YWx1ZSA9IFwiJlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhbXBlcnNhbmQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCIkXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXROZXh0Q2hhcigpID09PSBcIiRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIiQkXCIsIFRva2VuVHlwZS5DT05EX1hPUl9US04pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZG9sbGFyID0gdGhpcy5ncmFiVG9rZW4oXCIkXCIgKyB0aGlzLmdldE5leHRDaGFyKCksIFRva2VuVHlwZS5VTktOT1dOX1RLTik7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9sbGFyLnZhbHVlID0gXCIkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiJFwiLCBUb2tlblR5cGUuVU5LTk9XTl9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiIVwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0TmV4dENoYXIoKSA9PT0gXCI9XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIhPVwiLCBUb2tlblR5cGUuQ09ORF9OT1RfRVFVQUxTX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIiFcIiwgVG9rZW5UeXBlLkNPTkRfTk9UX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBPcGVyYXRvcnNcclxuICAgICAgICAgICAgY2FzZSBcIitcIjpcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5nZXROZXh0Q2hhcigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIj1cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiKz1cIiwgVG9rZW5UeXBlLk9QX0FERF9FUVVBTFNfVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiK1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIrK1wiLCBUb2tlblR5cGUuT1BfQUREX0FERF9US04pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIitcIiwgVG9rZW5UeXBlLk9QX0FERF9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiLVwiOlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmdldE5leHRDaGFyKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiPVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCItPVwiLCBUb2tlblR5cGUuT1BfU1VCVFJfRVFVQUxTX1RLTik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIi1cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiLS1cIiwgVG9rZW5UeXBlLk9QX1NVQlRSX1NVQlRSX1RLTik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIj5cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiLT5cIiwgVG9rZW5UeXBlLk1BUFBJTkdfVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCItXCIsIFRva2VuVHlwZS5PUF9TVUJUUl9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiKlwiOlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmdldE5leHRDaGFyKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiPVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIqPVwiLCBUb2tlblR5cGUuT1BfTVVMVF9FUVVBTFNfVEtOKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIqXCIsIFRva2VuVHlwZS5PUF9NVUxUX1RLTik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCIvXCI6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZ2V0TmV4dENoYXIoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCIvXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZVNpbmdsZUxpbmVDb21tZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHRUb2tlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCIqXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZUJsb2NrQ29tbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0VG9rZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiPVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIvPVwiLCBUb2tlblR5cGUuT1BfRElWX0VRVUFMU19US04pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIi9cIiwgVG9rZW5UeXBlLk9QX0RJVklERV9US04pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiXlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiXlwiLCBUb2tlblR5cGUuT1BfQ0FSUk9UX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCIlXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIlXCIsIFRva2VuVHlwZS5PUF9NT0RVTFVTX1RLTik7XHJcblxyXG4gICAgICAgICAgICAvL01pc2NlbGxhbmVvdXNcclxuICAgICAgICAgICAgY2FzZSBcIn5cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIn5cIiwgVG9rZW5UeXBlLkJJTl9OT1RfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcIi5cIjpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldE5leHRDaGFyKCkgPT09IFwiLlwiICYmIHRoaXMuZ2V0Q2hhcih0aGlzLmN1ckluZGV4ICsgMikgPT09IFwiLlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYlRva2VuKFwiLi4uXCIsIFRva2VuVHlwZS5FTExJUFNFU19US04pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCIuXCIsIFRva2VuVHlwZS5ET1RfVEtOKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIixcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJUb2tlbihcIixcIiwgVG9rZW5UeXBlLkNPTU1BX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCI7XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmFiVG9rZW4oXCI7XCIsIFRva2VuVHlwZS5TRU1JX0NPTE9OX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgJ1wiJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWJTdHJpbmdMaXRlcmFsKCk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoTGV4ZXIuaXNMZXR0ZXIodGhpcy5nZXRDdXJDaGFyKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYklkZW50aWZpZXIoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoTGV4ZXIuaXNOdW1iZXIodGhpcy5nZXRDdXJDaGFyKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhYk51bWVyaWNMaXRlcmFsKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bmtub3duID0gdGhpcy5ncmFiVG9rZW4odGhpcy5nZXRDdXJDaGFyKCksIFRva2VuVHlwZS5VTktOT1dOX1RLTik7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5rbm93bi52YWx1ZSA9IHRoaXMuZ2V0Q3VyQ2hhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmtub3duO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgZ3JhYlRva2VuKHN0cjogc3RyaW5nLCB0eXBlOiBUb2tlblR5cGUpOiBUb2tlbiB7XHJcbiAgICAgICAgdGhpcy5pbmNyZW1lbnRDdXJJbmRleChzdHIubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oc3RyLCB0eXBlKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgbWFrZVRva2VuKHN0cjogc3RyaW5nLCB0eXBlOiBUb2tlblR5cGUpOiBUb2tlbiB7XHJcbiAgICAgICAgbGV0IHRrbiA9IG5ldyBUb2tlbihzdHIsIHRoaXMuY3VyTGluZSwgdGhpcy5jdXJDIC0gc3RyLmxlbmd0aCwgdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIHRrbjtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ3JhYk51bWVyaWNMaXRlcmFsKCk6IFRva2VuIHtcclxuICAgICAgICBsZXQgc3RyaW5nVmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIGxldCBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBjaCA9IHRoaXMuZ2V0Q3VyQ2hhcigpO1xyXG4gICAgICAgIGxldCBwb2ludCA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBkaXZpZGVCeSA9IDE7XHJcbiAgICAgICAgd2hpbGUgKExleGVyLmlzTnVtYmVyKGNoKSB8fCBjaCA9PT0gXCIuXCIpIHtcclxuICAgICAgICAgICAgc3RyaW5nVmFsdWUgKz0gY2g7XHJcbiAgICAgICAgICAgIGlmIChjaCAhPT0gXCJfXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gXCIuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmNyZW1lbnRDdXJJbmRleCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmdldEN1ckNoYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTnVtYmVyIGhhcyB0b28gbWFueSBkZWNpbWFsIHBvaW50c1wiJyArIG51bWJlciAvIGRpdmlkZUJ5ICsgJy5cIicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1ckxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1ckNcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBudW1iZXIgPSAxMCAqIG51bWJlciArIHBhcnNlSW50KGNoKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb2ludCkgZGl2aWRlQnkgKj0gMTA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5pbmNyZW1lbnRDdXJJbmRleCgxKTtcclxuICAgICAgICAgICAgY2ggPSB0aGlzLmdldEN1ckNoYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZSA9IG51bWJlciAvIGRpdmlkZUJ5O1xyXG4gICAgICAgIGxldCB0a24gPSB0aGlzLm1ha2VUb2tlbihzdHJpbmdWYWx1ZSwgVG9rZW5UeXBlLk5VTUVSSUNfTElURVJBTF9US04pO1xyXG4gICAgICAgIHRrbi52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiB0a247XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGdyYWJTdHJpbmdMaXRlcmFsKCk6IFRva2VuIHtcclxuICAgICAgICB0aGlzLmdyYWJUb2tlbignXCInLCBUb2tlblR5cGUuRE9VQkxFX1FVT1RFX1RLTik7XHJcbiAgICAgICAgbGV0IHN0ciA9IFwiXCI7XHJcbiAgICAgICAgbGV0IGNoID0gdGhpcy5nZXRDdXJDaGFyKCk7XHJcbiAgICAgICAgbGV0IGVzY2FwZUNoYXIgPSBmYWxzZTtcclxuICAgICAgICB3aGlsZSAoZXNjYXBlQ2hhciB8fCBjaCAhPT0gJ1wiJykge1xyXG4gICAgICAgICAgICBpZiAoIWVzY2FwZUNoYXIgfHwgY2ggPT09ICdcIicpIHtcclxuICAgICAgICAgICAgICAgIHN0ciArPSBjaDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2ggPT09IFwiXFxcXFwiKSB7XHJcbiAgICAgICAgICAgICAgICBlc2NhcGVDaGFyID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVzY2FwZUNoYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgICAgICBjaCA9IHRoaXMuZ2V0Q3VyQ2hhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdyYWJUb2tlbignXCInLCBUb2tlblR5cGUuRE9VQkxFX1FVT1RFX1RLTik7XHJcbiAgICAgICAgbGV0IHRrbiA9IHRoaXMubWFrZVRva2VuKCdcIicgKyBzdHIgKyAnXCInLCBUb2tlblR5cGUuU1RSSU5HX0xJVEVSQUxfVEtOKTtcclxuICAgICAgICB0a24udmFsdWUgPSBzdHI7XHJcbiAgICAgICAgcmV0dXJuIHRrbjtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ3JhYklkZW50aWZpZXIoKTogVG9rZW4ge1xyXG4gICAgICAgIGxldCBzdHIgPSBcIlwiO1xyXG4gICAgICAgIGxldCBjaCA9IHRoaXMuZ2V0Q3VyQ2hhcigpO1xyXG4gICAgICAgIHdoaWxlIChMZXhlci5pc0xldHRlcihjaCkgfHwgTGV4ZXIuaXNOdW1iZXIoY2gpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5jcmVtZW50Q3VySW5kZXgoMSk7XHJcbiAgICAgICAgICAgIHN0ciA9IHN0ciArIGNoO1xyXG4gICAgICAgICAgICBjaCA9IHRoaXMuZ2V0Q3VyQ2hhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKHN0cikge1xyXG4gICAgICAgICAgICBjYXNlIFwidHlwZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKFwidHlwZVwiLCBUb2tlblR5cGUuVFlQRV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwibW9kdWxlXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oXCJtb2R1bGVcIiwgVG9rZW5UeXBlLk1PRFVMRV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwid2l0aFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKFwid2l0aFwiLCBUb2tlblR5cGUuV0lUSF9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiaWZcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcImlmXCIsIFRva2VuVHlwZS5JRl9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiZWxzZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKFwiZWxzZVwiLCBUb2tlblR5cGUuRUxTRV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwid2hpbGVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcIndoaWxlXCIsIFRva2VuVHlwZS5XSElMRV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiZm9yXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oXCJmb3JcIiwgVG9rZW5UeXBlLkZPUl9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiaW5cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcImluXCIsIFRva2VuVHlwZS5JTl9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiYnJlYWtcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcImJyZWFrXCIsIFRva2VuVHlwZS5CUkVBS19US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiY29udGludWVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcImNvbnRpbnVlXCIsIFRva2VuVHlwZS5DT05USU5VRV9US04pO1xyXG5cclxuICAgICAgICAgICAgLy9CaXR3aXNlIE9wZXJhdG9yc1xyXG4gICAgICAgICAgICBjYXNlIFwib3JcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcIm9yXCIsIFRva2VuVHlwZS5CSU5fT1JfVEtOKTtcclxuICAgICAgICAgICAgY2FzZSBcImFuZFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKFwiYW5kXCIsIFRva2VuVHlwZS5CSU5fQU5EX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ4b3JcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcInhvclwiLCBUb2tlblR5cGUuQklOX1hPUl9US04pO1xyXG5cclxuICAgICAgICAgICAgLy9Db25kaXRpb25hbHNcclxuICAgICAgICAgICAgY2FzZSBcInRydWVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcInRydWVcIiwgVG9rZW5UeXBlLkNPTkRfVFJVRV9US04pO1xyXG4gICAgICAgICAgICBjYXNlIFwiZmFsc2VcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcImZhbHNlXCIsIFRva2VuVHlwZS5DT05EX0ZBTFNFX1RLTik7XHJcblxyXG4gICAgICAgICAgICAvL1R5cGVzXHJcbiAgICAgICAgICAgIGNhc2UgXCJ2b2lkXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oXCJ2b2lkXCIsIFRva2VuVHlwZS5WT0lEX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCJudW1cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcIm51bVwiLCBUb2tlblR5cGUuTlVNX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcInN0cmluZ1wiLCBUb2tlblR5cGUuU1RSSU5HX1RLTik7XHJcbiAgICAgICAgICAgIGNhc2UgXCJib29sXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVG9rZW4oXCJib29sXCIsIFRva2VuVHlwZS5CT09MX1RLTik7XHJcblxyXG4gICAgICAgICAgICAvLyBsYW1iZGFzXHJcbiAgICAgICAgICAgIGNhc2UgXCJyZXR1cm5cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VUb2tlbihcInJldHVyblwiLCBUb2tlblR5cGUuUkVUVVJOX1RLTik7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZVRva2VuKHN0ciwgVG9rZW5UeXBlLklERU5USUZJRVJfVEtOKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNvbnN1bWVTaW5nbGVMaW5lQ29tbWVudCgpIHtcclxuICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDIpO1xyXG4gICAgICAgIHdoaWxlICh0aGlzLmN1ckluZGV4IDwgdGhpcy5wcmdtU3RyaW5nLmxlbmd0aCAmJiB0aGlzLmdldEN1ckNoYXIoKSAhPT0gXCJcXG5cIikge1xyXG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgY29uc3VtZUJsb2NrQ29tbWVudCgpIHtcclxuICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDIpO1xyXG4gICAgICAgIHdoaWxlICh0aGlzLmN1ckluZGV4IDwgdGhpcy5wcmdtU3RyaW5nLmxlbmd0aCAmJiAhKHRoaXMuZ2V0Q3VyQ2hhcigpID09PSBcIipcIiAmJiB0aGlzLmdldE5leHRDaGFyKCkgPT09IFwiL1wiKSkge1xyXG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluY3JlbWVudEN1ckluZGV4KDIpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGlzV2hpdGVzcGFjZShjaDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGNoID09PSBcIiBcIiB8fCBjaCA9PT0gXCJcXHRcIiB8fCBjaCA9PT0gXCJcXHJcIiB8fCBjaCA9PT0gXCJcXG5cIjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBpc0xldHRlcihjaDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IG4gPSBjaC5jaGFyQ29kZUF0KDApO1xyXG4gICAgICAgIHJldHVybiAobiA+PSA2NSAmJiBuIDwgOTEpIHx8IChuID49IDk3ICYmIG4gPCAxMjMpIHx8IGNoID09PSBcIidcIiB8fCBjaCA9PT0gXCJfXCI7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNOdW1iZXIoY2g6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBuID0gY2guY2hhckNvZGVBdCgwKTtcclxuICAgICAgICByZXR1cm4gKG4gPj0gNDggJiYgbiA8PSA1NykgfHwgY2ggPT09IFwiX1wiO1xyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scuft/lang/Lexer.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Parser.ts":
/*!**********************************!*\
  !*** ./src/scuft/lang/Parser.ts ***!
  \**********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Parser\n/* harmony export */ });\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n/* harmony import */ var _Token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Token */ \"./src/scuft/lang/Token.ts\");\n/* harmony import */ var _TokenType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TokenType */ \"./src/scuft/lang/TokenType.ts\");\n\r\n\r\n\r\nclass Parser {\r\n    constructor(lexer) {\r\n        this.ERROR_HEADER = \"----ParseError----\\n\";\r\n        this.tokenQueue = [];\r\n        this.precedence = new Map();\r\n        this.LOWEST_PRECEDENCE = 0;\r\n        this.HIGHEST_PRECEDENCE = 10;\r\n        this.lexer = lexer;\r\n        this.initPrecedenceMap();\r\n    }\r\n    err(msg, token) {\r\n        throw this.ERROR_HEADER + this.lexer.errHandler.newErrPoint(msg, token.line, token.c);\r\n    }\r\n    errAfterLast(msg, curToken) {\r\n        throw this.ERROR_HEADER + this.lexer.errHandler.newErrAfterLastToken(msg, curToken);\r\n    }\r\n    checkToken(type) {\r\n        return this.peekToken().type === type;\r\n    }\r\n    assertToken(type, expectedTkn, msg) {\r\n        let tkn = this.peekToken();\r\n        if (tkn.type !== type) {\r\n            let res = \"Expected \";\r\n            if (expectedTkn) {\r\n                res += expectedTkn;\r\n            }\r\n            else {\r\n                res += _TokenType__WEBPACK_IMPORTED_MODULE_2__.default[type];\r\n            }\r\n            if (tkn.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN) {\r\n                res += \" but got '\" + tkn.stringValue + \"' instead\";\r\n            }\r\n            else {\r\n                res += \" but got \" + tkn.stringValue + \" instead\";\r\n            }\r\n            if (msg) {\r\n                res += \": \" + msg;\r\n            }\r\n            this.errAfterLast(res, tkn);\r\n        }\r\n    }\r\n    matchAheadTokens(...tokenTypes) {\r\n        let res = true;\r\n        for (let i = 0; i < tokenTypes.length; i++) {\r\n            if (tokenTypes[i] !== this.lookAheadToken(i + 1).type) {\r\n                res = false;\r\n                break;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    lookAheadToken(amount) {\r\n        console.assert(amount > 0, \"Must only look ahead by amount greater than 0. Instead got %s\", amount);\r\n        for (let i = this.tokenQueue.length; i < amount; i++) {\r\n            this.tokenQueue.push(this.lexer.nextToken());\r\n        }\r\n        return this.tokenQueue[amount - 1];\r\n    }\r\n    peekToken() {\r\n        return this.lookAheadToken(1);\r\n    }\r\n    nextToken() {\r\n        if (this.tokenQueue.length > 0) {\r\n            return this.tokenQueue.shift();\r\n        }\r\n        else {\r\n            return this.lexer.nextToken();\r\n        }\r\n    }\r\n    parseProgram() {\r\n        let program = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTProgram();\r\n        program.modules = [];\r\n        program.typeDefinitions = [];\r\n        program.statements = [];\r\n        while (this.peekToken().type != _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN) {\r\n            switch (this.peekToken().type) {\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.MODULE_TKN:\r\n                    program.modules.push(this.parseModule());\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.TYPE_TKN:\r\n                    program.typeDefinitions.push(this.parseTypeDefinition());\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.WITH_TKN:\r\n                    this.err(\"Can't use with statement in global scope\", this.peekToken());\r\n                default:\r\n                    program.statements.push(this.parseStatement());\r\n            }\r\n        }\r\n        return program;\r\n    }\r\n    parseModule() {\r\n        let module = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTModule();\r\n        this.nextToken();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"a module name\", \"Module must declare name after module keyword\");\r\n        module.name = this.nextToken();\r\n        module.typeDefinitions = [];\r\n        module.statements = [];\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_CURLY_TKN, \"{\");\r\n        this.nextToken();\r\n        let tkn = this.peekToken();\r\n        while (tkn.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_CURLY_TKN) {\r\n            switch (tkn.type) {\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.TYPE_TKN:\r\n                    module.typeDefinitions.push(this.parseTypeDefinition());\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.MODULE_TKN:\r\n                    this.err(\"Module declaration must be declared in global scope\", tkn);\r\n                default:\r\n                    module.statements.push(this.parseStatement());\r\n                    break;\r\n            }\r\n            tkn = this.peekToken();\r\n        }\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_CURLY_TKN, \"}\");\r\n        this.nextToken();\r\n        return module;\r\n    }\r\n    parseTypeDefinition() {\r\n        let typeDef = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeDefinition();\r\n        this.nextToken();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"identifier\", \"Type definition must declare name after type keyword\");\r\n        typeDef.name = this.nextToken();\r\n        typeDef.typeDeclarations = [];\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_CURLY_TKN, \"{\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_CURLY_TKN)) {\r\n            typeDef.typeDeclarations.push(this.parseDeclaration());\r\n            this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of statements\");\r\n            this.nextToken();\r\n        }\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_CURLY_TKN, \"}\");\r\n        this.nextToken();\r\n        return typeDef;\r\n    }\r\n    parseBlock() {\r\n        let block = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTBlock();\r\n        block.statements = [];\r\n        block.withModules = [];\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_CURLY_TKN, \"{\");\r\n        this.nextToken();\r\n        let tkn = this.peekToken();\r\n        while (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_CURLY_TKN)) {\r\n            switch (tkn.type) {\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.TYPE_TKN:\r\n                    this.err(\"Type declarations must be declared in a module or with global scope\", tkn);\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.MODULE_TKN:\r\n                    this.err(\"Module declaration must be declared in global scope\", tkn);\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.WITH_TKN:\r\n                    this.nextToken();\r\n                    this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"a module name\", \"With keyword must be followed by a name\");\r\n                    block.withModules.push(this.nextToken());\r\n                    this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of with statements\");\r\n                    this.nextToken();\r\n                    break;\r\n                default:\r\n                    block.statements.push(this.parseStatement());\r\n                    break;\r\n            }\r\n            tkn = this.peekToken();\r\n        }\r\n        this.nextToken();\r\n        return block;\r\n    }\r\n    parseStatement() {\r\n        let tkn = this.peekToken();\r\n        let statement;\r\n        switch (tkn.type) {\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN:\r\n                if (this.lookAheadToken(this.getEndOfMember()).type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_PARENS_TKN) {\r\n                    statement = this.parseCall();\r\n                    this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of function calls\");\r\n                    this.nextToken();\r\n                }\r\n                else {\r\n                    statement = this.parseDeclaration();\r\n                    if (statement.rvalue && statement.rvalue.constructor.name === _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFunction.name) {\r\n                        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN)) {\r\n                            let funcName = this.lexer.errHandler.newErrToken(\"Error in declared function\", statement.lvalue.rootName);\r\n                            let semiColonError = this.lexer.errHandler.newErrAfterLastToken(\"Semi-colons are not needed after a function declaration\", this.peekToken());\r\n                            throw this.ERROR_HEADER + funcName + semiColonError;\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN)) {\r\n                        this.err(\"Unbalanced parenthesis. Expected a semi-colon\", this.peekToken());\r\n                    }\r\n                    this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of declarations\");\r\n                    this.nextToken();\r\n                }\r\n                break;\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IF_TKN:\r\n                statement = this.parseIf();\r\n                break;\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.WHILE_TKN:\r\n                statement = this.parseWhile();\r\n                break;\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.FOR_TKN:\r\n                statement = this.parseFor();\r\n                break;\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.BREAK_TKN:\r\n                statement = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTBreak();\r\n                this.nextToken();\r\n                this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of break statements\");\r\n                this.nextToken();\r\n                break;\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.CONTINUE_TKN:\r\n                statement = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTContinue();\r\n                this.nextToken();\r\n                this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of continue statements\");\r\n                this.nextToken();\r\n                break;\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RETURN_TKN:\r\n                statement = this.parseReturn();\r\n                break;\r\n            default:\r\n                this.err(\"Statement can't start with \" + tkn.stringValue, tkn);\r\n        }\r\n        return statement;\r\n    }\r\n    parseDeclaration() {\r\n        let declaration = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTDeclaration();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"a variable reference name\", \"Declaration must have a name\");\r\n        declaration.lvalue = this.parseMember();\r\n        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COLON_TKN)) {\r\n            this.nextToken();\r\n            declaration.type = this.parseType();\r\n        }\r\n        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.ASSIGNMENT_TKN)) {\r\n            this.nextToken();\r\n            let functionCheckAhead = 1;\r\n            let aheadToken = this.lookAheadToken(functionCheckAhead);\r\n            while (aheadToken.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN &&\r\n                aheadToken.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COLON_TKN &&\r\n                aheadToken.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.MAPPING_TKN &&\r\n                !(aheadToken.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN &&\r\n                    this.lookAheadToken(functionCheckAhead + 1).type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_CURLY_TKN) &&\r\n                aheadToken.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN) {\r\n                functionCheckAhead++;\r\n                aheadToken = this.lookAheadToken(functionCheckAhead);\r\n            }\r\n            if (aheadToken.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN) {\r\n                this.err(\"Unfinished declaration at the end of the file\", declaration.lvalue.rootName);\r\n            }\r\n            else if (aheadToken.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN) {\r\n                declaration.rvalue = this.parseExpression(this.LOWEST_PRECEDENCE, 0);\r\n            }\r\n            else {\r\n                declaration.rvalue = this.parseFunction();\r\n            }\r\n        }\r\n        if (!declaration.type && !declaration.rvalue) {\r\n            if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN)) {\r\n                this.err(\"Expressions can't serve as statements in this language\", declaration.lvalue.rootName);\r\n            }\r\n            else {\r\n                this.err(this.peekToken().stringValue +\r\n                    \" is not allowed here. Declaration must either assign a value using = or specify a type using :\", this.peekToken());\r\n            }\r\n        }\r\n        return declaration;\r\n    }\r\n    parseType() {\r\n        let astType = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTType();\r\n        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_PARENS_TKN)) {\r\n            this.nextToken();\r\n            astType.inputType = [];\r\n            while (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN) && !this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN)) {\r\n                astType.inputType.push(this.parseType());\r\n                if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COMMA_TKN)) {\r\n                    this.nextToken();\r\n                }\r\n                else if (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN)) {\r\n                    this.errAfterLast(\"Invalid type definition. Expected either a comma or )\", this.peekToken());\r\n                }\r\n            }\r\n            if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN)) {\r\n                this.errAfterLast(\"Unterminated type declaration at end of file\", this.peekToken());\r\n            }\r\n            this.nextToken();\r\n            this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.MAPPING_TKN, \"->\", \"Function type declarations must declare a return type.\");\r\n            this.nextToken();\r\n            astType.outType = this.parseType();\r\n        }\r\n        else {\r\n            let tkn = this.peekToken();\r\n            switch (tkn.type) {\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.NUM_TKN:\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.STRING_TKN:\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.BOOL_TKN:\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.VOID_TKN:\r\n                    astType.type = tkn;\r\n                    this.nextToken();\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN:\r\n                    astType.type = this.parseMember();\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN:\r\n                    this.errAfterLast(\"Unterminated type declaration at end of file\", tkn);\r\n                default:\r\n                    this.err(\"Type must be an identifier\", tkn);\r\n            }\r\n        }\r\n        return astType;\r\n    }\r\n    parseIf() {\r\n        let ifStatement = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTIf();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IF_TKN, \"If statement must start with an if token\");\r\n        this.nextToken();\r\n        ifStatement.condition = this.parseExpression(this.LOWEST_PRECEDENCE, 0);\r\n        ifStatement.consequence = this.parseBlock();\r\n        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.ELSE_TKN)) {\r\n            this.nextToken();\r\n            if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IF_TKN)) {\r\n                ifStatement.alternative = this.parseIf();\r\n            }\r\n            else if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_CURLY_TKN)) {\r\n                ifStatement.alternative = this.parseBlock();\r\n            }\r\n            else {\r\n                this.err(this.peekToken().stringValue + \" is not allowed here\", this.peekToken());\r\n            }\r\n        }\r\n        return ifStatement;\r\n    }\r\n    parseWhile() {\r\n        let whileStatement = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTWhile();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.WHILE_TKN, \"While statement must start with a while token\");\r\n        this.nextToken();\r\n        whileStatement.condition = this.parseExpression(this.LOWEST_PRECEDENCE, 0);\r\n        whileStatement.block = this.parseBlock();\r\n        return whileStatement;\r\n    }\r\n    parseFor() {\r\n        let forStatement = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFor();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.FOR_TKN, \"For statement must start with a for token\");\r\n        this.nextToken();\r\n        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_PARENS_TKN)) {\r\n            this.err(\"For loops don't require encapsulating parenthesis in this language\", this.peekToken());\r\n        }\r\n        switch (this.lookAheadToken(2).type) {\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_CURLY_TKN:\r\n                this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"an iterable\");\r\n                forStatement.iterableName = this.parseMember();\r\n                break;\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COMMA_TKN:\r\n                this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"an item variable declarations\");\r\n                forStatement.itemParamDec = this.nextToken();\r\n                this.nextToken();\r\n                this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"an index variable declaration\");\r\n                forStatement.indexParamDec = this.nextToken();\r\n                this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IN_TKN);\r\n                this.nextToken();\r\n                this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"an iterable\");\r\n                forStatement.iterableName = this.parseMember();\r\n                break;\r\n            case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IN_TKN:\r\n                this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"an index variable declaration\");\r\n                forStatement.itemParamDec = this.nextToken();\r\n                this.nextToken();\r\n                if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN)) {\r\n                    forStatement.iterableName = this.parseMember();\r\n                    break;\r\n                }\r\n                else {\r\n                    let lowerBound = this.lookAheadToken(2);\r\n                    if (lowerBound.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.NUMERIC_LITERAL_TKN) {\r\n                        this.err(\"Expected a number for the lower bound\", lowerBound);\r\n                    }\r\n                    if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_SQUARE_TKN)) {\r\n                        forStatement.lowerBound = lowerBound.value;\r\n                    }\r\n                    else if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_PARENS_TKN)) {\r\n                        forStatement.lowerBound = lowerBound.value + 1;\r\n                    }\r\n                    else {\r\n                        this.err(\"Expected either a [ or a (\", this.peekToken());\r\n                    }\r\n                    this.nextToken();\r\n                    this.nextToken();\r\n                    this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COMMA_TKN, \"Invalid for loop range\");\r\n                    this.nextToken();\r\n                    let upperBound = this.nextToken();\r\n                    if (upperBound.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.NUMERIC_LITERAL_TKN) {\r\n                        this.err(\"Expected a number for the upper bound\", upperBound);\r\n                    }\r\n                    if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_SQUARE_TKN)) {\r\n                        forStatement.upperBound = upperBound.value;\r\n                    }\r\n                    else if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN)) {\r\n                        forStatement.upperBound = upperBound.value - 1;\r\n                    }\r\n                    else {\r\n                        this.err(\"Expected either a ] or a )\", this.peekToken());\r\n                    }\r\n                    this.nextToken();\r\n                    break;\r\n                }\r\n            default:\r\n                this.err(\"Invalid for loop\", this.peekToken());\r\n        }\r\n        forStatement.block = this.parseBlock();\r\n        return forStatement;\r\n    }\r\n    parseReturn() {\r\n        let returnStatement = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTReturn();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RETURN_TKN, \"Return statement must start with a return token\");\r\n        this.nextToken();\r\n        if (this.peekToken().type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN) {\r\n            returnStatement.returnValue = this.parseExpression(this.LOWEST_PRECEDENCE, 0);\r\n        }\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN, \";\", \"Semi-colons are required at the end of return statements\");\r\n        this.nextToken();\r\n        return returnStatement;\r\n    }\r\n    setPrecedence(precedence, ...types) {\r\n        for (let i = 0; i < types.length; i++) {\r\n            this.precedence.set(types[i], precedence);\r\n        }\r\n    }\r\n    initPrecedenceMap() {\r\n        this.setPrecedence(1, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_OR_TKN);\r\n        this.setPrecedence(2, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_XOR_TKN);\r\n        this.setPrecedence(3, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_AND_TKN);\r\n        this.setPrecedence(4, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.BIN_OR_TKN);\r\n        this.setPrecedence(5, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.BIN_XOR_TKN);\r\n        this.setPrecedence(6, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.BIN_AND_TKN);\r\n        this.setPrecedence(7, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_EQUALS_TKN, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_NOT_EQUALS_TKN);\r\n        this.setPrecedence(8, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_GREATER_THAN_EQUAL_TKN, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_LESS_THAN_EQUAL_TKN, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_GREATER_THAN_TKN, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_LESS_THAN_TKN);\r\n        this.setPrecedence(9, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.BIN_SHIFT_LEFT_TKN, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.BIN_SHIFT_RIGHT_TKN, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.BIN_SHIFT_ARITHMETIC_RIGHT_TKN);\r\n        this.setPrecedence(10, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.OP_ADD_TKN, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.OP_SUBTR_TKN);\r\n        this.setPrecedence(11, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.OP_MULT_TKN, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.OP_DIVIDE_TKN);\r\n        this.setPrecedence(12, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.OP_CARROT_TKN);\r\n    }\r\n    parseExpression(precedence, depthCount) {\r\n        let expression;\r\n        let tkn = this.peekToken();\r\n        while (tkn.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.SEMI_COLON_TKN &&\r\n            tkn.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COMMA_TKN &&\r\n            tkn.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN &&\r\n            tkn.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_CURLY_TKN &&\r\n            tkn.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN) {\r\n            switch (tkn.type) {\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_PARENS_TKN:\r\n                    if (expression)\r\n                        this.err(\"Left parenthesis in an expression can only follow an operator\", tkn);\r\n                    this.nextToken();\r\n                    expression = this.parseExpression(this.LOWEST_PRECEDENCE, depthCount + 1);\r\n                    this.nextToken();\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.NUMERIC_LITERAL_TKN:\r\n                    if (expression)\r\n                        this.err(\"Number in an expression can only follow an operator\", tkn);\r\n                    expression = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTLiteral();\r\n                    expression.value = this.nextToken();\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.STRING_LITERAL_TKN:\r\n                    if (expression)\r\n                        this.err(\"String in an expression can only follow an operator\", tkn);\r\n                    expression = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTLiteral();\r\n                    expression.value = this.nextToken();\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_TRUE_TKN:\r\n                    if (expression)\r\n                        this.err(\"TRUE in an expression can only follow an operator\", tkn);\r\n                    expression = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTLiteral();\r\n                    expression.value = this.nextToken();\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_FALSE_TKN:\r\n                    if (expression)\r\n                        this.err(\"FALSE in an expression can only follow an operator\", tkn);\r\n                    expression = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTLiteral();\r\n                    expression.value = this.nextToken();\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COND_NOT_TKN:\r\n                    if (expression)\r\n                        this.err(\"NOT (!) in an expression can only follow a boolean expression\", tkn);\r\n                    expression = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTUnaryOperator();\r\n                    expression.operation = this.nextToken();\r\n                    expression.value = this.parseExpression(precedence, depthCount);\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.BIN_NOT_TKN:\r\n                    if (expression)\r\n                        this.err(\"NOT (~) in an expression can only follow a numeric literal\", tkn);\r\n                    expression = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTUnaryOperator();\r\n                    expression.operation = this.nextToken();\r\n                    expression.value = this.parseExpression(precedence, depthCount);\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN:\r\n                    switch (this.lookAheadToken(this.getEndOfMember()).type) {\r\n                        case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_PARENS_TKN:\r\n                            if (expression)\r\n                                this.err(\"Function call in an expression can only follow an operator\", tkn);\r\n                            expression = this.parseCall();\r\n                            break;\r\n                        case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_CURLY_TKN:\r\n                            if (expression)\r\n                                this.err(\"Type construction can only follow an operator\", tkn);\r\n                            expression = this.parseTypeConstruction();\r\n                            break;\r\n                        default:\r\n                            if (expression)\r\n                                this.err(\"Variable in an expression can only follow operator\", tkn);\r\n                            expression = this.parseMember();\r\n                            break;\r\n                    }\r\n                    break;\r\n                case _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.OP_SUBTR_TKN:\r\n                    if (!expression) {\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTBinaryOperator();\r\n                        expression.lvalue = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTLiteral();\r\n                        expression.lvalue.value = new _Token__WEBPACK_IMPORTED_MODULE_1__.default(\"0\", tkn.line, tkn.c, _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.NUMERIC_LITERAL_TKN);\r\n                        expression.lvalue.value.value = 0;\r\n                        expression.operation = this.nextToken();\r\n                        expression.rvalue = this.parseExpression(this.HIGHEST_PRECEDENCE, depthCount);\r\n                        break;\r\n                    }\r\n                default:\r\n                    if (!expression)\r\n                        this.err(tkn.stringValue + \" is an unknown prefix operator\", tkn);\r\n                    let otherPrecedence = this.precedence.get(tkn.type);\r\n                    if (otherPrecedence !== undefined && otherPrecedence > precedence) {\r\n                        let temp = expression;\r\n                        expression = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTBinaryOperator();\r\n                        expression.lvalue = temp;\r\n                        expression.operation = this.nextToken();\r\n                        expression.rvalue = this.parseExpression(otherPrecedence, depthCount);\r\n                    }\r\n                    else {\r\n                        return expression;\r\n                    }\r\n            }\r\n            tkn = this.peekToken();\r\n        }\r\n        if (!expression) {\r\n            this.errAfterLast(\"Expected an expression but got nothing\", this.peekToken());\r\n        }\r\n        else if (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN) && depthCount !== 0) {\r\n            this.errAfterLast(\"Unbalanced parenthesis. Expected \" + depthCount + \" more )\", tkn);\r\n        }\r\n        else if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN)) {\r\n            this.errAfterLast(\"Unterminated expression at end of file\", tkn);\r\n        }\r\n        return expression;\r\n    }\r\n    getEndOfMember() {\r\n        console.assert(this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN), \"getEndOfMember should only be used when a member is suspected: the peek token is an identifier\");\r\n        let memberCheckAhead = 2;\r\n        while (this.lookAheadToken(memberCheckAhead).type == _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.DOT_TKN &&\r\n            this.lookAheadToken(memberCheckAhead + 1).type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN) {\r\n            memberCheckAhead += 2;\r\n        }\r\n        return memberCheckAhead;\r\n    }\r\n    parseMember() {\r\n        let member = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTMember();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"a variable reference name\");\r\n        member.rootName = this.nextToken();\r\n        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.DOT_TKN)) {\r\n            this.nextToken();\r\n            member.memberSelect = this.parseMember();\r\n        }\r\n        return member;\r\n    }\r\n    parseTypeConstruction() {\r\n        let typeConstruct = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTTypeConstruction();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN);\r\n        typeConstruct.typeName = this.parseMember();\r\n        this.nextToken();\r\n        typeConstruct.assignments = [];\r\n        while (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_CURLY_TKN)) {\r\n            let declaration = this.parseDeclaration();\r\n            if (declaration.type) {\r\n                this.err(\"Type constructor assignment should not specify a type\", declaration.lvalue.rootName);\r\n            }\r\n            typeConstruct.assignments.push(declaration);\r\n            if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_CURLY_TKN) {\r\n                    this.errAfterLast(\"Expected another assignment after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else if (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_CURLY_TKN)) {\r\n                this.errAfterLast(\"Invalid type construction. Expected either a comma or }\", this.peekToken());\r\n            }\r\n        }\r\n        this.nextToken();\r\n        return typeConstruct;\r\n    }\r\n    parseFunction() {\r\n        let func = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTFunction();\r\n        func.paramDeclaration = [];\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_PARENS_TKN, \"(\", \"Function declaration must specify parameters or use ()\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN) && !this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN)) {\r\n            func.paramDeclaration.push(this.parseDeclaration());\r\n            if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN) {\r\n                    this.errAfterLast(\"Expected another parameter definition after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else if (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN)) {\r\n                this.errAfterLast(\"Invalid function parameter definition. Expected either a comma or )\", this.peekToken());\r\n            }\r\n        }\r\n        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN)) {\r\n            this.errAfterLast(\"Unterminated parameter declaration at end of file\", this.peekToken());\r\n        }\r\n        this.nextToken();\r\n        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.MAPPING_TKN)) {\r\n            this.nextToken();\r\n            func.returnType = this.parseType();\r\n        }\r\n        if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_CURLY_TKN)) {\r\n            func.block = this.parseBlock();\r\n        }\r\n        else {\r\n            this.err(this.peekToken().stringValue +\r\n                \" is not allowed here. Function must either declare a return type using -> or omit completely\", this.peekToken());\r\n        }\r\n        return func;\r\n    }\r\n    parseCall() {\r\n        let call = new _Ast__WEBPACK_IMPORTED_MODULE_0__.ASTCall();\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.IDENTIFIER_TKN, \"a function reference name\");\r\n        call.functionName = this.parseMember();\r\n        call.givenParams = [];\r\n        this.assertToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.LEFT_PARENS_TKN, \"(\");\r\n        this.nextToken();\r\n        while (!this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN)) {\r\n            if (this.checkToken(_TokenType__WEBPACK_IMPORTED_MODULE_2__.default.COMMA_TKN)) {\r\n                let expectedTkn = this.lookAheadToken(2);\r\n                if (expectedTkn.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.RIGHT_PARENS_TKN || expectedTkn.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__.default.END_TKN) {\r\n                    this.errAfterLast(\"Expected another expression after the comma but got nothing\", expectedTkn);\r\n                }\r\n                else {\r\n                    this.nextToken();\r\n                }\r\n            }\r\n            else {\r\n                call.givenParams.push(this.parseExpression(this.LOWEST_PRECEDENCE, 0));\r\n            }\r\n        }\r\n        this.nextToken();\r\n        return call;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scuft/lang/Parser.ts\n");

/***/ }),

/***/ "./src/scuft/lang/ScuftTest.ts":
/*!*************************************!*\
  !*** ./src/scuft/lang/ScuftTest.ts ***!
  \*************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* export default binding */ __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _Lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lexer */ \"./src/scuft/lang/Lexer.ts\");\n/* harmony import */ var _Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Parser */ \"./src/scuft/lang/Parser.ts\");\n/* harmony import */ var _test_5_ModuleTypeDefinitionTest_scft__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../test/5-ModuleTypeDefinitionTest.scft */ \"./src/scuft/test/5-ModuleTypeDefinitionTest.scft\");\n/* harmony import */ var _Ast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Ast */ \"./src/scuft/lang/Ast.ts\");\n\r\n\r\n\r\n\r\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\r\n    function testString(input) {\r\n        let parser = new _Parser__WEBPACK_IMPORTED_MODULE_1__.default(new _Lexer__WEBPACK_IMPORTED_MODULE_0__.default(input));\r\n        let prgm = parser.parseProgram();\r\n        console.log(prgm);\r\n        _Ast__WEBPACK_IMPORTED_MODULE_3__.printAST(prgm);\r\n        console.log(\"---------------------\");\r\n    }\r\n    testString(_test_5_ModuleTypeDefinitionTest_scft__WEBPACK_IMPORTED_MODULE_2__.default);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL1NjdWZ0VGVzdC50cz8wYjQ4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRCO0FBQ0U7QUFJMEM7QUFFdEM7QUFDbEMsNkJBQWUsc0NBQVk7SUFDdkIsU0FBUyxVQUFVLENBQUMsS0FBYTtRQUk3QixJQUFJLE1BQU0sR0FBRyxJQUFJLDRDQUFNLENBQUMsSUFBSSwyQ0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDMUMsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEIsMENBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFLRCxVQUFVLENBQUMsMEVBQWlCLENBQUMsQ0FBQztBQUdsQyxDQUFDIiwiZmlsZSI6Ii4vc3JjL3NjdWZ0L2xhbmcvU2N1ZnRUZXN0LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExleGVyIGZyb20gXCIuL0xleGVyXCI7XHJcbmltcG9ydCBQYXJzZXIgZnJvbSBcIi4vUGFyc2VyXCI7XHJcblxyXG5pbXBvcnQgc2ltcGxlVGVzdCBmcm9tIFwiLi4vdGVzdC8xLVNpbXBsZVRlc3Quc2NmdFwiO1xyXG5pbXBvcnQgZXhwcmVzc2lvblRlc3QgZnJvbSBcIi4uL3Rlc3QvNC1FeHByZXNzaW9uVGVzdC5zY2Z0XCI7XHJcbmltcG9ydCBtb2R1bGVUeXBlRGVmVGVzdCBmcm9tIFwiLi4vdGVzdC81LU1vZHVsZVR5cGVEZWZpbml0aW9uVGVzdC5zY2Z0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBBU1REZWJ1ZyBmcm9tIFwiLi9Bc3RcIjtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gdGVzdFN0cmluZyhpbnB1dDogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gbGV0IGxleGVyID0gbmV3IExleGVyKGlucHV0KTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhsZXhlci5sZXgoKSk7XHJcblxyXG4gICAgICAgIGxldCBwYXJzZXIgPSBuZXcgUGFyc2VyKG5ldyBMZXhlcihpbnB1dCkpO1xyXG4gICAgICAgIGxldCBwcmdtID0gcGFyc2VyLnBhcnNlUHJvZ3JhbSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHByZ20pO1xyXG5cclxuICAgICAgICBBU1REZWJ1Zy5wcmludEFTVChwcmdtKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS0tLS0tLS0tLS1cIik7XHJcbiAgICB9XHJcbiAgICAvLyB0ZXN0U3RyaW5nKHNpbXBsZVRlc3QpO1xyXG4gICAgLy8gdGVzdFN0cmluZyhsaXRlcmFsVGVzdCk7XHJcbiAgICAvLyB0ZXN0U3RyaW5nKHR5cGVUZXN0KTtcclxuICAgIC8vdGVzdFN0cmluZyhleHByZXNzaW9uVGVzdCk7XHJcbiAgICB0ZXN0U3RyaW5nKG1vZHVsZVR5cGVEZWZUZXN0KTtcclxuXHJcbiAgICAvLyB0ZXN0U3RyaW5nKFwiYjIgPSAoYTogbnVtLCBiOiBudW0pIC0+IG51bSB7fTtcIik7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scuft/lang/ScuftTest.ts\n");

/***/ }),

/***/ "./src/scuft/lang/Token.ts":
/*!*********************************!*\
  !*** ./src/scuft/lang/Token.ts ***!
  \*********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Token\n/* harmony export */ });\n/* harmony import */ var _TokenType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TokenType */ \"./src/scuft/lang/TokenType.ts\");\n\r\nclass Token {\r\n    constructor(stringValue, line, c, type) {\r\n        this.stringValue = stringValue;\r\n        this.line = line;\r\n        this.c = c;\r\n        this.type = type;\r\n        this.typeName = _TokenType__WEBPACK_IMPORTED_MODULE_0__.default[type];\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL1Rva2VuLnRzP2NiNDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7QUFFckIsTUFBTSxLQUFLO0lBV3RCLFlBQVksV0FBbUIsRUFBRSxJQUFZLEVBQUUsQ0FBUyxFQUFFLElBQWU7UUFDckUsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFFL0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLCtDQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL3NjdWZ0L2xhbmcvVG9rZW4udHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVG9rZW5UeXBlIGZyb20gXCIuL1Rva2VuVHlwZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9rZW4ge1xyXG4gICAgc3RyaW5nVmFsdWU6IHN0cmluZzsgLy8gc3RyaW5nIG9mIHRva2VuIGluIHdyaXR0ZW4gcHJvZ3JhbVxyXG5cclxuICAgIGxpbmU6IG51bWJlcjtcclxuICAgIGM6IG51bWJlcjsgLy8gaG9yaXpvbnRhbCBwb3ppdGlvbmFsIGFjY3Jvc3MgbGluZVxyXG5cclxuICAgIHR5cGU6IFRva2VuVHlwZTtcclxuICAgIHR5cGVOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgdmFsdWUhOiBudW1iZXIgfCBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc3RyaW5nVmFsdWU6IHN0cmluZywgbGluZTogbnVtYmVyLCBjOiBudW1iZXIsIHR5cGU6IFRva2VuVHlwZSkge1xyXG4gICAgICAgIHRoaXMuc3RyaW5nVmFsdWUgPSBzdHJpbmdWYWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5saW5lID0gbGluZTtcclxuICAgICAgICB0aGlzLmMgPSBjO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMudHlwZU5hbWUgPSBUb2tlblR5cGVbdHlwZV07XHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scuft/lang/Token.ts\n");

/***/ }),

/***/ "./src/scuft/lang/TokenType.ts":
/*!*************************************!*\
  !*** ./src/scuft/lang/TokenType.ts ***!
  \*************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nvar TokenType;\r\n(function (TokenType) {\r\n    TokenType[TokenType[\"IDENTIFIER_TKN\"] = 0] = \"IDENTIFIER_TKN\";\r\n    TokenType[TokenType[\"ASSIGNMENT_TKN\"] = 1] = \"ASSIGNMENT_TKN\";\r\n    TokenType[TokenType[\"COLON_TKN\"] = 2] = \"COLON_TKN\";\r\n    TokenType[TokenType[\"NUMERIC_LITERAL_TKN\"] = 3] = \"NUMERIC_LITERAL_TKN\";\r\n    TokenType[TokenType[\"STRING_LITERAL_TKN\"] = 4] = \"STRING_LITERAL_TKN\";\r\n    TokenType[TokenType[\"LEFT_CURLY_TKN\"] = 5] = \"LEFT_CURLY_TKN\";\r\n    TokenType[TokenType[\"RIGHT_CURLY_TKN\"] = 6] = \"RIGHT_CURLY_TKN\";\r\n    TokenType[TokenType[\"LEFT_SQUARE_TKN\"] = 7] = \"LEFT_SQUARE_TKN\";\r\n    TokenType[TokenType[\"RIGHT_SQUARE_TKN\"] = 8] = \"RIGHT_SQUARE_TKN\";\r\n    TokenType[TokenType[\"LEFT_PARENS_TKN\"] = 9] = \"LEFT_PARENS_TKN\";\r\n    TokenType[TokenType[\"RIGHT_PARENS_TKN\"] = 10] = \"RIGHT_PARENS_TKN\";\r\n    TokenType[TokenType[\"TYPE_TKN\"] = 11] = \"TYPE_TKN\";\r\n    TokenType[TokenType[\"MODULE_TKN\"] = 12] = \"MODULE_TKN\";\r\n    TokenType[TokenType[\"WITH_TKN\"] = 13] = \"WITH_TKN\";\r\n    TokenType[TokenType[\"IF_TKN\"] = 14] = \"IF_TKN\";\r\n    TokenType[TokenType[\"ELSE_TKN\"] = 15] = \"ELSE_TKN\";\r\n    TokenType[TokenType[\"WHILE_TKN\"] = 16] = \"WHILE_TKN\";\r\n    TokenType[TokenType[\"FOR_TKN\"] = 17] = \"FOR_TKN\";\r\n    TokenType[TokenType[\"IN_TKN\"] = 18] = \"IN_TKN\";\r\n    TokenType[TokenType[\"BREAK_TKN\"] = 19] = \"BREAK_TKN\";\r\n    TokenType[TokenType[\"CONTINUE_TKN\"] = 20] = \"CONTINUE_TKN\";\r\n    TokenType[TokenType[\"COND_OR_TKN\"] = 21] = \"COND_OR_TKN\";\r\n    TokenType[TokenType[\"COND_AND_TKN\"] = 22] = \"COND_AND_TKN\";\r\n    TokenType[TokenType[\"COND_XOR_TKN\"] = 23] = \"COND_XOR_TKN\";\r\n    TokenType[TokenType[\"COND_NOT_TKN\"] = 24] = \"COND_NOT_TKN\";\r\n    TokenType[TokenType[\"COND_EQUALS_TKN\"] = 25] = \"COND_EQUALS_TKN\";\r\n    TokenType[TokenType[\"COND_NOT_EQUALS_TKN\"] = 26] = \"COND_NOT_EQUALS_TKN\";\r\n    TokenType[TokenType[\"COND_LESS_THAN_TKN\"] = 27] = \"COND_LESS_THAN_TKN\";\r\n    TokenType[TokenType[\"COND_LESS_THAN_EQUAL_TKN\"] = 28] = \"COND_LESS_THAN_EQUAL_TKN\";\r\n    TokenType[TokenType[\"COND_GREATER_THAN_TKN\"] = 29] = \"COND_GREATER_THAN_TKN\";\r\n    TokenType[TokenType[\"COND_GREATER_THAN_EQUAL_TKN\"] = 30] = \"COND_GREATER_THAN_EQUAL_TKN\";\r\n    TokenType[TokenType[\"COND_TRUE_TKN\"] = 31] = \"COND_TRUE_TKN\";\r\n    TokenType[TokenType[\"COND_FALSE_TKN\"] = 32] = \"COND_FALSE_TKN\";\r\n    TokenType[TokenType[\"VOID_TKN\"] = 33] = \"VOID_TKN\";\r\n    TokenType[TokenType[\"NUM_TKN\"] = 34] = \"NUM_TKN\";\r\n    TokenType[TokenType[\"STRING_TKN\"] = 35] = \"STRING_TKN\";\r\n    TokenType[TokenType[\"BOOL_TKN\"] = 36] = \"BOOL_TKN\";\r\n    TokenType[TokenType[\"BIN_OR_TKN\"] = 37] = \"BIN_OR_TKN\";\r\n    TokenType[TokenType[\"BIN_AND_TKN\"] = 38] = \"BIN_AND_TKN\";\r\n    TokenType[TokenType[\"BIN_XOR_TKN\"] = 39] = \"BIN_XOR_TKN\";\r\n    TokenType[TokenType[\"BIN_NOT_TKN\"] = 40] = \"BIN_NOT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_RIGHT_TKN\"] = 41] = \"BIN_SHIFT_RIGHT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_ARITHMETIC_RIGHT_TKN\"] = 42] = \"BIN_SHIFT_ARITHMETIC_RIGHT_TKN\";\r\n    TokenType[TokenType[\"BIN_SHIFT_LEFT_TKN\"] = 43] = \"BIN_SHIFT_LEFT_TKN\";\r\n    TokenType[TokenType[\"MAPPING_TKN\"] = 44] = \"MAPPING_TKN\";\r\n    TokenType[TokenType[\"RETURN_TKN\"] = 45] = \"RETURN_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_TKN\"] = 46] = \"OP_ADD_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_TKN\"] = 47] = \"OP_SUBTR_TKN\";\r\n    TokenType[TokenType[\"OP_MULT_TKN\"] = 48] = \"OP_MULT_TKN\";\r\n    TokenType[TokenType[\"OP_DIVIDE_TKN\"] = 49] = \"OP_DIVIDE_TKN\";\r\n    TokenType[TokenType[\"OP_CARROT_TKN\"] = 50] = \"OP_CARROT_TKN\";\r\n    TokenType[TokenType[\"OP_MODULUS_TKN\"] = 51] = \"OP_MODULUS_TKN\";\r\n    TokenType[TokenType[\"OP_BAR_TKN\"] = 52] = \"OP_BAR_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_ADD_TKN\"] = 53] = \"OP_ADD_ADD_TKN\";\r\n    TokenType[TokenType[\"OP_ADD_EQUALS_TKN\"] = 54] = \"OP_ADD_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_SUBTR_TKN\"] = 55] = \"OP_SUBTR_SUBTR_TKN\";\r\n    TokenType[TokenType[\"OP_SUBTR_EQUALS_TKN\"] = 56] = \"OP_SUBTR_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_MULT_EQUALS_TKN\"] = 57] = \"OP_MULT_EQUALS_TKN\";\r\n    TokenType[TokenType[\"OP_DIV_EQUALS_TKN\"] = 58] = \"OP_DIV_EQUALS_TKN\";\r\n    TokenType[TokenType[\"DOUBLE_QUOTE_TKN\"] = 59] = \"DOUBLE_QUOTE_TKN\";\r\n    TokenType[TokenType[\"DOT_TKN\"] = 60] = \"DOT_TKN\";\r\n    TokenType[TokenType[\"ELLIPSES_TKN\"] = 61] = \"ELLIPSES_TKN\";\r\n    TokenType[TokenType[\"COMMA_TKN\"] = 62] = \"COMMA_TKN\";\r\n    TokenType[TokenType[\"SEMI_COLON_TKN\"] = 63] = \"SEMI_COLON_TKN\";\r\n    TokenType[TokenType[\"UNKNOWN_TKN\"] = 64] = \"UNKNOWN_TKN\";\r\n    TokenType[TokenType[\"END_TKN\"] = 65] = \"END_TKN\";\r\n})(TokenType || (TokenType = {}));\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TokenType);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3VmdC8uL3NyYy9zY3VmdC9sYW5nL1Rva2VuVHlwZS50cz9iNTcyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFLLFNBb0ZKO0FBcEZELFdBQUssU0FBUztJQUVWLDZEQUFjO0lBQ2QsNkRBQWM7SUFDZCxtREFBUztJQUNULHVFQUFtQjtJQUNuQixxRUFBa0I7SUFHbEIsNkRBQWM7SUFDZCwrREFBZTtJQUNmLCtEQUFlO0lBQ2YsaUVBQWdCO0lBQ2hCLCtEQUFlO0lBQ2Ysa0VBQWdCO0lBR2hCLGtEQUFRO0lBQ1Isc0RBQVU7SUFDVixrREFBUTtJQUNSLDhDQUFNO0lBQ04sa0RBQVE7SUFDUixvREFBUztJQUNULGdEQUFPO0lBQ1AsOENBQU07SUFDTixvREFBUztJQUNULDBEQUFZO0lBR1osd0RBQVc7SUFDWCwwREFBWTtJQUNaLDBEQUFZO0lBQ1osMERBQVk7SUFDWixnRUFBZTtJQUNmLHdFQUFtQjtJQUNuQixzRUFBa0I7SUFDbEIsa0ZBQXdCO0lBQ3hCLDRFQUFxQjtJQUNyQix3RkFBMkI7SUFDM0IsNERBQWE7SUFDYiw4REFBYztJQUdkLGtEQUFRO0lBQ1IsZ0RBQU87SUFDUCxzREFBVTtJQUNWLGtEQUFRO0lBR1Isc0RBQVU7SUFDVix3REFBVztJQUNYLHdEQUFXO0lBQ1gsd0RBQVc7SUFDWCx3RUFBbUI7SUFDbkIsOEZBQThCO0lBQzlCLHNFQUFrQjtJQUdsQix3REFBVztJQUNYLHNEQUFVO0lBR1Ysc0RBQVU7SUFDViwwREFBWTtJQUNaLHdEQUFXO0lBQ1gsNERBQWE7SUFDYiw0REFBYTtJQUNiLDhEQUFjO0lBQ2Qsc0RBQVU7SUFDViw4REFBYztJQUNkLG9FQUFpQjtJQUNqQixzRUFBa0I7SUFDbEIsd0VBQW1CO0lBQ25CLHNFQUFrQjtJQUNsQixvRUFBaUI7SUFHakIsa0VBQWdCO0lBQ2hCLGdEQUFPO0lBQ1AsMERBQVk7SUFDWixvREFBUztJQUNULDhEQUFjO0lBQ2Qsd0RBQVc7SUFDWCxnREFBTztBQUNYLENBQUMsRUFwRkksU0FBUyxLQUFULFNBQVMsUUFvRmI7QUFFRCxpRUFBZSxTQUFTLEVBQUMiLCJmaWxlIjoiLi9zcmMvc2N1ZnQvbGFuZy9Ub2tlblR5cGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJlbnVtIFRva2VuVHlwZSB7XHJcbiAgICAvLyBTdGF0ZW1lbnRzXHJcbiAgICBJREVOVElGSUVSX1RLTixcclxuICAgIEFTU0lHTk1FTlRfVEtOLFxyXG4gICAgQ09MT05fVEtOLFxyXG4gICAgTlVNRVJJQ19MSVRFUkFMX1RLTixcclxuICAgIFNUUklOR19MSVRFUkFMX1RLTixcclxuXHJcbiAgICAvLyBCbG9ja3NcclxuICAgIExFRlRfQ1VSTFlfVEtOLFxyXG4gICAgUklHSFRfQ1VSTFlfVEtOLFxyXG4gICAgTEVGVF9TUVVBUkVfVEtOLFxyXG4gICAgUklHSFRfU1FVQVJFX1RLTixcclxuICAgIExFRlRfUEFSRU5TX1RLTixcclxuICAgIFJJR0hUX1BBUkVOU19US04sXHJcblxyXG4gICAgLy8gU3RhdGVtZW50IEtleXdvcmRzXHJcbiAgICBUWVBFX1RLTixcclxuICAgIE1PRFVMRV9US04sXHJcbiAgICBXSVRIX1RLTixcclxuICAgIElGX1RLTixcclxuICAgIEVMU0VfVEtOLFxyXG4gICAgV0hJTEVfVEtOLFxyXG4gICAgRk9SX1RLTixcclxuICAgIElOX1RLTixcclxuICAgIEJSRUFLX1RLTixcclxuICAgIENPTlRJTlVFX1RLTixcclxuXHJcbiAgICAvLyBDb25kaXRpb25hbHNcclxuICAgIENPTkRfT1JfVEtOLCAvLyB8fFxyXG4gICAgQ09ORF9BTkRfVEtOLCAvLyAmJlxyXG4gICAgQ09ORF9YT1JfVEtOLCAvLyAkJFxyXG4gICAgQ09ORF9OT1RfVEtOLCAvLyAhXHJcbiAgICBDT05EX0VRVUFMU19US04sXHJcbiAgICBDT05EX05PVF9FUVVBTFNfVEtOLFxyXG4gICAgQ09ORF9MRVNTX1RIQU5fVEtOLFxyXG4gICAgQ09ORF9MRVNTX1RIQU5fRVFVQUxfVEtOLFxyXG4gICAgQ09ORF9HUkVBVEVSX1RIQU5fVEtOLFxyXG4gICAgQ09ORF9HUkVBVEVSX1RIQU5fRVFVQUxfVEtOLFxyXG4gICAgQ09ORF9UUlVFX1RLTixcclxuICAgIENPTkRfRkFMU0VfVEtOLFxyXG5cclxuICAgIC8vIFR5cGVzXHJcbiAgICBWT0lEX1RLTixcclxuICAgIE5VTV9US04sXHJcbiAgICBTVFJJTkdfVEtOLFxyXG4gICAgQk9PTF9US04sXHJcblxyXG4gICAgLy8gQml0d2lzZSBPcGVyYXRvcnNcclxuICAgIEJJTl9PUl9US04sIC8vIG9yXHJcbiAgICBCSU5fQU5EX1RLTiwgLy8gYW5kXHJcbiAgICBCSU5fWE9SX1RLTiwgLy8geG9yXHJcbiAgICBCSU5fTk9UX1RLTiwgLy8gflxyXG4gICAgQklOX1NISUZUX1JJR0hUX1RLTiwgLy8gPj5cclxuICAgIEJJTl9TSElGVF9BUklUSE1FVElDX1JJR0hUX1RLTiwgLy8gPj4+XHJcbiAgICBCSU5fU0hJRlRfTEVGVF9US04sIC8vIDw8XHJcblxyXG4gICAgLy8gTGFtYmRhIERlZnNcclxuICAgIE1BUFBJTkdfVEtOLCAvLyAoKSBcIi0+XCIgdm9pZFxyXG4gICAgUkVUVVJOX1RLTixcclxuXHJcbiAgICAvLyBPcGVyYXRvcnNcclxuICAgIE9QX0FERF9US04sXHJcbiAgICBPUF9TVUJUUl9US04sXHJcbiAgICBPUF9NVUxUX1RLTixcclxuICAgIE9QX0RJVklERV9US04sXHJcbiAgICBPUF9DQVJST1RfVEtOLFxyXG4gICAgT1BfTU9EVUxVU19US04sXHJcbiAgICBPUF9CQVJfVEtOLFxyXG4gICAgT1BfQUREX0FERF9US04sXHJcbiAgICBPUF9BRERfRVFVQUxTX1RLTixcclxuICAgIE9QX1NVQlRSX1NVQlRSX1RLTixcclxuICAgIE9QX1NVQlRSX0VRVUFMU19US04sXHJcbiAgICBPUF9NVUxUX0VRVUFMU19US04sXHJcbiAgICBPUF9ESVZfRVFVQUxTX1RLTixcclxuXHJcbiAgICAvL01pc2NlbGxhbmVvdXNcclxuICAgIERPVUJMRV9RVU9URV9US04sXHJcbiAgICBET1RfVEtOLFxyXG4gICAgRUxMSVBTRVNfVEtOLCAvLyBmb3IgW2FycmF5XSBkb1NvbWV0aGluZyguLi4pXHJcbiAgICBDT01NQV9US04sXHJcbiAgICBTRU1JX0NPTE9OX1RLTixcclxuICAgIFVOS05PV05fVEtOLFxyXG4gICAgRU5EX1RLTixcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9rZW5UeXBlO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scuft/lang/TokenType.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/main.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;